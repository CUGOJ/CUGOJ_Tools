/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Base
{

  public partial class ServiceBaseInfo : TBase
  {
    private string _TraceAddress;
    private string _LogAddress;
    private string _MysqlAddress;
    private string _RedisAddress;
    private string _RabbitMQAddress;
    private string _Neo4jAddress;

    public string ServiceID { get; set; }

    public string ServiceIP { get; set; }

    public string ServicePort { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Base.ServiceTypeEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Base.ServiceTypeEnum ServiceType { get; set; }

    public long RegisterTime { get; set; }

    public string Env { get; set; }

    public string TraceAddress
    {
      get
      {
        return _TraceAddress;
      }
      set
      {
        __isset.TraceAddress = true;
        this._TraceAddress = value;
      }
    }

    public string LogAddress
    {
      get
      {
        return _LogAddress;
      }
      set
      {
        __isset.LogAddress = true;
        this._LogAddress = value;
      }
    }

    public string MysqlAddress
    {
      get
      {
        return _MysqlAddress;
      }
      set
      {
        __isset.MysqlAddress = true;
        this._MysqlAddress = value;
      }
    }

    public string RedisAddress
    {
      get
      {
        return _RedisAddress;
      }
      set
      {
        __isset.RedisAddress = true;
        this._RedisAddress = value;
      }
    }

    public string RabbitMQAddress
    {
      get
      {
        return _RabbitMQAddress;
      }
      set
      {
        __isset.RabbitMQAddress = true;
        this._RabbitMQAddress = value;
      }
    }

    public string Neo4jAddress
    {
      get
      {
        return _Neo4jAddress;
      }
      set
      {
        __isset.Neo4jAddress = true;
        this._Neo4jAddress = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool TraceAddress;
      public bool LogAddress;
      public bool MysqlAddress;
      public bool RedisAddress;
      public bool RabbitMQAddress;
      public bool Neo4jAddress;
    }

    public ServiceBaseInfo()
    {
    }

    public ServiceBaseInfo(string ServiceID, string ServiceIP, string ServicePort, global::CUGOJ.RPC.Gen.Base.ServiceTypeEnum ServiceType, long RegisterTime, string Env) : this()
    {
      this.ServiceID = ServiceID;
      this.ServiceIP = ServiceIP;
      this.ServicePort = ServicePort;
      this.ServiceType = ServiceType;
      this.RegisterTime = RegisterTime;
      this.Env = Env;
    }

    public ServiceBaseInfo DeepCopy()
    {
      var tmp35 = new ServiceBaseInfo();
      if((ServiceID != null))
      {
        tmp35.ServiceID = this.ServiceID;
      }
      if((ServiceIP != null))
      {
        tmp35.ServiceIP = this.ServiceIP;
      }
      if((ServicePort != null))
      {
        tmp35.ServicePort = this.ServicePort;
      }
      tmp35.ServiceType = this.ServiceType;
      tmp35.RegisterTime = this.RegisterTime;
      if((Env != null))
      {
        tmp35.Env = this.Env;
      }
      if((TraceAddress != null) && __isset.TraceAddress)
      {
        tmp35.TraceAddress = this.TraceAddress;
      }
      tmp35.__isset.TraceAddress = this.__isset.TraceAddress;
      if((LogAddress != null) && __isset.LogAddress)
      {
        tmp35.LogAddress = this.LogAddress;
      }
      tmp35.__isset.LogAddress = this.__isset.LogAddress;
      if((MysqlAddress != null) && __isset.MysqlAddress)
      {
        tmp35.MysqlAddress = this.MysqlAddress;
      }
      tmp35.__isset.MysqlAddress = this.__isset.MysqlAddress;
      if((RedisAddress != null) && __isset.RedisAddress)
      {
        tmp35.RedisAddress = this.RedisAddress;
      }
      tmp35.__isset.RedisAddress = this.__isset.RedisAddress;
      if((RabbitMQAddress != null) && __isset.RabbitMQAddress)
      {
        tmp35.RabbitMQAddress = this.RabbitMQAddress;
      }
      tmp35.__isset.RabbitMQAddress = this.__isset.RabbitMQAddress;
      if((Neo4jAddress != null) && __isset.Neo4jAddress)
      {
        tmp35.Neo4jAddress = this.Neo4jAddress;
      }
      tmp35.__isset.Neo4jAddress = this.__isset.Neo4jAddress;
      return tmp35;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ServiceID = false;
        bool isset_ServiceIP = false;
        bool isset_ServicePort = false;
        bool isset_ServiceType = false;
        bool isset_RegisterTime = false;
        bool isset_Env = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ServiceID = await iprot.ReadStringAsync(cancellationToken);
                isset_ServiceID = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ServiceIP = await iprot.ReadStringAsync(cancellationToken);
                isset_ServiceIP = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ServicePort = await iprot.ReadStringAsync(cancellationToken);
                isset_ServicePort = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ServiceType = (global::CUGOJ.RPC.Gen.Base.ServiceTypeEnum)await iprot.ReadI32Async(cancellationToken);
                isset_ServiceType = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                RegisterTime = await iprot.ReadI64Async(cancellationToken);
                isset_RegisterTime = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Env = await iprot.ReadStringAsync(cancellationToken);
                isset_Env = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                TraceAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                LogAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                MysqlAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                RedisAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.String)
              {
                RabbitMQAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                Neo4jAddress = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_ServiceID)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_ServiceIP)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_ServicePort)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_ServiceType)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_RegisterTime)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_Env)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp36 = new TStruct("ServiceBaseInfo");
        await oprot.WriteStructBeginAsync(tmp36, cancellationToken);
        var tmp37 = new TField();
        if((ServiceID != null))
        {
          tmp37.Name = "ServiceID";
          tmp37.Type = TType.String;
          tmp37.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(ServiceID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ServiceIP != null))
        {
          tmp37.Name = "ServiceIP";
          tmp37.Type = TType.String;
          tmp37.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(ServiceIP, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ServicePort != null))
        {
          tmp37.Name = "ServicePort";
          tmp37.Type = TType.String;
          tmp37.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(ServicePort, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp37.Name = "ServiceType";
        tmp37.Type = TType.I32;
        tmp37.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
        await oprot.WriteI32Async((int)ServiceType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp37.Name = "RegisterTime";
        tmp37.Type = TType.I64;
        tmp37.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
        await oprot.WriteI64Async(RegisterTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Env != null))
        {
          tmp37.Name = "Env";
          tmp37.Type = TType.String;
          tmp37.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(Env, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((TraceAddress != null) && __isset.TraceAddress)
        {
          tmp37.Name = "TraceAddress";
          tmp37.Type = TType.String;
          tmp37.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(TraceAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((LogAddress != null) && __isset.LogAddress)
        {
          tmp37.Name = "LogAddress";
          tmp37.Type = TType.String;
          tmp37.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(LogAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MysqlAddress != null) && __isset.MysqlAddress)
        {
          tmp37.Name = "MysqlAddress";
          tmp37.Type = TType.String;
          tmp37.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(MysqlAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RedisAddress != null) && __isset.RedisAddress)
        {
          tmp37.Name = "RedisAddress";
          tmp37.Type = TType.String;
          tmp37.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(RedisAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((RabbitMQAddress != null) && __isset.RabbitMQAddress)
        {
          tmp37.Name = "RabbitMQAddress";
          tmp37.Type = TType.String;
          tmp37.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(RabbitMQAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Neo4jAddress != null) && __isset.Neo4jAddress)
        {
          tmp37.Name = "Neo4jAddress";
          tmp37.Type = TType.String;
          tmp37.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp37, cancellationToken);
          await oprot.WriteStringAsync(Neo4jAddress, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ServiceBaseInfo other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(ServiceID, other.ServiceID)
        && global::System.Object.Equals(ServiceIP, other.ServiceIP)
        && global::System.Object.Equals(ServicePort, other.ServicePort)
        && global::System.Object.Equals(ServiceType, other.ServiceType)
        && global::System.Object.Equals(RegisterTime, other.RegisterTime)
        && global::System.Object.Equals(Env, other.Env)
        && ((__isset.TraceAddress == other.__isset.TraceAddress) && ((!__isset.TraceAddress) || (global::System.Object.Equals(TraceAddress, other.TraceAddress))))
        && ((__isset.LogAddress == other.__isset.LogAddress) && ((!__isset.LogAddress) || (global::System.Object.Equals(LogAddress, other.LogAddress))))
        && ((__isset.MysqlAddress == other.__isset.MysqlAddress) && ((!__isset.MysqlAddress) || (global::System.Object.Equals(MysqlAddress, other.MysqlAddress))))
        && ((__isset.RedisAddress == other.__isset.RedisAddress) && ((!__isset.RedisAddress) || (global::System.Object.Equals(RedisAddress, other.RedisAddress))))
        && ((__isset.RabbitMQAddress == other.__isset.RabbitMQAddress) && ((!__isset.RabbitMQAddress) || (global::System.Object.Equals(RabbitMQAddress, other.RabbitMQAddress))))
        && ((__isset.Neo4jAddress == other.__isset.Neo4jAddress) && ((!__isset.Neo4jAddress) || (global::System.Object.Equals(Neo4jAddress, other.Neo4jAddress))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ServiceID != null))
        {
          hashcode = (hashcode * 397) + ServiceID.GetHashCode();
        }
        if((ServiceIP != null))
        {
          hashcode = (hashcode * 397) + ServiceIP.GetHashCode();
        }
        if((ServicePort != null))
        {
          hashcode = (hashcode * 397) + ServicePort.GetHashCode();
        }
        hashcode = (hashcode * 397) + ServiceType.GetHashCode();
        hashcode = (hashcode * 397) + RegisterTime.GetHashCode();
        if((Env != null))
        {
          hashcode = (hashcode * 397) + Env.GetHashCode();
        }
        if((TraceAddress != null) && __isset.TraceAddress)
        {
          hashcode = (hashcode * 397) + TraceAddress.GetHashCode();
        }
        if((LogAddress != null) && __isset.LogAddress)
        {
          hashcode = (hashcode * 397) + LogAddress.GetHashCode();
        }
        if((MysqlAddress != null) && __isset.MysqlAddress)
        {
          hashcode = (hashcode * 397) + MysqlAddress.GetHashCode();
        }
        if((RedisAddress != null) && __isset.RedisAddress)
        {
          hashcode = (hashcode * 397) + RedisAddress.GetHashCode();
        }
        if((RabbitMQAddress != null) && __isset.RabbitMQAddress)
        {
          hashcode = (hashcode * 397) + RabbitMQAddress.GetHashCode();
        }
        if((Neo4jAddress != null) && __isset.Neo4jAddress)
        {
          hashcode = (hashcode * 397) + Neo4jAddress.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp38 = new StringBuilder("ServiceBaseInfo(");
      if((ServiceID != null))
      {
        tmp38.Append(", ServiceID: ");
        ServiceID.ToString(tmp38);
      }
      if((ServiceIP != null))
      {
        tmp38.Append(", ServiceIP: ");
        ServiceIP.ToString(tmp38);
      }
      if((ServicePort != null))
      {
        tmp38.Append(", ServicePort: ");
        ServicePort.ToString(tmp38);
      }
      tmp38.Append(", ServiceType: ");
      ServiceType.ToString(tmp38);
      tmp38.Append(", RegisterTime: ");
      RegisterTime.ToString(tmp38);
      if((Env != null))
      {
        tmp38.Append(", Env: ");
        Env.ToString(tmp38);
      }
      if((TraceAddress != null) && __isset.TraceAddress)
      {
        tmp38.Append(", TraceAddress: ");
        TraceAddress.ToString(tmp38);
      }
      if((LogAddress != null) && __isset.LogAddress)
      {
        tmp38.Append(", LogAddress: ");
        LogAddress.ToString(tmp38);
      }
      if((MysqlAddress != null) && __isset.MysqlAddress)
      {
        tmp38.Append(", MysqlAddress: ");
        MysqlAddress.ToString(tmp38);
      }
      if((RedisAddress != null) && __isset.RedisAddress)
      {
        tmp38.Append(", RedisAddress: ");
        RedisAddress.ToString(tmp38);
      }
      if((RabbitMQAddress != null) && __isset.RabbitMQAddress)
      {
        tmp38.Append(", RabbitMQAddress: ");
        RabbitMQAddress.ToString(tmp38);
      }
      if((Neo4jAddress != null) && __isset.Neo4jAddress)
      {
        tmp38.Append(", Neo4jAddress: ");
        Neo4jAddress.ToString(tmp38);
      }
      tmp38.Append(')');
      return tmp38.ToString();
    }
  }

}
