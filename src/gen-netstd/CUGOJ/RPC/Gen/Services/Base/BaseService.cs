/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Services.Base
{
  public partial class BaseService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse> SaveSubmissionInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse> GetSubmissionList(global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListResponse> GetUserSubmissionStatusByProblemIDList(global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await send_Ping(req, cancellationToken);
        return await recv_Ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp217 = new InternalStructs.Ping_args() {
          Req = req,
        };
        
        await tmp217.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> recv_Ping(CancellationToken cancellationToken = default)
      {
        
        var tmp218 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp218.Type == TMessageType.Exception)
        {
          var tmp219 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp219;
        }

        var tmp220 = new InternalStructs.Ping_result();
        await tmp220.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp220.__isset.success)
        {
          return tmp220.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveUserInfo(req, cancellationToken);
        return await recv_SaveUserInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp221 = new InternalStructs.SaveUserInfo_args() {
          Req = req,
        };
        
        await tmp221.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> recv_SaveUserInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp222 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp222.Type == TMessageType.Exception)
        {
          var tmp223 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp223;
        }

        var tmp224 = new InternalStructs.SaveUserInfo_result();
        await tmp224.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp224.__isset.success)
        {
          return tmp224.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveUserInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetUserInfo(req, cancellationToken);
        return await recv_MulGetUserInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp225 = new InternalStructs.MulGetUserInfo_args() {
          Req = req,
        };
        
        await tmp225.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> recv_MulGetUserInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp226 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp226.Type == TMessageType.Exception)
        {
          var tmp227 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp227;
        }

        var tmp228 = new InternalStructs.MulGetUserInfo_result();
        await tmp228.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp228.__isset.success)
        {
          return tmp228.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetUserInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default)
      {
        await send_Login(req, cancellationToken);
        return await recv_Login(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp229 = new InternalStructs.Login_args() {
          Req = req,
        };
        
        await tmp229.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> recv_Login(CancellationToken cancellationToken = default)
      {
        
        var tmp230 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp230.Type == TMessageType.Exception)
        {
          var tmp231 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp231;
        }

        var tmp232 = new InternalStructs.Login_result();
        await tmp232.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp232.__isset.success)
        {
          return tmp232.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveProblemInfo(req, cancellationToken);
        return await recv_SaveProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp233 = new InternalStructs.SaveProblemInfo_args() {
          Req = req,
        };
        
        await tmp233.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> recv_SaveProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp234 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp234.Type == TMessageType.Exception)
        {
          var tmp235 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp235;
        }

        var tmp236 = new InternalStructs.SaveProblemInfo_result();
        await tmp236.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp236.__isset.success)
        {
          return tmp236.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetProblemInfo(req, cancellationToken);
        return await recv_MulGetProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp237 = new InternalStructs.MulGetProblemInfo_args() {
          Req = req,
        };
        
        await tmp237.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> recv_MulGetProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp238 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp238.Type == TMessageType.Exception)
        {
          var tmp239 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp239;
        }

        var tmp240 = new InternalStructs.MulGetProblemInfo_result();
        await tmp240.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp240.__isset.success)
        {
          return tmp240.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblemList(req, cancellationToken);
        return await recv_GetProblemList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp241 = new InternalStructs.GetProblemList_args() {
          Req = req,
        };
        
        await tmp241.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> recv_GetProblemList(CancellationToken cancellationToken = default)
      {
        
        var tmp242 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp242.Type == TMessageType.Exception)
        {
          var tmp243 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp243;
        }

        var tmp244 = new InternalStructs.GetProblemList_result();
        await tmp244.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp244.__isset.success)
        {
          return tmp244.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblemList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveContestInfo(req, cancellationToken);
        return await recv_SaveContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp245 = new InternalStructs.SaveContestInfo_args() {
          Req = req,
        };
        
        await tmp245.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> recv_SaveContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp246 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp246.Type == TMessageType.Exception)
        {
          var tmp247 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp247;
        }

        var tmp248 = new InternalStructs.SaveContestInfo_result();
        await tmp248.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp248.__isset.success)
        {
          return tmp248.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetContestInfo(req, cancellationToken);
        return await recv_MulGetContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp249 = new InternalStructs.MulGetContestInfo_args() {
          Req = req,
        };
        
        await tmp249.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> recv_MulGetContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp250 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp250.Type == TMessageType.Exception)
        {
          var tmp251 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp251;
        }

        var tmp252 = new InternalStructs.MulGetContestInfo_result();
        await tmp252.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp252.__isset.success)
        {
          return tmp252.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestList(req, cancellationToken);
        return await recv_GetContestList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp253 = new InternalStructs.GetContestList_args() {
          Req = req,
        };
        
        await tmp253.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> recv_GetContestList(CancellationToken cancellationToken = default)
      {
        
        var tmp254 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp254.Type == TMessageType.Exception)
        {
          var tmp255 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp255;
        }

        var tmp256 = new InternalStructs.GetContestList_result();
        await tmp256.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp256.__isset.success)
        {
          return tmp256.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse> SaveSubmissionInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveSubmissionInfo(req, cancellationToken);
        return await recv_SaveSubmissionInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveSubmissionInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveSubmissionInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp257 = new InternalStructs.SaveSubmissionInfo_args() {
          Req = req,
        };
        
        await tmp257.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse> recv_SaveSubmissionInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp258 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp258.Type == TMessageType.Exception)
        {
          var tmp259 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp259;
        }

        var tmp260 = new InternalStructs.SaveSubmissionInfo_result();
        await tmp260.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp260.__isset.success)
        {
          return tmp260.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveSubmissionInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse> GetSubmissionList(global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetSubmissionList(req, cancellationToken);
        return await recv_GetSubmissionList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSubmissionList(global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSubmissionList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp261 = new InternalStructs.GetSubmissionList_args() {
          Req = req,
        };
        
        await tmp261.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse> recv_GetSubmissionList(CancellationToken cancellationToken = default)
      {
        
        var tmp262 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp262.Type == TMessageType.Exception)
        {
          var tmp263 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp263;
        }

        var tmp264 = new InternalStructs.GetSubmissionList_result();
        await tmp264.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp264.__isset.success)
        {
          return tmp264.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSubmissionList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListResponse> GetUserSubmissionStatusByProblemIDList(global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetUserSubmissionStatusByProblemIDList(req, cancellationToken);
        return await recv_GetUserSubmissionStatusByProblemIDList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetUserSubmissionStatusByProblemIDList(global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetUserSubmissionStatusByProblemIDList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp265 = new InternalStructs.GetUserSubmissionStatusByProblemIDList_args() {
          Req = req,
        };
        
        await tmp265.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListResponse> recv_GetUserSubmissionStatusByProblemIDList(CancellationToken cancellationToken = default)
      {
        
        var tmp266 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp266.Type == TMessageType.Exception)
        {
          var tmp267 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp267;
        }

        var tmp268 = new InternalStructs.GetUserSubmissionStatusByProblemIDList_result();
        await tmp268.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp268.__isset.success)
        {
          return tmp268.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserSubmissionStatusByProblemIDList failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["Ping"] = Ping_ProcessAsync;
        processMap_["SaveUserInfo"] = SaveUserInfo_ProcessAsync;
        processMap_["MulGetUserInfo"] = MulGetUserInfo_ProcessAsync;
        processMap_["Login"] = Login_ProcessAsync;
        processMap_["SaveProblemInfo"] = SaveProblemInfo_ProcessAsync;
        processMap_["MulGetProblemInfo"] = MulGetProblemInfo_ProcessAsync;
        processMap_["GetProblemList"] = GetProblemList_ProcessAsync;
        processMap_["SaveContestInfo"] = SaveContestInfo_ProcessAsync;
        processMap_["MulGetContestInfo"] = MulGetContestInfo_ProcessAsync;
        processMap_["GetContestList"] = GetContestList_ProcessAsync;
        processMap_["SaveSubmissionInfo"] = SaveSubmissionInfo_ProcessAsync;
        processMap_["GetSubmissionList"] = GetSubmissionList_ProcessAsync;
        processMap_["GetUserSubmissionStatusByProblemIDList"] = GetUserSubmissionStatusByProblemIDList_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task Ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp269 = new InternalStructs.Ping_args();
        await tmp269.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp270 = new InternalStructs.Ping_result();
        try
        {
          tmp270.Success = await _iAsync.Ping(tmp269.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp270.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp271)
        {
          var tmp272 = $"Error occurred in {GetType().FullName}: {tmp271.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp271, tmp272);
          else
            Console.Error.WriteLine(tmp272);
          var tmp273 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp273.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveUserInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp274 = new InternalStructs.SaveUserInfo_args();
        await tmp274.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp275 = new InternalStructs.SaveUserInfo_result();
        try
        {
          tmp275.Success = await _iAsync.SaveUserInfo(tmp274.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp275.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp276)
        {
          var tmp277 = $"Error occurred in {GetType().FullName}: {tmp276.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp276, tmp277);
          else
            Console.Error.WriteLine(tmp277);
          var tmp278 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp278.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetUserInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp279 = new InternalStructs.MulGetUserInfo_args();
        await tmp279.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp280 = new InternalStructs.MulGetUserInfo_result();
        try
        {
          tmp280.Success = await _iAsync.MulGetUserInfo(tmp279.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp280.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp281)
        {
          var tmp282 = $"Error occurred in {GetType().FullName}: {tmp281.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp281, tmp282);
          else
            Console.Error.WriteLine(tmp282);
          var tmp283 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp283.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Login_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp284 = new InternalStructs.Login_args();
        await tmp284.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp285 = new InternalStructs.Login_result();
        try
        {
          tmp285.Success = await _iAsync.Login(tmp284.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Reply, seqid), cancellationToken); 
          await tmp285.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp286)
        {
          var tmp287 = $"Error occurred in {GetType().FullName}: {tmp286.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp286, tmp287);
          else
            Console.Error.WriteLine(tmp287);
          var tmp288 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Exception, seqid), cancellationToken);
          await tmp288.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp289 = new InternalStructs.SaveProblemInfo_args();
        await tmp289.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp290 = new InternalStructs.SaveProblemInfo_result();
        try
        {
          tmp290.Success = await _iAsync.SaveProblemInfo(tmp289.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp290.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp291)
        {
          var tmp292 = $"Error occurred in {GetType().FullName}: {tmp291.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp291, tmp292);
          else
            Console.Error.WriteLine(tmp292);
          var tmp293 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp293.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp294 = new InternalStructs.MulGetProblemInfo_args();
        await tmp294.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp295 = new InternalStructs.MulGetProblemInfo_result();
        try
        {
          tmp295.Success = await _iAsync.MulGetProblemInfo(tmp294.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp295.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp296)
        {
          var tmp297 = $"Error occurred in {GetType().FullName}: {tmp296.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp296, tmp297);
          else
            Console.Error.WriteLine(tmp297);
          var tmp298 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp298.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblemList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp299 = new InternalStructs.GetProblemList_args();
        await tmp299.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp300 = new InternalStructs.GetProblemList_result();
        try
        {
          tmp300.Success = await _iAsync.GetProblemList(tmp299.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp300.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp301)
        {
          var tmp302 = $"Error occurred in {GetType().FullName}: {tmp301.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp301, tmp302);
          else
            Console.Error.WriteLine(tmp302);
          var tmp303 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Exception, seqid), cancellationToken);
          await tmp303.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp304 = new InternalStructs.SaveContestInfo_args();
        await tmp304.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp305 = new InternalStructs.SaveContestInfo_result();
        try
        {
          tmp305.Success = await _iAsync.SaveContestInfo(tmp304.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp305.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp306)
        {
          var tmp307 = $"Error occurred in {GetType().FullName}: {tmp306.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp306, tmp307);
          else
            Console.Error.WriteLine(tmp307);
          var tmp308 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp308.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp309 = new InternalStructs.MulGetContestInfo_args();
        await tmp309.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp310 = new InternalStructs.MulGetContestInfo_result();
        try
        {
          tmp310.Success = await _iAsync.MulGetContestInfo(tmp309.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp310.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp311)
        {
          var tmp312 = $"Error occurred in {GetType().FullName}: {tmp311.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp311, tmp312);
          else
            Console.Error.WriteLine(tmp312);
          var tmp313 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp313.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp314 = new InternalStructs.GetContestList_args();
        await tmp314.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp315 = new InternalStructs.GetContestList_result();
        try
        {
          tmp315.Success = await _iAsync.GetContestList(tmp314.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp315.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp316)
        {
          var tmp317 = $"Error occurred in {GetType().FullName}: {tmp316.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp316, tmp317);
          else
            Console.Error.WriteLine(tmp317);
          var tmp318 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Exception, seqid), cancellationToken);
          await tmp318.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveSubmissionInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp319 = new InternalStructs.SaveSubmissionInfo_args();
        await tmp319.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp320 = new InternalStructs.SaveSubmissionInfo_result();
        try
        {
          tmp320.Success = await _iAsync.SaveSubmissionInfo(tmp319.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveSubmissionInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp320.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp321)
        {
          var tmp322 = $"Error occurred in {GetType().FullName}: {tmp321.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp321, tmp322);
          else
            Console.Error.WriteLine(tmp322);
          var tmp323 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveSubmissionInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp323.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSubmissionList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp324 = new InternalStructs.GetSubmissionList_args();
        await tmp324.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp325 = new InternalStructs.GetSubmissionList_result();
        try
        {
          tmp325.Success = await _iAsync.GetSubmissionList(tmp324.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp325.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp326)
        {
          var tmp327 = $"Error occurred in {GetType().FullName}: {tmp326.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp326, tmp327);
          else
            Console.Error.WriteLine(tmp327);
          var tmp328 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionList", TMessageType.Exception, seqid), cancellationToken);
          await tmp328.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetUserSubmissionStatusByProblemIDList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp329 = new InternalStructs.GetUserSubmissionStatusByProblemIDList_args();
        await tmp329.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp330 = new InternalStructs.GetUserSubmissionStatusByProblemIDList_result();
        try
        {
          tmp330.Success = await _iAsync.GetUserSubmissionStatusByProblemIDList(tmp329.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserSubmissionStatusByProblemIDList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp330.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp331)
        {
          var tmp332 = $"Error occurred in {GetType().FullName}: {tmp331.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp331, tmp332);
          else
            Console.Error.WriteLine(tmp332);
          var tmp333 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserSubmissionStatusByProblemIDList", TMessageType.Exception, seqid), cancellationToken);
          await tmp333.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class Ping_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingRequest _req;

        public global::CUGOJ.RPC.Gen.Base.PingRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Ping_args()
        {
        }

        public Ping_args DeepCopy()
        {
          var tmp334 = new Ping_args();
          if((Req != null) && __isset.req)
          {
            tmp334.Req = (global::CUGOJ.RPC.Gen.Base.PingRequest)this.Req.DeepCopy();
          }
          tmp334.__isset.req = this.__isset.req;
          return tmp334;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Base.PingRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp335 = new TStruct("Ping_args");
            await oprot.WriteStructBeginAsync(tmp335, cancellationToken);
            var tmp336 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp336.Name = "req";
              tmp336.Type = TType.Struct;
              tmp336.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp336, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp337 = new StringBuilder("Ping_args(");
          int tmp338 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp338++) { tmp337.Append(", "); }
            tmp337.Append("Req: ");
            Req.ToString(tmp337);
          }
          tmp337.Append(')');
          return tmp337.ToString();
        }
      }


      public partial class Ping_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingResponse _success;

        public global::CUGOJ.RPC.Gen.Base.PingResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Ping_result()
        {
        }

        public Ping_result DeepCopy()
        {
          var tmp339 = new Ping_result();
          if((Success != null) && __isset.success)
          {
            tmp339.Success = (global::CUGOJ.RPC.Gen.Base.PingResponse)this.Success.DeepCopy();
          }
          tmp339.__isset.success = this.__isset.success;
          return tmp339;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.PingResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp340 = new TStruct("Ping_result");
            await oprot.WriteStructBeginAsync(tmp340, cancellationToken);
            var tmp341 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp341.Name = "Success";
                tmp341.Type = TType.Struct;
                tmp341.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp342 = new StringBuilder("Ping_result(");
          int tmp343 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp343++) { tmp342.Append(", "); }
            tmp342.Append("Success: ");
            Success.ToString(tmp342);
          }
          tmp342.Append(')');
          return tmp342.ToString();
        }
      }


      public partial class SaveUserInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveUserInfo_args()
        {
        }

        public SaveUserInfo_args DeepCopy()
        {
          var tmp344 = new SaveUserInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp344.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest)this.Req.DeepCopy();
          }
          tmp344.__isset.req = this.__isset.req;
          return tmp344;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp345 = new TStruct("SaveUserInfo_args");
            await oprot.WriteStructBeginAsync(tmp345, cancellationToken);
            var tmp346 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp346.Name = "req";
              tmp346.Type = TType.Struct;
              tmp346.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp346, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp347 = new StringBuilder("SaveUserInfo_args(");
          int tmp348 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp348++) { tmp347.Append(", "); }
            tmp347.Append("Req: ");
            Req.ToString(tmp347);
          }
          tmp347.Append(')');
          return tmp347.ToString();
        }
      }


      public partial class SaveUserInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveUserInfo_result()
        {
        }

        public SaveUserInfo_result DeepCopy()
        {
          var tmp349 = new SaveUserInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp349.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse)this.Success.DeepCopy();
          }
          tmp349.__isset.success = this.__isset.success;
          return tmp349;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp350 = new TStruct("SaveUserInfo_result");
            await oprot.WriteStructBeginAsync(tmp350, cancellationToken);
            var tmp351 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp351.Name = "Success";
                tmp351.Type = TType.Struct;
                tmp351.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp351, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp352 = new StringBuilder("SaveUserInfo_result(");
          int tmp353 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp353++) { tmp352.Append(", "); }
            tmp352.Append("Success: ");
            Success.ToString(tmp352);
          }
          tmp352.Append(')');
          return tmp352.ToString();
        }
      }


      public partial class MulGetUserInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetUserInfo_args()
        {
        }

        public MulGetUserInfo_args DeepCopy()
        {
          var tmp354 = new MulGetUserInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp354.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest)this.Req.DeepCopy();
          }
          tmp354.__isset.req = this.__isset.req;
          return tmp354;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp355 = new TStruct("MulGetUserInfo_args");
            await oprot.WriteStructBeginAsync(tmp355, cancellationToken);
            var tmp356 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp356.Name = "req";
              tmp356.Type = TType.Struct;
              tmp356.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp356, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetUserInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp357 = new StringBuilder("MulGetUserInfo_args(");
          int tmp358 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp358++) { tmp357.Append(", "); }
            tmp357.Append("Req: ");
            Req.ToString(tmp357);
          }
          tmp357.Append(')');
          return tmp357.ToString();
        }
      }


      public partial class MulGetUserInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetUserInfo_result()
        {
        }

        public MulGetUserInfo_result DeepCopy()
        {
          var tmp359 = new MulGetUserInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp359.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse)this.Success.DeepCopy();
          }
          tmp359.__isset.success = this.__isset.success;
          return tmp359;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp360 = new TStruct("MulGetUserInfo_result");
            await oprot.WriteStructBeginAsync(tmp360, cancellationToken);
            var tmp361 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp361.Name = "Success";
                tmp361.Type = TType.Struct;
                tmp361.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp361, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetUserInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp362 = new StringBuilder("MulGetUserInfo_result(");
          int tmp363 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp363++) { tmp362.Append(", "); }
            tmp362.Append("Success: ");
            Success.ToString(tmp362);
          }
          tmp362.Append(')');
          return tmp362.ToString();
        }
      }


      public partial class Login_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.LoginRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.LoginRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Login_args()
        {
        }

        public Login_args DeepCopy()
        {
          var tmp364 = new Login_args();
          if((Req != null) && __isset.req)
          {
            tmp364.Req = (global::CUGOJ.RPC.Gen.Services.Base.LoginRequest)this.Req.DeepCopy();
          }
          tmp364.__isset.req = this.__isset.req;
          return tmp364;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.LoginRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp365 = new TStruct("Login_args");
            await oprot.WriteStructBeginAsync(tmp365, cancellationToken);
            var tmp366 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp366.Name = "req";
              tmp366.Type = TType.Struct;
              tmp366.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp366, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp367 = new StringBuilder("Login_args(");
          int tmp368 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp368++) { tmp367.Append(", "); }
            tmp367.Append("Req: ");
            Req.ToString(tmp367);
          }
          tmp367.Append(')');
          return tmp367.ToString();
        }
      }


      public partial class Login_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.LoginResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.LoginResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Login_result()
        {
        }

        public Login_result DeepCopy()
        {
          var tmp369 = new Login_result();
          if((Success != null) && __isset.success)
          {
            tmp369.Success = (global::CUGOJ.RPC.Gen.Services.Base.LoginResponse)this.Success.DeepCopy();
          }
          tmp369.__isset.success = this.__isset.success;
          return tmp369;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.LoginResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp370 = new TStruct("Login_result");
            await oprot.WriteStructBeginAsync(tmp370, cancellationToken);
            var tmp371 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp371.Name = "Success";
                tmp371.Type = TType.Struct;
                tmp371.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp371, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp372 = new StringBuilder("Login_result(");
          int tmp373 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp373++) { tmp372.Append(", "); }
            tmp372.Append("Success: ");
            Success.ToString(tmp372);
          }
          tmp372.Append(')');
          return tmp372.ToString();
        }
      }


      public partial class SaveProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveProblemInfo_args()
        {
        }

        public SaveProblemInfo_args DeepCopy()
        {
          var tmp374 = new SaveProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp374.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp374.__isset.req = this.__isset.req;
          return tmp374;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp375 = new TStruct("SaveProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp375, cancellationToken);
            var tmp376 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp376.Name = "req";
              tmp376.Type = TType.Struct;
              tmp376.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp376, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp377 = new StringBuilder("SaveProblemInfo_args(");
          int tmp378 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp378++) { tmp377.Append(", "); }
            tmp377.Append("Req: ");
            Req.ToString(tmp377);
          }
          tmp377.Append(')');
          return tmp377.ToString();
        }
      }


      public partial class SaveProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveProblemInfo_result()
        {
        }

        public SaveProblemInfo_result DeepCopy()
        {
          var tmp379 = new SaveProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp379.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp379.__isset.success = this.__isset.success;
          return tmp379;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp380 = new TStruct("SaveProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp380, cancellationToken);
            var tmp381 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp381.Name = "Success";
                tmp381.Type = TType.Struct;
                tmp381.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp382 = new StringBuilder("SaveProblemInfo_result(");
          int tmp383 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("Success: ");
            Success.ToString(tmp382);
          }
          tmp382.Append(')');
          return tmp382.ToString();
        }
      }


      public partial class MulGetProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetProblemInfo_args()
        {
        }

        public MulGetProblemInfo_args DeepCopy()
        {
          var tmp384 = new MulGetProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp384.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp384.__isset.req = this.__isset.req;
          return tmp384;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp385 = new TStruct("MulGetProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp385, cancellationToken);
            var tmp386 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp386.Name = "req";
              tmp386.Type = TType.Struct;
              tmp386.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp386, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp387 = new StringBuilder("MulGetProblemInfo_args(");
          int tmp388 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp388++) { tmp387.Append(", "); }
            tmp387.Append("Req: ");
            Req.ToString(tmp387);
          }
          tmp387.Append(')');
          return tmp387.ToString();
        }
      }


      public partial class MulGetProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetProblemInfo_result()
        {
        }

        public MulGetProblemInfo_result DeepCopy()
        {
          var tmp389 = new MulGetProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp389.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp389.__isset.success = this.__isset.success;
          return tmp389;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp390 = new TStruct("MulGetProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp390, cancellationToken);
            var tmp391 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp391.Name = "Success";
                tmp391.Type = TType.Struct;
                tmp391.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp391, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp392 = new StringBuilder("MulGetProblemInfo_result(");
          int tmp393 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp393++) { tmp392.Append(", "); }
            tmp392.Append("Success: ");
            Success.ToString(tmp392);
          }
          tmp392.Append(')');
          return tmp392.ToString();
        }
      }


      public partial class GetProblemList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblemList_args()
        {
        }

        public GetProblemList_args DeepCopy()
        {
          var tmp394 = new GetProblemList_args();
          if((Req != null) && __isset.req)
          {
            tmp394.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest)this.Req.DeepCopy();
          }
          tmp394.__isset.req = this.__isset.req;
          return tmp394;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp395 = new TStruct("GetProblemList_args");
            await oprot.WriteStructBeginAsync(tmp395, cancellationToken);
            var tmp396 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp396.Name = "req";
              tmp396.Type = TType.Struct;
              tmp396.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp396, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp397 = new StringBuilder("GetProblemList_args(");
          int tmp398 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp398++) { tmp397.Append(", "); }
            tmp397.Append("Req: ");
            Req.ToString(tmp397);
          }
          tmp397.Append(')');
          return tmp397.ToString();
        }
      }


      public partial class GetProblemList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblemList_result()
        {
        }

        public GetProblemList_result DeepCopy()
        {
          var tmp399 = new GetProblemList_result();
          if((Success != null) && __isset.success)
          {
            tmp399.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse)this.Success.DeepCopy();
          }
          tmp399.__isset.success = this.__isset.success;
          return tmp399;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp400 = new TStruct("GetProblemList_result");
            await oprot.WriteStructBeginAsync(tmp400, cancellationToken);
            var tmp401 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp401.Name = "Success";
                tmp401.Type = TType.Struct;
                tmp401.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp402 = new StringBuilder("GetProblemList_result(");
          int tmp403 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp403++) { tmp402.Append(", "); }
            tmp402.Append("Success: ");
            Success.ToString(tmp402);
          }
          tmp402.Append(')');
          return tmp402.ToString();
        }
      }


      public partial class SaveContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveContestInfo_args()
        {
        }

        public SaveContestInfo_args DeepCopy()
        {
          var tmp404 = new SaveContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp404.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest)this.Req.DeepCopy();
          }
          tmp404.__isset.req = this.__isset.req;
          return tmp404;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp405 = new TStruct("SaveContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp405, cancellationToken);
            var tmp406 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp406.Name = "req";
              tmp406.Type = TType.Struct;
              tmp406.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp406, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp407 = new StringBuilder("SaveContestInfo_args(");
          int tmp408 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp408++) { tmp407.Append(", "); }
            tmp407.Append("Req: ");
            Req.ToString(tmp407);
          }
          tmp407.Append(')');
          return tmp407.ToString();
        }
      }


      public partial class SaveContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveContestInfo_result()
        {
        }

        public SaveContestInfo_result DeepCopy()
        {
          var tmp409 = new SaveContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp409.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse)this.Success.DeepCopy();
          }
          tmp409.__isset.success = this.__isset.success;
          return tmp409;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp410 = new TStruct("SaveContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp410, cancellationToken);
            var tmp411 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp411.Name = "Success";
                tmp411.Type = TType.Struct;
                tmp411.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp411, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp412 = new StringBuilder("SaveContestInfo_result(");
          int tmp413 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp413++) { tmp412.Append(", "); }
            tmp412.Append("Success: ");
            Success.ToString(tmp412);
          }
          tmp412.Append(')');
          return tmp412.ToString();
        }
      }


      public partial class MulGetContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetContestInfo_args()
        {
        }

        public MulGetContestInfo_args DeepCopy()
        {
          var tmp414 = new MulGetContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp414.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest)this.Req.DeepCopy();
          }
          tmp414.__isset.req = this.__isset.req;
          return tmp414;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp415 = new TStruct("MulGetContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp415, cancellationToken);
            var tmp416 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp416.Name = "req";
              tmp416.Type = TType.Struct;
              tmp416.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp416, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp417 = new StringBuilder("MulGetContestInfo_args(");
          int tmp418 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp418++) { tmp417.Append(", "); }
            tmp417.Append("Req: ");
            Req.ToString(tmp417);
          }
          tmp417.Append(')');
          return tmp417.ToString();
        }
      }


      public partial class MulGetContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetContestInfo_result()
        {
        }

        public MulGetContestInfo_result DeepCopy()
        {
          var tmp419 = new MulGetContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp419.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse)this.Success.DeepCopy();
          }
          tmp419.__isset.success = this.__isset.success;
          return tmp419;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp420 = new TStruct("MulGetContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp420, cancellationToken);
            var tmp421 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp421.Name = "Success";
                tmp421.Type = TType.Struct;
                tmp421.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp422 = new StringBuilder("MulGetContestInfo_result(");
          int tmp423 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp423++) { tmp422.Append(", "); }
            tmp422.Append("Success: ");
            Success.ToString(tmp422);
          }
          tmp422.Append(')');
          return tmp422.ToString();
        }
      }


      public partial class GetContestList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestList_args()
        {
        }

        public GetContestList_args DeepCopy()
        {
          var tmp424 = new GetContestList_args();
          if((Req != null) && __isset.req)
          {
            tmp424.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest)this.Req.DeepCopy();
          }
          tmp424.__isset.req = this.__isset.req;
          return tmp424;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp425 = new TStruct("GetContestList_args");
            await oprot.WriteStructBeginAsync(tmp425, cancellationToken);
            var tmp426 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp426.Name = "req";
              tmp426.Type = TType.Struct;
              tmp426.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp426, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp427 = new StringBuilder("GetContestList_args(");
          int tmp428 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp428++) { tmp427.Append(", "); }
            tmp427.Append("Req: ");
            Req.ToString(tmp427);
          }
          tmp427.Append(')');
          return tmp427.ToString();
        }
      }


      public partial class GetContestList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestList_result()
        {
        }

        public GetContestList_result DeepCopy()
        {
          var tmp429 = new GetContestList_result();
          if((Success != null) && __isset.success)
          {
            tmp429.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse)this.Success.DeepCopy();
          }
          tmp429.__isset.success = this.__isset.success;
          return tmp429;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp430 = new TStruct("GetContestList_result");
            await oprot.WriteStructBeginAsync(tmp430, cancellationToken);
            var tmp431 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp431.Name = "Success";
                tmp431.Type = TType.Struct;
                tmp431.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp431, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp432 = new StringBuilder("GetContestList_result(");
          int tmp433 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp433++) { tmp432.Append(", "); }
            tmp432.Append("Success: ");
            Success.ToString(tmp432);
          }
          tmp432.Append(')');
          return tmp432.ToString();
        }
      }


      public partial class SaveSubmissionInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveSubmissionInfo_args()
        {
        }

        public SaveSubmissionInfo_args DeepCopy()
        {
          var tmp434 = new SaveSubmissionInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp434.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest)this.Req.DeepCopy();
          }
          tmp434.__isset.req = this.__isset.req;
          return tmp434;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp435 = new TStruct("SaveSubmissionInfo_args");
            await oprot.WriteStructBeginAsync(tmp435, cancellationToken);
            var tmp436 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp436.Name = "req";
              tmp436.Type = TType.Struct;
              tmp436.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp436, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveSubmissionInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp437 = new StringBuilder("SaveSubmissionInfo_args(");
          int tmp438 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp438++) { tmp437.Append(", "); }
            tmp437.Append("Req: ");
            Req.ToString(tmp437);
          }
          tmp437.Append(')');
          return tmp437.ToString();
        }
      }


      public partial class SaveSubmissionInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveSubmissionInfo_result()
        {
        }

        public SaveSubmissionInfo_result DeepCopy()
        {
          var tmp439 = new SaveSubmissionInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp439.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse)this.Success.DeepCopy();
          }
          tmp439.__isset.success = this.__isset.success;
          return tmp439;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("SaveSubmissionInfo_result");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            var tmp441 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp441.Name = "Success";
                tmp441.Type = TType.Struct;
                tmp441.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveSubmissionInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("SaveSubmissionInfo_result(");
          int tmp443 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("Success: ");
            Success.ToString(tmp442);
          }
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class GetSubmissionList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetSubmissionList_args()
        {
        }

        public GetSubmissionList_args DeepCopy()
        {
          var tmp444 = new GetSubmissionList_args();
          if((Req != null) && __isset.req)
          {
            tmp444.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest)this.Req.DeepCopy();
          }
          tmp444.__isset.req = this.__isset.req;
          return tmp444;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp445 = new TStruct("GetSubmissionList_args");
            await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
            var tmp446 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp446.Name = "req";
              tmp446.Type = TType.Struct;
              tmp446.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp447 = new StringBuilder("GetSubmissionList_args(");
          int tmp448 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("Req: ");
            Req.ToString(tmp447);
          }
          tmp447.Append(')');
          return tmp447.ToString();
        }
      }


      public partial class GetSubmissionList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetSubmissionList_result()
        {
        }

        public GetSubmissionList_result DeepCopy()
        {
          var tmp449 = new GetSubmissionList_result();
          if((Success != null) && __isset.success)
          {
            tmp449.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse)this.Success.DeepCopy();
          }
          tmp449.__isset.success = this.__isset.success;
          return tmp449;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp450 = new TStruct("GetSubmissionList_result");
            await oprot.WriteStructBeginAsync(tmp450, cancellationToken);
            var tmp451 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp451.Name = "Success";
                tmp451.Type = TType.Struct;
                tmp451.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp451, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp452 = new StringBuilder("GetSubmissionList_result(");
          int tmp453 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp453++) { tmp452.Append(", "); }
            tmp452.Append("Success: ");
            Success.ToString(tmp452);
          }
          tmp452.Append(')');
          return tmp452.ToString();
        }
      }


      public partial class GetUserSubmissionStatusByProblemIDList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetUserSubmissionStatusByProblemIDList_args()
        {
        }

        public GetUserSubmissionStatusByProblemIDList_args DeepCopy()
        {
          var tmp454 = new GetUserSubmissionStatusByProblemIDList_args();
          if((Req != null) && __isset.req)
          {
            tmp454.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListRequest)this.Req.DeepCopy();
          }
          tmp454.__isset.req = this.__isset.req;
          return tmp454;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp455 = new TStruct("GetUserSubmissionStatusByProblemIDList_args");
            await oprot.WriteStructBeginAsync(tmp455, cancellationToken);
            var tmp456 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp456.Name = "req";
              tmp456.Type = TType.Struct;
              tmp456.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp456, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserSubmissionStatusByProblemIDList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp457 = new StringBuilder("GetUserSubmissionStatusByProblemIDList_args(");
          int tmp458 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp458++) { tmp457.Append(", "); }
            tmp457.Append("Req: ");
            Req.ToString(tmp457);
          }
          tmp457.Append(')');
          return tmp457.ToString();
        }
      }


      public partial class GetUserSubmissionStatusByProblemIDList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetUserSubmissionStatusByProblemIDList_result()
        {
        }

        public GetUserSubmissionStatusByProblemIDList_result DeepCopy()
        {
          var tmp459 = new GetUserSubmissionStatusByProblemIDList_result();
          if((Success != null) && __isset.success)
          {
            tmp459.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListResponse)this.Success.DeepCopy();
          }
          tmp459.__isset.success = this.__isset.success;
          return tmp459;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetUserSubmissionStatusByProblemIDListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp460 = new TStruct("GetUserSubmissionStatusByProblemIDList_result");
            await oprot.WriteStructBeginAsync(tmp460, cancellationToken);
            var tmp461 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp461.Name = "Success";
                tmp461.Type = TType.Struct;
                tmp461.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp461, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserSubmissionStatusByProblemIDList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp462 = new StringBuilder("GetUserSubmissionStatusByProblemIDList_result(");
          int tmp463 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp463++) { tmp462.Append(", "); }
            tmp462.Append("Success: ");
            Success.ToString(tmp462);
          }
          tmp462.Append(')');
          return tmp462.ToString();
        }
      }

    }

  }
}
