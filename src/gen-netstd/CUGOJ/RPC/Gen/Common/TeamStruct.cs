/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class TeamStruct : TBase
  {
    private long _ID;
    private string _Name;
    private string _Signature;
    private string _Description;
    private global::CUGOJ.RPC.Gen.Common.UserStruct _Leader;
    private global::CUGOJ.RPC.Gen.Common.OrganizationStruct _Organization;
    private long _CreateTime;
    private long _UpdateTime;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Signature
    {
      get
      {
        return _Signature;
      }
      set
      {
        __isset.Signature = true;
        this._Signature = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.UserStruct Leader
    {
      get
      {
        return _Leader;
      }
      set
      {
        __isset.Leader = true;
        this._Leader = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.OrganizationStruct Organization
    {
      get
      {
        return _Organization;
      }
      set
      {
        __isset.Organization = true;
        this._Organization = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _CreateTime;
      }
      set
      {
        __isset.CreateTime = true;
        this._CreateTime = value;
      }
    }

    public long UpdateTime
    {
      get
      {
        return _UpdateTime;
      }
      set
      {
        __isset.UpdateTime = true;
        this._UpdateTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool Name;
      public bool Signature;
      public bool Description;
      public bool Leader;
      public bool Organization;
      public bool CreateTime;
      public bool UpdateTime;
    }

    public TeamStruct()
    {
    }

    public TeamStruct DeepCopy()
    {
      var tmp29 = new TeamStruct();
      if(__isset.ID)
      {
        tmp29.ID = this.ID;
      }
      tmp29.__isset.ID = this.__isset.ID;
      if((Name != null) && __isset.Name)
      {
        tmp29.Name = this.Name;
      }
      tmp29.__isset.Name = this.__isset.Name;
      if((Signature != null) && __isset.Signature)
      {
        tmp29.Signature = this.Signature;
      }
      tmp29.__isset.Signature = this.__isset.Signature;
      if((Description != null) && __isset.Description)
      {
        tmp29.Description = this.Description;
      }
      tmp29.__isset.Description = this.__isset.Description;
      if((Leader != null) && __isset.Leader)
      {
        tmp29.Leader = (global::CUGOJ.RPC.Gen.Common.UserStruct)this.Leader.DeepCopy();
      }
      tmp29.__isset.Leader = this.__isset.Leader;
      if((Organization != null) && __isset.Organization)
      {
        tmp29.Organization = (global::CUGOJ.RPC.Gen.Common.OrganizationStruct)this.Organization.DeepCopy();
      }
      tmp29.__isset.Organization = this.__isset.Organization;
      if(__isset.CreateTime)
      {
        tmp29.CreateTime = this.CreateTime;
      }
      tmp29.__isset.CreateTime = this.__isset.CreateTime;
      if(__isset.UpdateTime)
      {
        tmp29.UpdateTime = this.UpdateTime;
      }
      tmp29.__isset.UpdateTime = this.__isset.UpdateTime;
      return tmp29;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Signature = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Description = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Leader = new global::CUGOJ.RPC.Gen.Common.UserStruct();
                await Leader.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Organization = new global::CUGOJ.RPC.Gen.Common.OrganizationStruct();
                await Organization.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                CreateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                UpdateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp30 = new TStruct("TeamStruct");
        await oprot.WriteStructBeginAsync(tmp30, cancellationToken);
        var tmp31 = new TField();
        if(__isset.ID)
        {
          tmp31.Name = "ID";
          tmp31.Type = TType.I64;
          tmp31.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.Name)
        {
          tmp31.Name = "Name";
          tmp31.Type = TType.String;
          tmp31.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Signature != null) && __isset.Signature)
        {
          tmp31.Name = "Signature";
          tmp31.Type = TType.String;
          tmp31.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteStringAsync(Signature, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Description != null) && __isset.Description)
        {
          tmp31.Name = "Description";
          tmp31.Type = TType.String;
          tmp31.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteStringAsync(Description, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Leader != null) && __isset.Leader)
        {
          tmp31.Name = "Leader";
          tmp31.Type = TType.Struct;
          tmp31.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await Leader.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Organization != null) && __isset.Organization)
        {
          tmp31.Name = "Organization";
          tmp31.Type = TType.Struct;
          tmp31.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await Organization.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.CreateTime)
        {
          tmp31.Name = "CreateTime";
          tmp31.Type = TType.I64;
          tmp31.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteI64Async(CreateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.UpdateTime)
        {
          tmp31.Name = "UpdateTime";
          tmp31.Type = TType.I64;
          tmp31.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
          await oprot.WriteI64Async(UpdateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TeamStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.Name == other.__isset.Name) && ((!__isset.Name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.Signature == other.__isset.Signature) && ((!__isset.Signature) || (global::System.Object.Equals(Signature, other.Signature))))
        && ((__isset.Description == other.__isset.Description) && ((!__isset.Description) || (global::System.Object.Equals(Description, other.Description))))
        && ((__isset.Leader == other.__isset.Leader) && ((!__isset.Leader) || (global::System.Object.Equals(Leader, other.Leader))))
        && ((__isset.Organization == other.__isset.Organization) && ((!__isset.Organization) || (global::System.Object.Equals(Organization, other.Organization))))
        && ((__isset.CreateTime == other.__isset.CreateTime) && ((!__isset.CreateTime) || (global::System.Object.Equals(CreateTime, other.CreateTime))))
        && ((__isset.UpdateTime == other.__isset.UpdateTime) && ((!__isset.UpdateTime) || (global::System.Object.Equals(UpdateTime, other.UpdateTime))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if((Name != null) && __isset.Name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Signature != null) && __isset.Signature)
        {
          hashcode = (hashcode * 397) + Signature.GetHashCode();
        }
        if((Description != null) && __isset.Description)
        {
          hashcode = (hashcode * 397) + Description.GetHashCode();
        }
        if((Leader != null) && __isset.Leader)
        {
          hashcode = (hashcode * 397) + Leader.GetHashCode();
        }
        if((Organization != null) && __isset.Organization)
        {
          hashcode = (hashcode * 397) + Organization.GetHashCode();
        }
        if(__isset.CreateTime)
        {
          hashcode = (hashcode * 397) + CreateTime.GetHashCode();
        }
        if(__isset.UpdateTime)
        {
          hashcode = (hashcode * 397) + UpdateTime.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp32 = new StringBuilder("TeamStruct(");
      int tmp33 = 0;
      if(__isset.ID)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("ID: ");
        ID.ToString(tmp32);
      }
      if((Name != null) && __isset.Name)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("Name: ");
        Name.ToString(tmp32);
      }
      if((Signature != null) && __isset.Signature)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("Signature: ");
        Signature.ToString(tmp32);
      }
      if((Description != null) && __isset.Description)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("Description: ");
        Description.ToString(tmp32);
      }
      if((Leader != null) && __isset.Leader)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("Leader: ");
        Leader.ToString(tmp32);
      }
      if((Organization != null) && __isset.Organization)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("Organization: ");
        Organization.ToString(tmp32);
      }
      if(__isset.CreateTime)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("CreateTime: ");
        CreateTime.ToString(tmp32);
      }
      if(__isset.UpdateTime)
      {
        if(0 < tmp33++) { tmp32.Append(", "); }
        tmp32.Append("UpdateTime: ");
        UpdateTime.ToString(tmp32);
      }
      tmp32.Append(')');
      return tmp32.ToString();
    }
  }

}
