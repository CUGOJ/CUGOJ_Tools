/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class OrganizationStruct : TBase
  {
    private long _ID;
    private string _Name;
    private string _Description;
    private global::CUGOJ.RPC.Gen.Common.UserStruct _Owner;
    private global::CUGOJ.RPC.Gen.Common.OrganizationStruct _Parent;
    private string _Avatar;
    private global::CUGOJ.RPC.Gen.Common.OrganizationStatusEnum _Status;
    private long _CreateTime;
    private long _UpdateTime;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.UserStruct Owner
    {
      get
      {
        return _Owner;
      }
      set
      {
        __isset.Owner = true;
        this._Owner = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.OrganizationStruct Parent
    {
      get
      {
        return _Parent;
      }
      set
      {
        __isset.Parent = true;
        this._Parent = value;
      }
    }

    public string Avatar
    {
      get
      {
        return _Avatar;
      }
      set
      {
        __isset.Avatar = true;
        this._Avatar = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Common.OrganizationStatusEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Common.OrganizationStatusEnum Status
    {
      get
      {
        return _Status;
      }
      set
      {
        __isset.Status = true;
        this._Status = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _CreateTime;
      }
      set
      {
        __isset.CreateTime = true;
        this._CreateTime = value;
      }
    }

    public long UpdateTime
    {
      get
      {
        return _UpdateTime;
      }
      set
      {
        __isset.UpdateTime = true;
        this._UpdateTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool Name;
      public bool Description;
      public bool Owner;
      public bool Parent;
      public bool Avatar;
      public bool Status;
      public bool CreateTime;
      public bool UpdateTime;
    }

    public OrganizationStruct()
    {
    }

    public OrganizationStruct DeepCopy()
    {
      var tmp24 = new OrganizationStruct();
      if(__isset.ID)
      {
        tmp24.ID = this.ID;
      }
      tmp24.__isset.ID = this.__isset.ID;
      if((Name != null) && __isset.Name)
      {
        tmp24.Name = this.Name;
      }
      tmp24.__isset.Name = this.__isset.Name;
      if((Description != null) && __isset.Description)
      {
        tmp24.Description = this.Description;
      }
      tmp24.__isset.Description = this.__isset.Description;
      if((Owner != null) && __isset.Owner)
      {
        tmp24.Owner = (global::CUGOJ.RPC.Gen.Common.UserStruct)this.Owner.DeepCopy();
      }
      tmp24.__isset.Owner = this.__isset.Owner;
      if((Parent != null) && __isset.Parent)
      {
        tmp24.Parent = (global::CUGOJ.RPC.Gen.Common.OrganizationStruct)this.Parent.DeepCopy();
      }
      tmp24.__isset.Parent = this.__isset.Parent;
      if((Avatar != null) && __isset.Avatar)
      {
        tmp24.Avatar = this.Avatar;
      }
      tmp24.__isset.Avatar = this.__isset.Avatar;
      if(__isset.Status)
      {
        tmp24.Status = this.Status;
      }
      tmp24.__isset.Status = this.__isset.Status;
      if(__isset.CreateTime)
      {
        tmp24.CreateTime = this.CreateTime;
      }
      tmp24.__isset.CreateTime = this.__isset.CreateTime;
      if(__isset.UpdateTime)
      {
        tmp24.UpdateTime = this.UpdateTime;
      }
      tmp24.__isset.UpdateTime = this.__isset.UpdateTime;
      return tmp24;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Description = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Owner = new global::CUGOJ.RPC.Gen.Common.UserStruct();
                await Owner.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Parent = new global::CUGOJ.RPC.Gen.Common.OrganizationStruct();
                await Parent.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Avatar = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Status = (global::CUGOJ.RPC.Gen.Common.OrganizationStatusEnum)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                CreateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I64)
              {
                UpdateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp25 = new TStruct("OrganizationStruct");
        await oprot.WriteStructBeginAsync(tmp25, cancellationToken);
        var tmp26 = new TField();
        if(__isset.ID)
        {
          tmp26.Name = "ID";
          tmp26.Type = TType.I64;
          tmp26.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.Name)
        {
          tmp26.Name = "Name";
          tmp26.Type = TType.String;
          tmp26.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Description != null) && __isset.Description)
        {
          tmp26.Name = "Description";
          tmp26.Type = TType.String;
          tmp26.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteStringAsync(Description, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Owner != null) && __isset.Owner)
        {
          tmp26.Name = "Owner";
          tmp26.Type = TType.Struct;
          tmp26.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await Owner.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parent != null) && __isset.Parent)
        {
          tmp26.Name = "Parent";
          tmp26.Type = TType.Struct;
          tmp26.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await Parent.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Avatar != null) && __isset.Avatar)
        {
          tmp26.Name = "Avatar";
          tmp26.Type = TType.String;
          tmp26.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteStringAsync(Avatar, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Status)
        {
          tmp26.Name = "Status";
          tmp26.Type = TType.I32;
          tmp26.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.CreateTime)
        {
          tmp26.Name = "CreateTime";
          tmp26.Type = TType.I64;
          tmp26.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI64Async(CreateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.UpdateTime)
        {
          tmp26.Name = "UpdateTime";
          tmp26.Type = TType.I64;
          tmp26.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
          await oprot.WriteI64Async(UpdateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is OrganizationStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.Name == other.__isset.Name) && ((!__isset.Name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.Description == other.__isset.Description) && ((!__isset.Description) || (global::System.Object.Equals(Description, other.Description))))
        && ((__isset.Owner == other.__isset.Owner) && ((!__isset.Owner) || (global::System.Object.Equals(Owner, other.Owner))))
        && ((__isset.Parent == other.__isset.Parent) && ((!__isset.Parent) || (global::System.Object.Equals(Parent, other.Parent))))
        && ((__isset.Avatar == other.__isset.Avatar) && ((!__isset.Avatar) || (global::System.Object.Equals(Avatar, other.Avatar))))
        && ((__isset.Status == other.__isset.Status) && ((!__isset.Status) || (global::System.Object.Equals(Status, other.Status))))
        && ((__isset.CreateTime == other.__isset.CreateTime) && ((!__isset.CreateTime) || (global::System.Object.Equals(CreateTime, other.CreateTime))))
        && ((__isset.UpdateTime == other.__isset.UpdateTime) && ((!__isset.UpdateTime) || (global::System.Object.Equals(UpdateTime, other.UpdateTime))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if((Name != null) && __isset.Name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Description != null) && __isset.Description)
        {
          hashcode = (hashcode * 397) + Description.GetHashCode();
        }
        if((Owner != null) && __isset.Owner)
        {
          hashcode = (hashcode * 397) + Owner.GetHashCode();
        }
        if((Parent != null) && __isset.Parent)
        {
          hashcode = (hashcode * 397) + Parent.GetHashCode();
        }
        if((Avatar != null) && __isset.Avatar)
        {
          hashcode = (hashcode * 397) + Avatar.GetHashCode();
        }
        if(__isset.Status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if(__isset.CreateTime)
        {
          hashcode = (hashcode * 397) + CreateTime.GetHashCode();
        }
        if(__isset.UpdateTime)
        {
          hashcode = (hashcode * 397) + UpdateTime.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp27 = new StringBuilder("OrganizationStruct(");
      int tmp28 = 0;
      if(__isset.ID)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("ID: ");
        ID.ToString(tmp27);
      }
      if((Name != null) && __isset.Name)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Name: ");
        Name.ToString(tmp27);
      }
      if((Description != null) && __isset.Description)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Description: ");
        Description.ToString(tmp27);
      }
      if((Owner != null) && __isset.Owner)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Owner: ");
        Owner.ToString(tmp27);
      }
      if((Parent != null) && __isset.Parent)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Parent: ");
        Parent.ToString(tmp27);
      }
      if((Avatar != null) && __isset.Avatar)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Avatar: ");
        Avatar.ToString(tmp27);
      }
      if(__isset.Status)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("Status: ");
        Status.ToString(tmp27);
      }
      if(__isset.CreateTime)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("CreateTime: ");
        CreateTime.ToString(tmp27);
      }
      if(__isset.UpdateTime)
      {
        if(0 < tmp28++) { tmp27.Append(", "); }
        tmp27.Append("UpdateTime: ");
        UpdateTime.ToString(tmp27);
      }
      tmp27.Append(')');
      return tmp27.ToString();
    }
  }

}
