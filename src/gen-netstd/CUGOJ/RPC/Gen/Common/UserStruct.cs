/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class UserStruct : TBase
  {
    private long _ID;
    private string _Phone;
    private string _Email;
    private string _Signature;
    private long _Organization_id;
    private string _Nickname;
    private string _Avatar;
    private string _Realname;
    private global::CUGOJ.RPC.Gen.Common.UserTypeEnum _Type;
    private Dictionary<string, string> _Extra;
    private global::CUGOJ.RPC.Gen.Common.UserStatusEnum _Status;
    private long _CreateTime;
    private long _UpdateTime;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Phone
    {
      get
      {
        return _Phone;
      }
      set
      {
        __isset.Phone = true;
        this._Phone = value;
      }
    }

    public string Email
    {
      get
      {
        return _Email;
      }
      set
      {
        __isset.Email = true;
        this._Email = value;
      }
    }

    public string Signature
    {
      get
      {
        return _Signature;
      }
      set
      {
        __isset.Signature = true;
        this._Signature = value;
      }
    }

    public long Organization_id
    {
      get
      {
        return _Organization_id;
      }
      set
      {
        __isset.Organization_id = true;
        this._Organization_id = value;
      }
    }

    public string Nickname
    {
      get
      {
        return _Nickname;
      }
      set
      {
        __isset.Nickname = true;
        this._Nickname = value;
      }
    }

    public string Avatar
    {
      get
      {
        return _Avatar;
      }
      set
      {
        __isset.Avatar = true;
        this._Avatar = value;
      }
    }

    public string Realname
    {
      get
      {
        return _Realname;
      }
      set
      {
        __isset.Realname = true;
        this._Realname = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Common.UserTypeEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Common.UserTypeEnum Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public Dictionary<string, string> Extra
    {
      get
      {
        return _Extra;
      }
      set
      {
        __isset.Extra = true;
        this._Extra = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Common.UserStatusEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Common.UserStatusEnum Status
    {
      get
      {
        return _Status;
      }
      set
      {
        __isset.Status = true;
        this._Status = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _CreateTime;
      }
      set
      {
        __isset.CreateTime = true;
        this._CreateTime = value;
      }
    }

    public long UpdateTime
    {
      get
      {
        return _UpdateTime;
      }
      set
      {
        __isset.UpdateTime = true;
        this._UpdateTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool Phone;
      public bool Email;
      public bool Signature;
      public bool Organization_id;
      public bool Nickname;
      public bool Avatar;
      public bool Realname;
      public bool Type;
      public bool Extra;
      public bool Status;
      public bool CreateTime;
      public bool UpdateTime;
    }

    public UserStruct()
    {
    }

    public UserStruct DeepCopy()
    {
      var tmp0 = new UserStruct();
      if(__isset.ID)
      {
        tmp0.ID = this.ID;
      }
      tmp0.__isset.ID = this.__isset.ID;
      if((Phone != null) && __isset.Phone)
      {
        tmp0.Phone = this.Phone;
      }
      tmp0.__isset.Phone = this.__isset.Phone;
      if((Email != null) && __isset.Email)
      {
        tmp0.Email = this.Email;
      }
      tmp0.__isset.Email = this.__isset.Email;
      if((Signature != null) && __isset.Signature)
      {
        tmp0.Signature = this.Signature;
      }
      tmp0.__isset.Signature = this.__isset.Signature;
      if(__isset.Organization_id)
      {
        tmp0.Organization_id = this.Organization_id;
      }
      tmp0.__isset.Organization_id = this.__isset.Organization_id;
      if((Nickname != null) && __isset.Nickname)
      {
        tmp0.Nickname = this.Nickname;
      }
      tmp0.__isset.Nickname = this.__isset.Nickname;
      if((Avatar != null) && __isset.Avatar)
      {
        tmp0.Avatar = this.Avatar;
      }
      tmp0.__isset.Avatar = this.__isset.Avatar;
      if((Realname != null) && __isset.Realname)
      {
        tmp0.Realname = this.Realname;
      }
      tmp0.__isset.Realname = this.__isset.Realname;
      if(__isset.Type)
      {
        tmp0.Type = this.Type;
      }
      tmp0.__isset.Type = this.__isset.Type;
      if((Extra != null) && __isset.Extra)
      {
        tmp0.Extra = this.Extra.DeepCopy();
      }
      tmp0.__isset.Extra = this.__isset.Extra;
      if(__isset.Status)
      {
        tmp0.Status = this.Status;
      }
      tmp0.__isset.Status = this.__isset.Status;
      if(__isset.CreateTime)
      {
        tmp0.CreateTime = this.CreateTime;
      }
      tmp0.__isset.CreateTime = this.__isset.CreateTime;
      if(__isset.UpdateTime)
      {
        tmp0.UpdateTime = this.UpdateTime;
      }
      tmp0.__isset.UpdateTime = this.__isset.UpdateTime;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Phone = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Email = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Signature = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                Organization_id = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Nickname = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                Avatar = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                Realname = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                Type = (global::CUGOJ.RPC.Gen.Common.UserTypeEnum)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.Map)
              {
                {
                  var _map1 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Extra = new Dictionary<string, string>(_map1.Count);
                  for(int _i2 = 0; _i2 < _map1.Count; ++_i2)
                  {
                    string _key3;
                    string _val4;
                    _key3 = await iprot.ReadStringAsync(cancellationToken);
                    _val4 = await iprot.ReadStringAsync(cancellationToken);
                    Extra[_key3] = _val4;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I32)
              {
                Status = (global::CUGOJ.RPC.Gen.Common.UserStatusEnum)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I64)
              {
                CreateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.I64)
              {
                UpdateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp5 = new TStruct("UserStruct");
        await oprot.WriteStructBeginAsync(tmp5, cancellationToken);
        var tmp6 = new TField();
        if(__isset.ID)
        {
          tmp6.Name = "ID";
          tmp6.Type = TType.I64;
          tmp6.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Phone != null) && __isset.Phone)
        {
          tmp6.Name = "Phone";
          tmp6.Type = TType.String;
          tmp6.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteStringAsync(Phone, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Email != null) && __isset.Email)
        {
          tmp6.Name = "Email";
          tmp6.Type = TType.String;
          tmp6.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteStringAsync(Email, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Signature != null) && __isset.Signature)
        {
          tmp6.Name = "Signature";
          tmp6.Type = TType.String;
          tmp6.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteStringAsync(Signature, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Organization_id)
        {
          tmp6.Name = "Organization_id";
          tmp6.Type = TType.I64;
          tmp6.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteI64Async(Organization_id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Nickname != null) && __isset.Nickname)
        {
          tmp6.Name = "Nickname";
          tmp6.Type = TType.String;
          tmp6.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteStringAsync(Nickname, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Avatar != null) && __isset.Avatar)
        {
          tmp6.Name = "Avatar";
          tmp6.Type = TType.String;
          tmp6.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteStringAsync(Avatar, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Realname != null) && __isset.Realname)
        {
          tmp6.Name = "Realname";
          tmp6.Type = TType.String;
          tmp6.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteStringAsync(Realname, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Type)
        {
          tmp6.Name = "Type";
          tmp6.Type = TType.I32;
          tmp6.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Extra != null) && __isset.Extra)
        {
          tmp6.Name = "Extra";
          tmp6.Type = TType.Map;
          tmp6.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Extra.Count), cancellationToken);
          foreach (string _iter7 in Extra.Keys)
          {
            await oprot.WriteStringAsync(_iter7, cancellationToken);
            await oprot.WriteStringAsync(Extra[_iter7], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Status)
        {
          tmp6.Name = "Status";
          tmp6.Type = TType.I32;
          tmp6.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.CreateTime)
        {
          tmp6.Name = "CreateTime";
          tmp6.Type = TType.I64;
          tmp6.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteI64Async(CreateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.UpdateTime)
        {
          tmp6.Name = "UpdateTime";
          tmp6.Type = TType.I64;
          tmp6.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          await oprot.WriteI64Async(UpdateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.Phone == other.__isset.Phone) && ((!__isset.Phone) || (global::System.Object.Equals(Phone, other.Phone))))
        && ((__isset.Email == other.__isset.Email) && ((!__isset.Email) || (global::System.Object.Equals(Email, other.Email))))
        && ((__isset.Signature == other.__isset.Signature) && ((!__isset.Signature) || (global::System.Object.Equals(Signature, other.Signature))))
        && ((__isset.Organization_id == other.__isset.Organization_id) && ((!__isset.Organization_id) || (global::System.Object.Equals(Organization_id, other.Organization_id))))
        && ((__isset.Nickname == other.__isset.Nickname) && ((!__isset.Nickname) || (global::System.Object.Equals(Nickname, other.Nickname))))
        && ((__isset.Avatar == other.__isset.Avatar) && ((!__isset.Avatar) || (global::System.Object.Equals(Avatar, other.Avatar))))
        && ((__isset.Realname == other.__isset.Realname) && ((!__isset.Realname) || (global::System.Object.Equals(Realname, other.Realname))))
        && ((__isset.Type == other.__isset.Type) && ((!__isset.Type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.Extra == other.__isset.Extra) && ((!__isset.Extra) || (TCollections.Equals(Extra, other.Extra))))
        && ((__isset.Status == other.__isset.Status) && ((!__isset.Status) || (global::System.Object.Equals(Status, other.Status))))
        && ((__isset.CreateTime == other.__isset.CreateTime) && ((!__isset.CreateTime) || (global::System.Object.Equals(CreateTime, other.CreateTime))))
        && ((__isset.UpdateTime == other.__isset.UpdateTime) && ((!__isset.UpdateTime) || (global::System.Object.Equals(UpdateTime, other.UpdateTime))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if((Phone != null) && __isset.Phone)
        {
          hashcode = (hashcode * 397) + Phone.GetHashCode();
        }
        if((Email != null) && __isset.Email)
        {
          hashcode = (hashcode * 397) + Email.GetHashCode();
        }
        if((Signature != null) && __isset.Signature)
        {
          hashcode = (hashcode * 397) + Signature.GetHashCode();
        }
        if(__isset.Organization_id)
        {
          hashcode = (hashcode * 397) + Organization_id.GetHashCode();
        }
        if((Nickname != null) && __isset.Nickname)
        {
          hashcode = (hashcode * 397) + Nickname.GetHashCode();
        }
        if((Avatar != null) && __isset.Avatar)
        {
          hashcode = (hashcode * 397) + Avatar.GetHashCode();
        }
        if((Realname != null) && __isset.Realname)
        {
          hashcode = (hashcode * 397) + Realname.GetHashCode();
        }
        if(__isset.Type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((Extra != null) && __isset.Extra)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Extra);
        }
        if(__isset.Status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if(__isset.CreateTime)
        {
          hashcode = (hashcode * 397) + CreateTime.GetHashCode();
        }
        if(__isset.UpdateTime)
        {
          hashcode = (hashcode * 397) + UpdateTime.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("UserStruct(");
      int tmp9 = 0;
      if(__isset.ID)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("ID: ");
        ID.ToString(tmp8);
      }
      if((Phone != null) && __isset.Phone)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Phone: ");
        Phone.ToString(tmp8);
      }
      if((Email != null) && __isset.Email)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Email: ");
        Email.ToString(tmp8);
      }
      if((Signature != null) && __isset.Signature)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Signature: ");
        Signature.ToString(tmp8);
      }
      if(__isset.Organization_id)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Organization_id: ");
        Organization_id.ToString(tmp8);
      }
      if((Nickname != null) && __isset.Nickname)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Nickname: ");
        Nickname.ToString(tmp8);
      }
      if((Avatar != null) && __isset.Avatar)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Avatar: ");
        Avatar.ToString(tmp8);
      }
      if((Realname != null) && __isset.Realname)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Realname: ");
        Realname.ToString(tmp8);
      }
      if(__isset.Type)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Type: ");
        Type.ToString(tmp8);
      }
      if((Extra != null) && __isset.Extra)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Extra: ");
        Extra.ToString(tmp8);
      }
      if(__isset.Status)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Status: ");
        Status.ToString(tmp8);
      }
      if(__isset.CreateTime)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("CreateTime: ");
        CreateTime.ToString(tmp8);
      }
      if(__isset.UpdateTime)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("UpdateTime: ");
        UpdateTime.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}
