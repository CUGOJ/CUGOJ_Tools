/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class UserLoginInfoStruct : TBase
  {
    private long _ID;
    private string _Username;
    private string _Password;
    private string _Salt;
    private List<string> _AllowIP;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Username
    {
      get
      {
        return _Username;
      }
      set
      {
        __isset.Username = true;
        this._Username = value;
      }
    }

    public string Password
    {
      get
      {
        return _Password;
      }
      set
      {
        __isset.Password = true;
        this._Password = value;
      }
    }

    public string Salt
    {
      get
      {
        return _Salt;
      }
      set
      {
        __isset.Salt = true;
        this._Salt = value;
      }
    }

    public List<string> AllowIP
    {
      get
      {
        return _AllowIP;
      }
      set
      {
        __isset.AllowIP = true;
        this._AllowIP = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool Username;
      public bool Password;
      public bool Salt;
      public bool AllowIP;
    }

    public UserLoginInfoStruct()
    {
    }

    public UserLoginInfoStruct DeepCopy()
    {
      var tmp10 = new UserLoginInfoStruct();
      if(__isset.ID)
      {
        tmp10.ID = this.ID;
      }
      tmp10.__isset.ID = this.__isset.ID;
      if((Username != null) && __isset.Username)
      {
        tmp10.Username = this.Username;
      }
      tmp10.__isset.Username = this.__isset.Username;
      if((Password != null) && __isset.Password)
      {
        tmp10.Password = this.Password;
      }
      tmp10.__isset.Password = this.__isset.Password;
      if((Salt != null) && __isset.Salt)
      {
        tmp10.Salt = this.Salt;
      }
      tmp10.__isset.Salt = this.__isset.Salt;
      if((AllowIP != null) && __isset.AllowIP)
      {
        tmp10.AllowIP = this.AllowIP.DeepCopy();
      }
      tmp10.__isset.AllowIP = this.__isset.AllowIP;
      return tmp10;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Password = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Salt = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  var _list11 = await iprot.ReadListBeginAsync(cancellationToken);
                  AllowIP = new List<string>(_list11.Count);
                  for(int _i12 = 0; _i12 < _list11.Count; ++_i12)
                  {
                    string _elem13;
                    _elem13 = await iprot.ReadStringAsync(cancellationToken);
                    AllowIP.Add(_elem13);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp14 = new TStruct("UserLoginInfoStruct");
        await oprot.WriteStructBeginAsync(tmp14, cancellationToken);
        var tmp15 = new TField();
        if(__isset.ID)
        {
          tmp15.Name = "ID";
          tmp15.Type = TType.I64;
          tmp15.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp15, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Username != null) && __isset.Username)
        {
          tmp15.Name = "Username";
          tmp15.Type = TType.String;
          tmp15.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp15, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Password != null) && __isset.Password)
        {
          tmp15.Name = "Password";
          tmp15.Type = TType.String;
          tmp15.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp15, cancellationToken);
          await oprot.WriteStringAsync(Password, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Salt != null) && __isset.Salt)
        {
          tmp15.Name = "Salt";
          tmp15.Type = TType.String;
          tmp15.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp15, cancellationToken);
          await oprot.WriteStringAsync(Salt, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((AllowIP != null) && __isset.AllowIP)
        {
          tmp15.Name = "AllowIP";
          tmp15.Type = TType.List;
          tmp15.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp15, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, AllowIP.Count), cancellationToken);
          foreach (string _iter16 in AllowIP)
          {
            await oprot.WriteStringAsync(_iter16, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserLoginInfoStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.Username == other.__isset.Username) && ((!__isset.Username) || (global::System.Object.Equals(Username, other.Username))))
        && ((__isset.Password == other.__isset.Password) && ((!__isset.Password) || (global::System.Object.Equals(Password, other.Password))))
        && ((__isset.Salt == other.__isset.Salt) && ((!__isset.Salt) || (global::System.Object.Equals(Salt, other.Salt))))
        && ((__isset.AllowIP == other.__isset.AllowIP) && ((!__isset.AllowIP) || (TCollections.Equals(AllowIP, other.AllowIP))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if((Username != null) && __isset.Username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
        if((Password != null) && __isset.Password)
        {
          hashcode = (hashcode * 397) + Password.GetHashCode();
        }
        if((Salt != null) && __isset.Salt)
        {
          hashcode = (hashcode * 397) + Salt.GetHashCode();
        }
        if((AllowIP != null) && __isset.AllowIP)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(AllowIP);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp17 = new StringBuilder("UserLoginInfoStruct(");
      int tmp18 = 0;
      if(__isset.ID)
      {
        if(0 < tmp18++) { tmp17.Append(", "); }
        tmp17.Append("ID: ");
        ID.ToString(tmp17);
      }
      if((Username != null) && __isset.Username)
      {
        if(0 < tmp18++) { tmp17.Append(", "); }
        tmp17.Append("Username: ");
        Username.ToString(tmp17);
      }
      if((Password != null) && __isset.Password)
      {
        if(0 < tmp18++) { tmp17.Append(", "); }
        tmp17.Append("Password: ");
        Password.ToString(tmp17);
      }
      if((Salt != null) && __isset.Salt)
      {
        if(0 < tmp18++) { tmp17.Append(", "); }
        tmp17.Append("Salt: ");
        Salt.ToString(tmp17);
      }
      if((AllowIP != null) && __isset.AllowIP)
      {
        if(0 < tmp18++) { tmp17.Append(", "); }
        tmp17.Append("AllowIP: ");
        AllowIP.ToString(tmp17);
      }
      tmp17.Append(')');
      return tmp17.ToString();
    }
  }

}
