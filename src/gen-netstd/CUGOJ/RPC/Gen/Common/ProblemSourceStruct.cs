/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class ProblemSourceStruct : TBase
  {
    private long _ID;
    private string _name;
    private string _url;
    private string _Properties;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public string Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool name;
      public bool url;
      public bool Properties;
    }

    public ProblemSourceStruct()
    {
    }

    public ProblemSourceStruct DeepCopy()
    {
      var tmp39 = new ProblemSourceStruct();
      if(__isset.ID)
      {
        tmp39.ID = this.ID;
      }
      tmp39.__isset.ID = this.__isset.ID;
      if((Name != null) && __isset.name)
      {
        tmp39.Name = this.Name;
      }
      tmp39.__isset.name = this.__isset.name;
      if((Url != null) && __isset.url)
      {
        tmp39.Url = this.Url;
      }
      tmp39.__isset.url = this.__isset.url;
      if((Properties != null) && __isset.Properties)
      {
        tmp39.Properties = this.Properties;
      }
      tmp39.__isset.Properties = this.__isset.Properties;
      return tmp39;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Url = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Properties = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp40 = new TStruct("ProblemSourceStruct");
        await oprot.WriteStructBeginAsync(tmp40, cancellationToken);
        var tmp41 = new TField();
        if(__isset.ID)
        {
          tmp41.Name = "ID";
          tmp41.Type = TType.I64;
          tmp41.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp41, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.name)
        {
          tmp41.Name = "name";
          tmp41.Type = TType.String;
          tmp41.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp41, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Url != null) && __isset.url)
        {
          tmp41.Name = "url";
          tmp41.Type = TType.String;
          tmp41.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp41, cancellationToken);
          await oprot.WriteStringAsync(Url, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Properties != null) && __isset.Properties)
        {
          tmp41.Name = "Properties";
          tmp41.Type = TType.String;
          tmp41.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp41, cancellationToken);
          await oprot.WriteStringAsync(Properties, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ProblemSourceStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.url == other.__isset.url) && ((!__isset.url) || (global::System.Object.Equals(Url, other.Url))))
        && ((__isset.Properties == other.__isset.Properties) && ((!__isset.Properties) || (global::System.Object.Equals(Properties, other.Properties))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Url != null) && __isset.url)
        {
          hashcode = (hashcode * 397) + Url.GetHashCode();
        }
        if((Properties != null) && __isset.Properties)
        {
          hashcode = (hashcode * 397) + Properties.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp42 = new StringBuilder("ProblemSourceStruct(");
      int tmp43 = 0;
      if(__isset.ID)
      {
        if(0 < tmp43++) { tmp42.Append(", "); }
        tmp42.Append("ID: ");
        ID.ToString(tmp42);
      }
      if((Name != null) && __isset.name)
      {
        if(0 < tmp43++) { tmp42.Append(", "); }
        tmp42.Append("Name: ");
        Name.ToString(tmp42);
      }
      if((Url != null) && __isset.url)
      {
        if(0 < tmp43++) { tmp42.Append(", "); }
        tmp42.Append("Url: ");
        Url.ToString(tmp42);
      }
      if((Properties != null) && __isset.Properties)
      {
        if(0 < tmp43++) { tmp42.Append(", "); }
        tmp42.Append("Properties: ");
        Properties.ToString(tmp42);
      }
      tmp42.Append(')');
      return tmp42.ToString();
    }
  }

}
