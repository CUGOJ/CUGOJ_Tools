/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.OJCommon
{

  public partial class OJProblemExample : TBase
  {
    private string _Input;
    private string _Output;
    private string _Description;

    public string Input
    {
      get
      {
        return _Input;
      }
      set
      {
        __isset.Input = true;
        this._Input = value;
      }
    }

    public string Output
    {
      get
      {
        return _Output;
      }
      set
      {
        __isset.Output = true;
        this._Output = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Input;
      public bool Output;
      public bool Description;
    }

    public OJProblemExample()
    {
    }

    public OJProblemExample DeepCopy()
    {
      var tmp9 = new OJProblemExample();
      if((Input != null) && __isset.Input)
      {
        tmp9.Input = this.Input;
      }
      tmp9.__isset.Input = this.__isset.Input;
      if((Output != null) && __isset.Output)
      {
        tmp9.Output = this.Output;
      }
      tmp9.__isset.Output = this.__isset.Output;
      if((Description != null) && __isset.Description)
      {
        tmp9.Description = this.Description;
      }
      tmp9.__isset.Description = this.__isset.Description;
      return tmp9;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Input = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Output = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Description = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp10 = new TStruct("OJProblemExample");
        await oprot.WriteStructBeginAsync(tmp10, cancellationToken);
        var tmp11 = new TField();
        if((Input != null) && __isset.Input)
        {
          tmp11.Name = "Input";
          tmp11.Type = TType.String;
          tmp11.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp11, cancellationToken);
          await oprot.WriteStringAsync(Input, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Output != null) && __isset.Output)
        {
          tmp11.Name = "Output";
          tmp11.Type = TType.String;
          tmp11.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp11, cancellationToken);
          await oprot.WriteStringAsync(Output, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Description != null) && __isset.Description)
        {
          tmp11.Name = "Description";
          tmp11.Type = TType.String;
          tmp11.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp11, cancellationToken);
          await oprot.WriteStringAsync(Description, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is OJProblemExample other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Input == other.__isset.Input) && ((!__isset.Input) || (global::System.Object.Equals(Input, other.Input))))
        && ((__isset.Output == other.__isset.Output) && ((!__isset.Output) || (global::System.Object.Equals(Output, other.Output))))
        && ((__isset.Description == other.__isset.Description) && ((!__isset.Description) || (global::System.Object.Equals(Description, other.Description))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Input != null) && __isset.Input)
        {
          hashcode = (hashcode * 397) + Input.GetHashCode();
        }
        if((Output != null) && __isset.Output)
        {
          hashcode = (hashcode * 397) + Output.GetHashCode();
        }
        if((Description != null) && __isset.Description)
        {
          hashcode = (hashcode * 397) + Description.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp12 = new StringBuilder("OJProblemExample(");
      int tmp13 = 0;
      if((Input != null) && __isset.Input)
      {
        if(0 < tmp13++) { tmp12.Append(", "); }
        tmp12.Append("Input: ");
        Input.ToString(tmp12);
      }
      if((Output != null) && __isset.Output)
      {
        if(0 < tmp13++) { tmp12.Append(", "); }
        tmp12.Append("Output: ");
        Output.ToString(tmp12);
      }
      if((Description != null) && __isset.Description)
      {
        if(0 < tmp13++) { tmp12.Append(", "); }
        tmp12.Append("Description: ");
        Description.ToString(tmp12);
      }
      tmp12.Append(')');
      return tmp12.ToString();
    }
  }

}
