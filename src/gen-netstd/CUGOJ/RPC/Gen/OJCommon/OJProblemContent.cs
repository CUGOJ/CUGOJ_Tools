/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.OJCommon
{

  public partial class OJProblemContent : TBase
  {
    private bool _IsMarkdown;
    private string _Content;
    private string _Background;
    private string _Description;
    private string _InputFormat;
    private string _OutputFormat;
    private List<global::CUGOJ.RPC.Gen.OJCommon.OJProblemExample> _Examples;
    private string _Note;

    public bool IsMarkdown
    {
      get
      {
        return _IsMarkdown;
      }
      set
      {
        __isset.IsMarkdown = true;
        this._IsMarkdown = value;
      }
    }

    public string Content
    {
      get
      {
        return _Content;
      }
      set
      {
        __isset.Content = true;
        this._Content = value;
      }
    }

    public string Background
    {
      get
      {
        return _Background;
      }
      set
      {
        __isset.Background = true;
        this._Background = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public string InputFormat
    {
      get
      {
        return _InputFormat;
      }
      set
      {
        __isset.InputFormat = true;
        this._InputFormat = value;
      }
    }

    public string OutputFormat
    {
      get
      {
        return _OutputFormat;
      }
      set
      {
        __isset.OutputFormat = true;
        this._OutputFormat = value;
      }
    }

    public List<global::CUGOJ.RPC.Gen.OJCommon.OJProblemExample> Examples
    {
      get
      {
        return _Examples;
      }
      set
      {
        __isset.Examples = true;
        this._Examples = value;
      }
    }

    public string Note
    {
      get
      {
        return _Note;
      }
      set
      {
        __isset.Note = true;
        this._Note = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool IsMarkdown;
      public bool Content;
      public bool Background;
      public bool Description;
      public bool InputFormat;
      public bool OutputFormat;
      public bool Examples;
      public bool Note;
    }

    public OJProblemContent()
    {
    }

    public OJProblemContent DeepCopy()
    {
      var tmp14 = new OJProblemContent();
      if(__isset.IsMarkdown)
      {
        tmp14.IsMarkdown = this.IsMarkdown;
      }
      tmp14.__isset.IsMarkdown = this.__isset.IsMarkdown;
      if((Content != null) && __isset.Content)
      {
        tmp14.Content = this.Content;
      }
      tmp14.__isset.Content = this.__isset.Content;
      if((Background != null) && __isset.Background)
      {
        tmp14.Background = this.Background;
      }
      tmp14.__isset.Background = this.__isset.Background;
      if((Description != null) && __isset.Description)
      {
        tmp14.Description = this.Description;
      }
      tmp14.__isset.Description = this.__isset.Description;
      if((InputFormat != null) && __isset.InputFormat)
      {
        tmp14.InputFormat = this.InputFormat;
      }
      tmp14.__isset.InputFormat = this.__isset.InputFormat;
      if((OutputFormat != null) && __isset.OutputFormat)
      {
        tmp14.OutputFormat = this.OutputFormat;
      }
      tmp14.__isset.OutputFormat = this.__isset.OutputFormat;
      if((Examples != null) && __isset.Examples)
      {
        tmp14.Examples = this.Examples.DeepCopy();
      }
      tmp14.__isset.Examples = this.__isset.Examples;
      if((Note != null) && __isset.Note)
      {
        tmp14.Note = this.Note;
      }
      tmp14.__isset.Note = this.__isset.Note;
      return tmp14;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool)
              {
                IsMarkdown = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Background = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Description = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                InputFormat = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                OutputFormat = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  var _list15 = await iprot.ReadListBeginAsync(cancellationToken);
                  Examples = new List<global::CUGOJ.RPC.Gen.OJCommon.OJProblemExample>(_list15.Count);
                  for(int _i16 = 0; _i16 < _list15.Count; ++_i16)
                  {
                    global::CUGOJ.RPC.Gen.OJCommon.OJProblemExample _elem17;
                    _elem17 = new global::CUGOJ.RPC.Gen.OJCommon.OJProblemExample();
                    await _elem17.ReadAsync(iprot, cancellationToken);
                    Examples.Add(_elem17);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.String)
              {
                Note = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp18 = new TStruct("OJProblemContent");
        await oprot.WriteStructBeginAsync(tmp18, cancellationToken);
        var tmp19 = new TField();
        if(__isset.IsMarkdown)
        {
          tmp19.Name = "IsMarkdown";
          tmp19.Type = TType.Bool;
          tmp19.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteBoolAsync(IsMarkdown, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Content != null) && __isset.Content)
        {
          tmp19.Name = "Content";
          tmp19.Type = TType.String;
          tmp19.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteStringAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Background != null) && __isset.Background)
        {
          tmp19.Name = "Background";
          tmp19.Type = TType.String;
          tmp19.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteStringAsync(Background, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Description != null) && __isset.Description)
        {
          tmp19.Name = "Description";
          tmp19.Type = TType.String;
          tmp19.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteStringAsync(Description, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((InputFormat != null) && __isset.InputFormat)
        {
          tmp19.Name = "InputFormat";
          tmp19.Type = TType.String;
          tmp19.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteStringAsync(InputFormat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((OutputFormat != null) && __isset.OutputFormat)
        {
          tmp19.Name = "OutputFormat";
          tmp19.Type = TType.String;
          tmp19.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteStringAsync(OutputFormat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Examples != null) && __isset.Examples)
        {
          tmp19.Name = "Examples";
          tmp19.Type = TType.List;
          tmp19.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Examples.Count), cancellationToken);
          foreach (global::CUGOJ.RPC.Gen.OJCommon.OJProblemExample _iter20 in Examples)
          {
            await _iter20.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Note != null) && __isset.Note)
        {
          tmp19.Name = "Note";
          tmp19.Type = TType.String;
          tmp19.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
          await oprot.WriteStringAsync(Note, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is OJProblemContent other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.IsMarkdown == other.__isset.IsMarkdown) && ((!__isset.IsMarkdown) || (global::System.Object.Equals(IsMarkdown, other.IsMarkdown))))
        && ((__isset.Content == other.__isset.Content) && ((!__isset.Content) || (global::System.Object.Equals(Content, other.Content))))
        && ((__isset.Background == other.__isset.Background) && ((!__isset.Background) || (global::System.Object.Equals(Background, other.Background))))
        && ((__isset.Description == other.__isset.Description) && ((!__isset.Description) || (global::System.Object.Equals(Description, other.Description))))
        && ((__isset.InputFormat == other.__isset.InputFormat) && ((!__isset.InputFormat) || (global::System.Object.Equals(InputFormat, other.InputFormat))))
        && ((__isset.OutputFormat == other.__isset.OutputFormat) && ((!__isset.OutputFormat) || (global::System.Object.Equals(OutputFormat, other.OutputFormat))))
        && ((__isset.Examples == other.__isset.Examples) && ((!__isset.Examples) || (TCollections.Equals(Examples, other.Examples))))
        && ((__isset.Note == other.__isset.Note) && ((!__isset.Note) || (global::System.Object.Equals(Note, other.Note))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.IsMarkdown)
        {
          hashcode = (hashcode * 397) + IsMarkdown.GetHashCode();
        }
        if((Content != null) && __isset.Content)
        {
          hashcode = (hashcode * 397) + Content.GetHashCode();
        }
        if((Background != null) && __isset.Background)
        {
          hashcode = (hashcode * 397) + Background.GetHashCode();
        }
        if((Description != null) && __isset.Description)
        {
          hashcode = (hashcode * 397) + Description.GetHashCode();
        }
        if((InputFormat != null) && __isset.InputFormat)
        {
          hashcode = (hashcode * 397) + InputFormat.GetHashCode();
        }
        if((OutputFormat != null) && __isset.OutputFormat)
        {
          hashcode = (hashcode * 397) + OutputFormat.GetHashCode();
        }
        if((Examples != null) && __isset.Examples)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Examples);
        }
        if((Note != null) && __isset.Note)
        {
          hashcode = (hashcode * 397) + Note.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp21 = new StringBuilder("OJProblemContent(");
      int tmp22 = 0;
      if(__isset.IsMarkdown)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("IsMarkdown: ");
        IsMarkdown.ToString(tmp21);
      }
      if((Content != null) && __isset.Content)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Content: ");
        Content.ToString(tmp21);
      }
      if((Background != null) && __isset.Background)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Background: ");
        Background.ToString(tmp21);
      }
      if((Description != null) && __isset.Description)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Description: ");
        Description.ToString(tmp21);
      }
      if((InputFormat != null) && __isset.InputFormat)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("InputFormat: ");
        InputFormat.ToString(tmp21);
      }
      if((OutputFormat != null) && __isset.OutputFormat)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("OutputFormat: ");
        OutputFormat.ToString(tmp21);
      }
      if((Examples != null) && __isset.Examples)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Examples: ");
        Examples.ToString(tmp21);
      }
      if((Note != null) && __isset.Note)
      {
        if(0 < tmp22++) { tmp21.Append(", "); }
        tmp21.Append("Note: ");
        Note.ToString(tmp21);
      }
      tmp21.Append(')');
      return tmp21.ToString();
    }
  }

}
