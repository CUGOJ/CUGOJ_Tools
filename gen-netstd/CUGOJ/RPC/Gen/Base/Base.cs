/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Base
{

  public partial class @Base : TBase
  {
    private Dictionary<string, string> _Extra;

    public Dictionary<string, string> Extra
    {
      get
      {
        return _Extra;
      }
      set
      {
        __isset.Extra = true;
        this._Extra = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Extra;
    }

    public @Base()
    {
    }

    public @Base DeepCopy()
    {
      var tmp0 = new @Base();
      if((Extra != null) && __isset.Extra)
      {
        tmp0.Extra = this.Extra.DeepCopy();
      }
      tmp0.__isset.Extra = this.__isset.Extra;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map1 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Extra = new Dictionary<string, string>(_map1.Count);
                  for(int _i2 = 0; _i2 < _map1.Count; ++_i2)
                  {
                    string _key3;
                    string _val4;
                    _key3 = await iprot.ReadStringAsync(cancellationToken);
                    _val4 = await iprot.ReadStringAsync(cancellationToken);
                    Extra[_key3] = _val4;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp5 = new TStruct("Base");
        await oprot.WriteStructBeginAsync(tmp5, cancellationToken);
        var tmp6 = new TField();
        if((Extra != null) && __isset.Extra)
        {
          tmp6.Name = "Extra";
          tmp6.Type = TType.Map;
          tmp6.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp6, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Extra.Count), cancellationToken);
            foreach (string _iter7 in Extra.Keys)
            {
              await oprot.WriteStringAsync(_iter7, cancellationToken);
              await oprot.WriteStringAsync(Extra[_iter7], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is @Base other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Extra == other.__isset.Extra) && ((!__isset.Extra) || (TCollections.Equals(Extra, other.Extra))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Extra != null) && __isset.Extra)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Extra);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("Base(");
      int tmp9 = 0;
      if((Extra != null) && __isset.Extra)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Extra: ");
        Extra.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}
