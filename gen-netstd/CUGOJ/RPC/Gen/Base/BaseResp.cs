/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Base
{

  public partial class BaseResp : TBase
  {
    private Dictionary<string, string> _Extra;

    public int Status { get; set; }

    public Dictionary<string, string> Extra
    {
      get
      {
        return _Extra;
      }
      set
      {
        __isset.Extra = true;
        this._Extra = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool Extra;
    }

    public BaseResp()
    {
    }

    public BaseResp(int Status) : this()
    {
      this.Status = Status;
    }

    public BaseResp DeepCopy()
    {
      var tmp10 = new BaseResp();
      tmp10.Status = this.Status;
      if((Extra != null) && __isset.Extra)
      {
        tmp10.Extra = this.Extra.DeepCopy();
      }
      tmp10.__isset.Extra = this.__isset.Extra;
      return tmp10;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_Status = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Status = await iprot.ReadI32Async(cancellationToken);
                isset_Status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map11 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Extra = new Dictionary<string, string>(_map11.Count);
                  for(int _i12 = 0; _i12 < _map11.Count; ++_i12)
                  {
                    string _key13;
                    string _val14;
                    _key13 = await iprot.ReadStringAsync(cancellationToken);
                    _val14 = await iprot.ReadStringAsync(cancellationToken);
                    Extra[_key13] = _val14;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_Status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp15 = new TStruct("BaseResp");
        await oprot.WriteStructBeginAsync(tmp15, cancellationToken);
        var tmp16 = new TField();
        tmp16.Name = "Status";
        tmp16.Type = TType.I32;
        tmp16.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp16, cancellationToken);
        await oprot.WriteI32Async(Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Extra != null) && __isset.Extra)
        {
          tmp16.Name = "Extra";
          tmp16.Type = TType.Map;
          tmp16.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp16, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Extra.Count), cancellationToken);
            foreach (string _iter17 in Extra.Keys)
            {
              await oprot.WriteStringAsync(_iter17, cancellationToken);
              await oprot.WriteStringAsync(Extra[_iter17], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is BaseResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Status, other.Status)
        && ((__isset.Extra == other.__isset.Extra) && ((!__isset.Extra) || (TCollections.Equals(Extra, other.Extra))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Status.GetHashCode();
        if((Extra != null) && __isset.Extra)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Extra);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp18 = new StringBuilder("BaseResp(");
      tmp18.Append(", Status: ");
      Status.ToString(tmp18);
      if((Extra != null) && __isset.Extra)
      {
        tmp18.Append(", Extra: ");
        Extra.ToString(tmp18);
      }
      tmp18.Append(')');
      return tmp18.ToString();
    }
  }

}
