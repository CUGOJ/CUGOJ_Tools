/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class SubmissionStruct : TBase
  {
    private long _ID;
    private global::CUGOJ.RPC.Gen.Common.UserStruct _User;
    private global::CUGOJ.RPC.Gen.Common.TeamStruct _Team;
    private global::CUGOJ.RPC.Gen.Common.ProblemStruct _Problem;
    private global::CUGOJ.RPC.Gen.Common.ContestStruct _Contest;
    private long _SubmitTime;
    private int _Status;
    private int _Type;
    private string _Properties;
    private string _Content;
    private long _CreateTime;
    private long _UpdateTime;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.UserStruct User
    {
      get
      {
        return _User;
      }
      set
      {
        __isset.User = true;
        this._User = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.TeamStruct Team
    {
      get
      {
        return _Team;
      }
      set
      {
        __isset.Team = true;
        this._Team = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.ProblemStruct Problem
    {
      get
      {
        return _Problem;
      }
      set
      {
        __isset.Problem = true;
        this._Problem = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.ContestStruct Contest
    {
      get
      {
        return _Contest;
      }
      set
      {
        __isset.Contest = true;
        this._Contest = value;
      }
    }

    public long SubmitTime
    {
      get
      {
        return _SubmitTime;
      }
      set
      {
        __isset.SubmitTime = true;
        this._SubmitTime = value;
      }
    }

    public int Status
    {
      get
      {
        return _Status;
      }
      set
      {
        __isset.Status = true;
        this._Status = value;
      }
    }

    public int Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public string Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }

    public string Content
    {
      get
      {
        return _Content;
      }
      set
      {
        __isset.Content = true;
        this._Content = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _CreateTime;
      }
      set
      {
        __isset.CreateTime = true;
        this._CreateTime = value;
      }
    }

    public long UpdateTime
    {
      get
      {
        return _UpdateTime;
      }
      set
      {
        __isset.UpdateTime = true;
        this._UpdateTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool User;
      public bool Team;
      public bool Problem;
      public bool Contest;
      public bool SubmitTime;
      public bool Status;
      public bool Type;
      public bool Properties;
      public bool Content;
      public bool CreateTime;
      public bool UpdateTime;
    }

    public SubmissionStruct()
    {
    }

    public SubmissionStruct DeepCopy()
    {
      var tmp69 = new SubmissionStruct();
      if(__isset.ID)
      {
        tmp69.ID = this.ID;
      }
      tmp69.__isset.ID = this.__isset.ID;
      if((User != null) && __isset.User)
      {
        tmp69.User = (global::CUGOJ.RPC.Gen.Common.UserStruct)this.User.DeepCopy();
      }
      tmp69.__isset.User = this.__isset.User;
      if((Team != null) && __isset.Team)
      {
        tmp69.Team = (global::CUGOJ.RPC.Gen.Common.TeamStruct)this.Team.DeepCopy();
      }
      tmp69.__isset.Team = this.__isset.Team;
      if((Problem != null) && __isset.Problem)
      {
        tmp69.Problem = (global::CUGOJ.RPC.Gen.Common.ProblemStruct)this.Problem.DeepCopy();
      }
      tmp69.__isset.Problem = this.__isset.Problem;
      if((Contest != null) && __isset.Contest)
      {
        tmp69.Contest = (global::CUGOJ.RPC.Gen.Common.ContestStruct)this.Contest.DeepCopy();
      }
      tmp69.__isset.Contest = this.__isset.Contest;
      if(__isset.SubmitTime)
      {
        tmp69.SubmitTime = this.SubmitTime;
      }
      tmp69.__isset.SubmitTime = this.__isset.SubmitTime;
      if(__isset.Status)
      {
        tmp69.Status = this.Status;
      }
      tmp69.__isset.Status = this.__isset.Status;
      if(__isset.Type)
      {
        tmp69.Type = this.Type;
      }
      tmp69.__isset.Type = this.__isset.Type;
      if((Properties != null) && __isset.Properties)
      {
        tmp69.Properties = this.Properties;
      }
      tmp69.__isset.Properties = this.__isset.Properties;
      if((Content != null) && __isset.Content)
      {
        tmp69.Content = this.Content;
      }
      tmp69.__isset.Content = this.__isset.Content;
      if(__isset.CreateTime)
      {
        tmp69.CreateTime = this.CreateTime;
      }
      tmp69.__isset.CreateTime = this.__isset.CreateTime;
      if(__isset.UpdateTime)
      {
        tmp69.UpdateTime = this.UpdateTime;
      }
      tmp69.__isset.UpdateTime = this.__isset.UpdateTime;
      return tmp69;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                User = new global::CUGOJ.RPC.Gen.Common.UserStruct();
                await User.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Team = new global::CUGOJ.RPC.Gen.Common.TeamStruct();
                await Team.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Problem = new global::CUGOJ.RPC.Gen.Common.ProblemStruct();
                await Problem.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Contest = new global::CUGOJ.RPC.Gen.Common.ContestStruct();
                await Contest.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                SubmitTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Status = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I32)
              {
                Type = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.String)
              {
                Properties = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I64)
              {
                CreateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.I64)
              {
                UpdateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp70 = new TStruct("SubmissionStruct");
        await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
        var tmp71 = new TField();
        if(__isset.ID)
        {
          tmp71.Name = "ID";
          tmp71.Type = TType.I64;
          tmp71.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((User != null) && __isset.User)
        {
          tmp71.Name = "User";
          tmp71.Type = TType.Struct;
          tmp71.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await User.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Team != null) && __isset.Team)
        {
          tmp71.Name = "Team";
          tmp71.Type = TType.Struct;
          tmp71.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await Team.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Problem != null) && __isset.Problem)
        {
          tmp71.Name = "Problem";
          tmp71.Type = TType.Struct;
          tmp71.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await Problem.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Contest != null) && __isset.Contest)
        {
          tmp71.Name = "Contest";
          tmp71.Type = TType.Struct;
          tmp71.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await Contest.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.SubmitTime)
        {
          tmp71.Name = "SubmitTime";
          tmp71.Type = TType.I64;
          tmp71.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteI64Async(SubmitTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Status)
        {
          tmp71.Name = "Status";
          tmp71.Type = TType.I32;
          tmp71.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteI32Async(Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Type)
        {
          tmp71.Name = "Type";
          tmp71.Type = TType.I32;
          tmp71.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteI32Async(Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Properties != null) && __isset.Properties)
        {
          tmp71.Name = "Properties";
          tmp71.Type = TType.String;
          tmp71.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteStringAsync(Properties, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Content != null) && __isset.Content)
        {
          tmp71.Name = "Content";
          tmp71.Type = TType.String;
          tmp71.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteStringAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.CreateTime)
        {
          tmp71.Name = "CreateTime";
          tmp71.Type = TType.I64;
          tmp71.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteI64Async(CreateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.UpdateTime)
        {
          tmp71.Name = "UpdateTime";
          tmp71.Type = TType.I64;
          tmp71.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteI64Async(UpdateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is SubmissionStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.User == other.__isset.User) && ((!__isset.User) || (global::System.Object.Equals(User, other.User))))
        && ((__isset.Team == other.__isset.Team) && ((!__isset.Team) || (global::System.Object.Equals(Team, other.Team))))
        && ((__isset.Problem == other.__isset.Problem) && ((!__isset.Problem) || (global::System.Object.Equals(Problem, other.Problem))))
        && ((__isset.Contest == other.__isset.Contest) && ((!__isset.Contest) || (global::System.Object.Equals(Contest, other.Contest))))
        && ((__isset.SubmitTime == other.__isset.SubmitTime) && ((!__isset.SubmitTime) || (global::System.Object.Equals(SubmitTime, other.SubmitTime))))
        && ((__isset.Status == other.__isset.Status) && ((!__isset.Status) || (global::System.Object.Equals(Status, other.Status))))
        && ((__isset.Type == other.__isset.Type) && ((!__isset.Type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.Properties == other.__isset.Properties) && ((!__isset.Properties) || (global::System.Object.Equals(Properties, other.Properties))))
        && ((__isset.Content == other.__isset.Content) && ((!__isset.Content) || (global::System.Object.Equals(Content, other.Content))))
        && ((__isset.CreateTime == other.__isset.CreateTime) && ((!__isset.CreateTime) || (global::System.Object.Equals(CreateTime, other.CreateTime))))
        && ((__isset.UpdateTime == other.__isset.UpdateTime) && ((!__isset.UpdateTime) || (global::System.Object.Equals(UpdateTime, other.UpdateTime))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if((User != null) && __isset.User)
        {
          hashcode = (hashcode * 397) + User.GetHashCode();
        }
        if((Team != null) && __isset.Team)
        {
          hashcode = (hashcode * 397) + Team.GetHashCode();
        }
        if((Problem != null) && __isset.Problem)
        {
          hashcode = (hashcode * 397) + Problem.GetHashCode();
        }
        if((Contest != null) && __isset.Contest)
        {
          hashcode = (hashcode * 397) + Contest.GetHashCode();
        }
        if(__isset.SubmitTime)
        {
          hashcode = (hashcode * 397) + SubmitTime.GetHashCode();
        }
        if(__isset.Status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if(__isset.Type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((Properties != null) && __isset.Properties)
        {
          hashcode = (hashcode * 397) + Properties.GetHashCode();
        }
        if((Content != null) && __isset.Content)
        {
          hashcode = (hashcode * 397) + Content.GetHashCode();
        }
        if(__isset.CreateTime)
        {
          hashcode = (hashcode * 397) + CreateTime.GetHashCode();
        }
        if(__isset.UpdateTime)
        {
          hashcode = (hashcode * 397) + UpdateTime.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp72 = new StringBuilder("SubmissionStruct(");
      int tmp73 = 0;
      if(__isset.ID)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("ID: ");
        ID.ToString(tmp72);
      }
      if((User != null) && __isset.User)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("User: ");
        User.ToString(tmp72);
      }
      if((Team != null) && __isset.Team)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("Team: ");
        Team.ToString(tmp72);
      }
      if((Problem != null) && __isset.Problem)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("Problem: ");
        Problem.ToString(tmp72);
      }
      if((Contest != null) && __isset.Contest)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("Contest: ");
        Contest.ToString(tmp72);
      }
      if(__isset.SubmitTime)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("SubmitTime: ");
        SubmitTime.ToString(tmp72);
      }
      if(__isset.Status)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("Status: ");
        Status.ToString(tmp72);
      }
      if(__isset.Type)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("Type: ");
        Type.ToString(tmp72);
      }
      if((Properties != null) && __isset.Properties)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("Properties: ");
        Properties.ToString(tmp72);
      }
      if((Content != null) && __isset.Content)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("Content: ");
        Content.ToString(tmp72);
      }
      if(__isset.CreateTime)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("CreateTime: ");
        CreateTime.ToString(tmp72);
      }
      if(__isset.UpdateTime)
      {
        if(0 < tmp73++) { tmp72.Append(", "); }
        tmp72.Append("UpdateTime: ");
        UpdateTime.ToString(tmp72);
      }
      tmp72.Append(')');
      return tmp72.ToString();
    }
  }

}
