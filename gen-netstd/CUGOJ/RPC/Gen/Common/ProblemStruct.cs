/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class ProblemStruct : TBase
  {
    private long _ID;
    private string _Title;
    private string _Properties;
    private global::CUGOJ.RPC.Gen.Common.UserStruct _Writer;
    private string _ShowID;
    private global::CUGOJ.RPC.Gen.Common.ProblemSourceStruct _Source;
    private long _SubmissionCount;
    private long _AcceptedCount;
    private long _Version;
    private global::CUGOJ.RPC.Gen.Common.ProblemTypeEnum _Type;
    private global::CUGOJ.RPC.Gen.Common.ProblemStatusEnum _Status;
    private string _Content;
    private long _CreateTime;
    private long _UpdateTime;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public string Title
    {
      get
      {
        return _Title;
      }
      set
      {
        __isset.Title = true;
        this._Title = value;
      }
    }

    public string Properties
    {
      get
      {
        return _Properties;
      }
      set
      {
        __isset.Properties = true;
        this._Properties = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.UserStruct Writer
    {
      get
      {
        return _Writer;
      }
      set
      {
        __isset.Writer = true;
        this._Writer = value;
      }
    }

    public string ShowID
    {
      get
      {
        return _ShowID;
      }
      set
      {
        __isset.ShowID = true;
        this._ShowID = value;
      }
    }

    public global::CUGOJ.RPC.Gen.Common.ProblemSourceStruct Source
    {
      get
      {
        return _Source;
      }
      set
      {
        __isset.Source = true;
        this._Source = value;
      }
    }

    public long SubmissionCount
    {
      get
      {
        return _SubmissionCount;
      }
      set
      {
        __isset.SubmissionCount = true;
        this._SubmissionCount = value;
      }
    }

    public long AcceptedCount
    {
      get
      {
        return _AcceptedCount;
      }
      set
      {
        __isset.AcceptedCount = true;
        this._AcceptedCount = value;
      }
    }

    public long Version
    {
      get
      {
        return _Version;
      }
      set
      {
        __isset.Version = true;
        this._Version = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Common.ProblemTypeEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Common.ProblemTypeEnum Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Common.ProblemStatusEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Common.ProblemStatusEnum Status
    {
      get
      {
        return _Status;
      }
      set
      {
        __isset.Status = true;
        this._Status = value;
      }
    }

    public string Content
    {
      get
      {
        return _Content;
      }
      set
      {
        __isset.Content = true;
        this._Content = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _CreateTime;
      }
      set
      {
        __isset.CreateTime = true;
        this._CreateTime = value;
      }
    }

    public long UpdateTime
    {
      get
      {
        return _UpdateTime;
      }
      set
      {
        __isset.UpdateTime = true;
        this._UpdateTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool Title;
      public bool Properties;
      public bool Writer;
      public bool ShowID;
      public bool Source;
      public bool SubmissionCount;
      public bool AcceptedCount;
      public bool Version;
      public bool Type;
      public bool Status;
      public bool Content;
      public bool CreateTime;
      public bool UpdateTime;
    }

    public ProblemStruct()
    {
    }

    public ProblemStruct DeepCopy()
    {
      var tmp44 = new ProblemStruct();
      if(__isset.ID)
      {
        tmp44.ID = this.ID;
      }
      tmp44.__isset.ID = this.__isset.ID;
      if((Title != null) && __isset.Title)
      {
        tmp44.Title = this.Title;
      }
      tmp44.__isset.Title = this.__isset.Title;
      if((Properties != null) && __isset.Properties)
      {
        tmp44.Properties = this.Properties;
      }
      tmp44.__isset.Properties = this.__isset.Properties;
      if((Writer != null) && __isset.Writer)
      {
        tmp44.Writer = (global::CUGOJ.RPC.Gen.Common.UserStruct)this.Writer.DeepCopy();
      }
      tmp44.__isset.Writer = this.__isset.Writer;
      if((ShowID != null) && __isset.ShowID)
      {
        tmp44.ShowID = this.ShowID;
      }
      tmp44.__isset.ShowID = this.__isset.ShowID;
      if((Source != null) && __isset.Source)
      {
        tmp44.Source = (global::CUGOJ.RPC.Gen.Common.ProblemSourceStruct)this.Source.DeepCopy();
      }
      tmp44.__isset.Source = this.__isset.Source;
      if(__isset.SubmissionCount)
      {
        tmp44.SubmissionCount = this.SubmissionCount;
      }
      tmp44.__isset.SubmissionCount = this.__isset.SubmissionCount;
      if(__isset.AcceptedCount)
      {
        tmp44.AcceptedCount = this.AcceptedCount;
      }
      tmp44.__isset.AcceptedCount = this.__isset.AcceptedCount;
      if(__isset.Version)
      {
        tmp44.Version = this.Version;
      }
      tmp44.__isset.Version = this.__isset.Version;
      if(__isset.Type)
      {
        tmp44.Type = this.Type;
      }
      tmp44.__isset.Type = this.__isset.Type;
      if(__isset.Status)
      {
        tmp44.Status = this.Status;
      }
      tmp44.__isset.Status = this.__isset.Status;
      if((Content != null) && __isset.Content)
      {
        tmp44.Content = this.Content;
      }
      tmp44.__isset.Content = this.__isset.Content;
      if(__isset.CreateTime)
      {
        tmp44.CreateTime = this.CreateTime;
      }
      tmp44.__isset.CreateTime = this.__isset.CreateTime;
      if(__isset.UpdateTime)
      {
        tmp44.UpdateTime = this.UpdateTime;
      }
      tmp44.__isset.UpdateTime = this.__isset.UpdateTime;
      return tmp44;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Title = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Properties = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Writer = new global::CUGOJ.RPC.Gen.Common.UserStruct();
                await Writer.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ShowID = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Source = new global::CUGOJ.RPC.Gen.Common.ProblemSourceStruct();
                await Source.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                SubmissionCount = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.I64)
              {
                AcceptedCount = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I64)
              {
                Version = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 10:
              if (field.Type == TType.I32)
              {
                Type = (global::CUGOJ.RPC.Gen.Common.ProblemTypeEnum)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I32)
              {
                Status = (global::CUGOJ.RPC.Gen.Common.ProblemStatusEnum)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 12:
              if (field.Type == TType.String)
              {
                Content = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 13:
              if (field.Type == TType.I64)
              {
                CreateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 14:
              if (field.Type == TType.I64)
              {
                UpdateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp45 = new TStruct("ProblemStruct");
        await oprot.WriteStructBeginAsync(tmp45, cancellationToken);
        var tmp46 = new TField();
        if(__isset.ID)
        {
          tmp46.Name = "ID";
          tmp46.Type = TType.I64;
          tmp46.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Title != null) && __isset.Title)
        {
          tmp46.Name = "Title";
          tmp46.Type = TType.String;
          tmp46.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(Title, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Properties != null) && __isset.Properties)
        {
          tmp46.Name = "Properties";
          tmp46.Type = TType.String;
          tmp46.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(Properties, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Writer != null) && __isset.Writer)
        {
          tmp46.Name = "Writer";
          tmp46.Type = TType.Struct;
          tmp46.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await Writer.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ShowID != null) && __isset.ShowID)
        {
          tmp46.Name = "ShowID";
          tmp46.Type = TType.String;
          tmp46.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(ShowID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Source != null) && __isset.Source)
        {
          tmp46.Name = "Source";
          tmp46.Type = TType.Struct;
          tmp46.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await Source.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.SubmissionCount)
        {
          tmp46.Name = "SubmissionCount";
          tmp46.Type = TType.I64;
          tmp46.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI64Async(SubmissionCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.AcceptedCount)
        {
          tmp46.Name = "AcceptedCount";
          tmp46.Type = TType.I64;
          tmp46.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI64Async(AcceptedCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Version)
        {
          tmp46.Name = "Version";
          tmp46.Type = TType.I64;
          tmp46.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI64Async(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Type)
        {
          tmp46.Name = "Type";
          tmp46.Type = TType.I32;
          tmp46.ID = 10;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI32Async((int)Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Status)
        {
          tmp46.Name = "Status";
          tmp46.Type = TType.I32;
          tmp46.ID = 11;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI32Async((int)Status, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Content != null) && __isset.Content)
        {
          tmp46.Name = "Content";
          tmp46.Type = TType.String;
          tmp46.ID = 12;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(Content, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.CreateTime)
        {
          tmp46.Name = "CreateTime";
          tmp46.Type = TType.I64;
          tmp46.ID = 13;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI64Async(CreateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.UpdateTime)
        {
          tmp46.Name = "UpdateTime";
          tmp46.Type = TType.I64;
          tmp46.ID = 14;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI64Async(UpdateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ProblemStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.Title == other.__isset.Title) && ((!__isset.Title) || (global::System.Object.Equals(Title, other.Title))))
        && ((__isset.Properties == other.__isset.Properties) && ((!__isset.Properties) || (global::System.Object.Equals(Properties, other.Properties))))
        && ((__isset.Writer == other.__isset.Writer) && ((!__isset.Writer) || (global::System.Object.Equals(Writer, other.Writer))))
        && ((__isset.ShowID == other.__isset.ShowID) && ((!__isset.ShowID) || (global::System.Object.Equals(ShowID, other.ShowID))))
        && ((__isset.Source == other.__isset.Source) && ((!__isset.Source) || (global::System.Object.Equals(Source, other.Source))))
        && ((__isset.SubmissionCount == other.__isset.SubmissionCount) && ((!__isset.SubmissionCount) || (global::System.Object.Equals(SubmissionCount, other.SubmissionCount))))
        && ((__isset.AcceptedCount == other.__isset.AcceptedCount) && ((!__isset.AcceptedCount) || (global::System.Object.Equals(AcceptedCount, other.AcceptedCount))))
        && ((__isset.Version == other.__isset.Version) && ((!__isset.Version) || (global::System.Object.Equals(Version, other.Version))))
        && ((__isset.Type == other.__isset.Type) && ((!__isset.Type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.Status == other.__isset.Status) && ((!__isset.Status) || (global::System.Object.Equals(Status, other.Status))))
        && ((__isset.Content == other.__isset.Content) && ((!__isset.Content) || (global::System.Object.Equals(Content, other.Content))))
        && ((__isset.CreateTime == other.__isset.CreateTime) && ((!__isset.CreateTime) || (global::System.Object.Equals(CreateTime, other.CreateTime))))
        && ((__isset.UpdateTime == other.__isset.UpdateTime) && ((!__isset.UpdateTime) || (global::System.Object.Equals(UpdateTime, other.UpdateTime))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if((Title != null) && __isset.Title)
        {
          hashcode = (hashcode * 397) + Title.GetHashCode();
        }
        if((Properties != null) && __isset.Properties)
        {
          hashcode = (hashcode * 397) + Properties.GetHashCode();
        }
        if((Writer != null) && __isset.Writer)
        {
          hashcode = (hashcode * 397) + Writer.GetHashCode();
        }
        if((ShowID != null) && __isset.ShowID)
        {
          hashcode = (hashcode * 397) + ShowID.GetHashCode();
        }
        if((Source != null) && __isset.Source)
        {
          hashcode = (hashcode * 397) + Source.GetHashCode();
        }
        if(__isset.SubmissionCount)
        {
          hashcode = (hashcode * 397) + SubmissionCount.GetHashCode();
        }
        if(__isset.AcceptedCount)
        {
          hashcode = (hashcode * 397) + AcceptedCount.GetHashCode();
        }
        if(__isset.Version)
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
        if(__isset.Type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if(__isset.Status)
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if((Content != null) && __isset.Content)
        {
          hashcode = (hashcode * 397) + Content.GetHashCode();
        }
        if(__isset.CreateTime)
        {
          hashcode = (hashcode * 397) + CreateTime.GetHashCode();
        }
        if(__isset.UpdateTime)
        {
          hashcode = (hashcode * 397) + UpdateTime.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp47 = new StringBuilder("ProblemStruct(");
      int tmp48 = 0;
      if(__isset.ID)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("ID: ");
        ID.ToString(tmp47);
      }
      if((Title != null) && __isset.Title)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Title: ");
        Title.ToString(tmp47);
      }
      if((Properties != null) && __isset.Properties)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Properties: ");
        Properties.ToString(tmp47);
      }
      if((Writer != null) && __isset.Writer)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Writer: ");
        Writer.ToString(tmp47);
      }
      if((ShowID != null) && __isset.ShowID)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("ShowID: ");
        ShowID.ToString(tmp47);
      }
      if((Source != null) && __isset.Source)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Source: ");
        Source.ToString(tmp47);
      }
      if(__isset.SubmissionCount)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("SubmissionCount: ");
        SubmissionCount.ToString(tmp47);
      }
      if(__isset.AcceptedCount)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("AcceptedCount: ");
        AcceptedCount.ToString(tmp47);
      }
      if(__isset.Version)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Version: ");
        Version.ToString(tmp47);
      }
      if(__isset.Type)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Type: ");
        Type.ToString(tmp47);
      }
      if(__isset.Status)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Status: ");
        Status.ToString(tmp47);
      }
      if((Content != null) && __isset.Content)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("Content: ");
        Content.ToString(tmp47);
      }
      if(__isset.CreateTime)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("CreateTime: ");
        CreateTime.ToString(tmp47);
      }
      if(__isset.UpdateTime)
      {
        if(0 < tmp48++) { tmp47.Append(", "); }
        tmp47.Append("UpdateTime: ");
        UpdateTime.ToString(tmp47);
      }
      tmp47.Append(')');
      return tmp47.ToString();
    }
  }

}
