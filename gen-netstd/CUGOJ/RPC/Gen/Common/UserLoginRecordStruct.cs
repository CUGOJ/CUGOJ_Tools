/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Common
{

  public partial class UserLoginRecordStruct : TBase
  {
    private long _ID;
    private long _UserId;
    private string _IP;
    private global::CUGOJ.RPC.Gen.Common.PlatformEnum _Platform;
    private global::CUGOJ.RPC.Gen.Common.LoginTypeEnum _LoginType;
    private long _CreateTime;

    public long ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public long UserId
    {
      get
      {
        return _UserId;
      }
      set
      {
        __isset.UserId = true;
        this._UserId = value;
      }
    }

    public string IP
    {
      get
      {
        return _IP;
      }
      set
      {
        __isset.IP = true;
        this._IP = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Common.PlatformEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Common.PlatformEnum Platform
    {
      get
      {
        return _Platform;
      }
      set
      {
        __isset.Platform = true;
        this._Platform = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::CUGOJ.RPC.Gen.Common.LoginTypeEnum"/>
    /// </summary>
    public global::CUGOJ.RPC.Gen.Common.LoginTypeEnum LoginType
    {
      get
      {
        return _LoginType;
      }
      set
      {
        __isset.LoginType = true;
        this._LoginType = value;
      }
    }

    public long CreateTime
    {
      get
      {
        return _CreateTime;
      }
      set
      {
        __isset.CreateTime = true;
        this._CreateTime = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool ID;
      public bool UserId;
      public bool IP;
      public bool Platform;
      public bool LoginType;
      public bool CreateTime;
    }

    public UserLoginRecordStruct()
    {
    }

    public UserLoginRecordStruct DeepCopy()
    {
      var tmp19 = new UserLoginRecordStruct();
      if(__isset.ID)
      {
        tmp19.ID = this.ID;
      }
      tmp19.__isset.ID = this.__isset.ID;
      if(__isset.UserId)
      {
        tmp19.UserId = this.UserId;
      }
      tmp19.__isset.UserId = this.__isset.UserId;
      if((IP != null) && __isset.IP)
      {
        tmp19.IP = this.IP;
      }
      tmp19.__isset.IP = this.__isset.IP;
      if(__isset.Platform)
      {
        tmp19.Platform = this.Platform;
      }
      tmp19.__isset.Platform = this.__isset.Platform;
      if(__isset.LoginType)
      {
        tmp19.LoginType = this.LoginType;
      }
      tmp19.__isset.LoginType = this.__isset.LoginType;
      if(__isset.CreateTime)
      {
        tmp19.CreateTime = this.CreateTime;
      }
      tmp19.__isset.CreateTime = this.__isset.CreateTime;
      return tmp19;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                UserId = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                IP = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Platform = (global::CUGOJ.RPC.Gen.Common.PlatformEnum)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                LoginType = (global::CUGOJ.RPC.Gen.Common.LoginTypeEnum)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                CreateTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp20 = new TStruct("UserLoginRecordStruct");
        await oprot.WriteStructBeginAsync(tmp20, cancellationToken);
        var tmp21 = new TField();
        if(__isset.ID)
        {
          tmp21.Name = "ID";
          tmp21.Type = TType.I64;
          tmp21.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp21, cancellationToken);
          await oprot.WriteI64Async(ID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.UserId)
        {
          tmp21.Name = "UserId";
          tmp21.Type = TType.I64;
          tmp21.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp21, cancellationToken);
          await oprot.WriteI64Async(UserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((IP != null) && __isset.IP)
        {
          tmp21.Name = "IP";
          tmp21.Type = TType.String;
          tmp21.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp21, cancellationToken);
          await oprot.WriteStringAsync(IP, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.Platform)
        {
          tmp21.Name = "Platform";
          tmp21.Type = TType.I32;
          tmp21.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp21, cancellationToken);
          await oprot.WriteI32Async((int)Platform, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.LoginType)
        {
          tmp21.Name = "LoginType";
          tmp21.Type = TType.I32;
          tmp21.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp21, cancellationToken);
          await oprot.WriteI32Async((int)LoginType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.CreateTime)
        {
          tmp21.Name = "CreateTime";
          tmp21.Type = TType.I64;
          tmp21.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp21, cancellationToken);
          await oprot.WriteI64Async(CreateTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is UserLoginRecordStruct other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (global::System.Object.Equals(ID, other.ID))))
        && ((__isset.UserId == other.__isset.UserId) && ((!__isset.UserId) || (global::System.Object.Equals(UserId, other.UserId))))
        && ((__isset.IP == other.__isset.IP) && ((!__isset.IP) || (global::System.Object.Equals(IP, other.IP))))
        && ((__isset.Platform == other.__isset.Platform) && ((!__isset.Platform) || (global::System.Object.Equals(Platform, other.Platform))))
        && ((__isset.LoginType == other.__isset.LoginType) && ((!__isset.LoginType) || (global::System.Object.Equals(LoginType, other.LoginType))))
        && ((__isset.CreateTime == other.__isset.CreateTime) && ((!__isset.CreateTime) || (global::System.Object.Equals(CreateTime, other.CreateTime))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.ID)
        {
          hashcode = (hashcode * 397) + ID.GetHashCode();
        }
        if(__isset.UserId)
        {
          hashcode = (hashcode * 397) + UserId.GetHashCode();
        }
        if((IP != null) && __isset.IP)
        {
          hashcode = (hashcode * 397) + IP.GetHashCode();
        }
        if(__isset.Platform)
        {
          hashcode = (hashcode * 397) + Platform.GetHashCode();
        }
        if(__isset.LoginType)
        {
          hashcode = (hashcode * 397) + LoginType.GetHashCode();
        }
        if(__isset.CreateTime)
        {
          hashcode = (hashcode * 397) + CreateTime.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp22 = new StringBuilder("UserLoginRecordStruct(");
      int tmp23 = 0;
      if(__isset.ID)
      {
        if(0 < tmp23++) { tmp22.Append(", "); }
        tmp22.Append("ID: ");
        ID.ToString(tmp22);
      }
      if(__isset.UserId)
      {
        if(0 < tmp23++) { tmp22.Append(", "); }
        tmp22.Append("UserId: ");
        UserId.ToString(tmp22);
      }
      if((IP != null) && __isset.IP)
      {
        if(0 < tmp23++) { tmp22.Append(", "); }
        tmp22.Append("IP: ");
        IP.ToString(tmp22);
      }
      if(__isset.Platform)
      {
        if(0 < tmp23++) { tmp22.Append(", "); }
        tmp22.Append("Platform: ");
        Platform.ToString(tmp22);
      }
      if(__isset.LoginType)
      {
        if(0 < tmp23++) { tmp22.Append(", "); }
        tmp22.Append("LoginType: ");
        LoginType.ToString(tmp22);
      }
      if(__isset.CreateTime)
      {
        if(0 < tmp23++) { tmp22.Append(", "); }
        tmp22.Append("CreateTime: ");
        CreateTime.ToString(tmp22);
      }
      tmp22.Append(')');
      return tmp22.ToString();
    }
  }

}
