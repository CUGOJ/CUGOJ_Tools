/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Services.Core
{
  public partial class CoreService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await send_Ping(req, cancellationToken);
        return await recv_Ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp24 = new InternalStructs.Ping_args() {
          Req = req,
        };
        
        await tmp24.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> recv_Ping(CancellationToken cancellationToken = default)
      {
        
        var tmp25 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp25.Type == TMessageType.Exception)
        {
          var tmp26 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp26;
        }

        var tmp27 = new InternalStructs.Ping_result();
        await tmp27.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp27.__isset.success)
        {
          return tmp27.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_RegisterService(req, cancellationToken);
        return await recv_RegisterService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp28 = new InternalStructs.RegisterService_args() {
          Req = req,
        };
        
        await tmp28.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> recv_RegisterService(CancellationToken cancellationToken = default)
      {
        
        var tmp29 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp29.Type == TMessageType.Exception)
        {
          var tmp30 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp30;
        }

        var tmp31 = new InternalStructs.RegisterService_result();
        await tmp31.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp31.__isset.success)
        {
          return tmp31.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_DiscoverService(req, cancellationToken);
        return await recv_DiscoverService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp32 = new InternalStructs.DiscoverService_args() {
          Req = req,
        };
        
        await tmp32.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> recv_DiscoverService(CancellationToken cancellationToken = default)
      {
        
        var tmp33 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp33.Type == TMessageType.Exception)
        {
          var tmp34 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp34;
        }

        var tmp35 = new InternalStructs.DiscoverService_result();
        await tmp35.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp35.__isset.success)
        {
          return tmp35.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DiscoverService failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["Ping"] = Ping_ProcessAsync;
        processMap_["RegisterService"] = RegisterService_ProcessAsync;
        processMap_["DiscoverService"] = DiscoverService_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task Ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp36 = new InternalStructs.Ping_args();
        await tmp36.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp37 = new InternalStructs.Ping_result();
        try
        {
          tmp37.Success = await _iAsync.Ping(tmp36.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp37.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp38)
        {
          var tmp39 = $"Error occurred in {GetType().FullName}: {tmp38.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp38, tmp39);
          else
            Console.Error.WriteLine(tmp39);
          var tmp40 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp40.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RegisterService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp41 = new InternalStructs.RegisterService_args();
        await tmp41.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp42 = new InternalStructs.RegisterService_result();
        try
        {
          tmp42.Success = await _iAsync.RegisterService(tmp41.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp42.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp43)
        {
          var tmp44 = $"Error occurred in {GetType().FullName}: {tmp43.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp43, tmp44);
          else
            Console.Error.WriteLine(tmp44);
          var tmp45 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Exception, seqid), cancellationToken);
          await tmp45.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task DiscoverService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp46 = new InternalStructs.DiscoverService_args();
        await tmp46.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp47 = new InternalStructs.DiscoverService_result();
        try
        {
          tmp47.Success = await _iAsync.DiscoverService(tmp46.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp47.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp48)
        {
          var tmp49 = $"Error occurred in {GetType().FullName}: {tmp48.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp48, tmp49);
          else
            Console.Error.WriteLine(tmp49);
          var tmp50 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Exception, seqid), cancellationToken);
          await tmp50.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class Ping_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingRequest _req;

        public global::CUGOJ.RPC.Gen.Base.PingRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Ping_args()
        {
        }

        public Ping_args DeepCopy()
        {
          var tmp51 = new Ping_args();
          if((Req != null) && __isset.req)
          {
            tmp51.Req = (global::CUGOJ.RPC.Gen.Base.PingRequest)this.Req.DeepCopy();
          }
          tmp51.__isset.req = this.__isset.req;
          return tmp51;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Base.PingRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp52 = new TStruct("Ping_args");
            await oprot.WriteStructBeginAsync(tmp52, cancellationToken);
            var tmp53 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp53.Name = "req";
              tmp53.Type = TType.Struct;
              tmp53.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp54 = new StringBuilder("Ping_args(");
          int tmp55 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp55++) { tmp54.Append(", "); }
            tmp54.Append("Req: ");
            Req.ToString(tmp54);
          }
          tmp54.Append(')');
          return tmp54.ToString();
        }
      }


      public partial class Ping_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingResponse _success;

        public global::CUGOJ.RPC.Gen.Base.PingResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Ping_result()
        {
        }

        public Ping_result DeepCopy()
        {
          var tmp56 = new Ping_result();
          if((Success != null) && __isset.success)
          {
            tmp56.Success = (global::CUGOJ.RPC.Gen.Base.PingResponse)this.Success.DeepCopy();
          }
          tmp56.__isset.success = this.__isset.success;
          return tmp56;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.PingResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp57 = new TStruct("Ping_result");
            await oprot.WriteStructBeginAsync(tmp57, cancellationToken);
            var tmp58 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp58.Name = "Success";
                tmp58.Type = TType.Struct;
                tmp58.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp58, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp59 = new StringBuilder("Ping_result(");
          int tmp60 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp60++) { tmp59.Append(", "); }
            tmp59.Append("Success: ");
            Success.ToString(tmp59);
          }
          tmp59.Append(')');
          return tmp59.ToString();
        }
      }


      public partial class RegisterService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public RegisterService_args()
        {
        }

        public RegisterService_args DeepCopy()
        {
          var tmp61 = new RegisterService_args();
          if((Req != null) && __isset.req)
          {
            tmp61.Req = (global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest)this.Req.DeepCopy();
          }
          tmp61.__isset.req = this.__isset.req;
          return tmp61;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp62 = new TStruct("RegisterService_args");
            await oprot.WriteStructBeginAsync(tmp62, cancellationToken);
            var tmp63 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp63.Name = "req";
              tmp63.Type = TType.Struct;
              tmp63.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp63, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RegisterService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp64 = new StringBuilder("RegisterService_args(");
          int tmp65 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp65++) { tmp64.Append(", "); }
            tmp64.Append("Req: ");
            Req.ToString(tmp64);
          }
          tmp64.Append(')');
          return tmp64.ToString();
        }
      }


      public partial class RegisterService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public RegisterService_result()
        {
        }

        public RegisterService_result DeepCopy()
        {
          var tmp66 = new RegisterService_result();
          if((Success != null) && __isset.success)
          {
            tmp66.Success = (global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse)this.Success.DeepCopy();
          }
          tmp66.__isset.success = this.__isset.success;
          return tmp66;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp67 = new TStruct("RegisterService_result");
            await oprot.WriteStructBeginAsync(tmp67, cancellationToken);
            var tmp68 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp68.Name = "Success";
                tmp68.Type = TType.Struct;
                tmp68.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp68, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RegisterService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp69 = new StringBuilder("RegisterService_result(");
          int tmp70 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp70++) { tmp69.Append(", "); }
            tmp69.Append("Success: ");
            Success.ToString(tmp69);
          }
          tmp69.Append(')');
          return tmp69.ToString();
        }
      }


      public partial class DiscoverService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public DiscoverService_args()
        {
        }

        public DiscoverService_args DeepCopy()
        {
          var tmp71 = new DiscoverService_args();
          if((Req != null) && __isset.req)
          {
            tmp71.Req = (global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest)this.Req.DeepCopy();
          }
          tmp71.__isset.req = this.__isset.req;
          return tmp71;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp72 = new TStruct("DiscoverService_args");
            await oprot.WriteStructBeginAsync(tmp72, cancellationToken);
            var tmp73 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp73.Name = "req";
              tmp73.Type = TType.Struct;
              tmp73.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp73, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DiscoverService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp74 = new StringBuilder("DiscoverService_args(");
          int tmp75 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp75++) { tmp74.Append(", "); }
            tmp74.Append("Req: ");
            Req.ToString(tmp74);
          }
          tmp74.Append(')');
          return tmp74.ToString();
        }
      }


      public partial class DiscoverService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public DiscoverService_result()
        {
        }

        public DiscoverService_result DeepCopy()
        {
          var tmp76 = new DiscoverService_result();
          if((Success != null) && __isset.success)
          {
            tmp76.Success = (global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse)this.Success.DeepCopy();
          }
          tmp76.__isset.success = this.__isset.success;
          return tmp76;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp77 = new TStruct("DiscoverService_result");
            await oprot.WriteStructBeginAsync(tmp77, cancellationToken);
            var tmp78 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp78.Name = "Success";
                tmp78.Type = TType.Struct;
                tmp78.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp78, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DiscoverService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp79 = new StringBuilder("DiscoverService_result(");
          int tmp80 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp80++) { tmp79.Append(", "); }
            tmp79.Append("Success: ");
            Success.ToString(tmp79);
          }
          tmp79.Append(')');
          return tmp79.ToString();
        }
      }

    }

  }
}
