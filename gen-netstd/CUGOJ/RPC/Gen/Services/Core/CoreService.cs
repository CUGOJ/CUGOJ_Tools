/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Services.Core
{
  public partial class CoreService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse> GetProblem(global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse> GetContestDetail(global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse> GetUserDetail(global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse> SaveUserDetail(global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.BaseResp> ChangePassword(global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.LogupResponse> Logup(global::CUGOJ.RPC.Gen.Services.Core.LogupRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse> SubmitProblem(global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse> GetContestSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse> GetProblemSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse> GetSubmissionDetail(global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse> GetAllServices(global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse> SetupService(global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await send_Ping(req, cancellationToken);
        return await recv_Ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp203 = new InternalStructs.Ping_args() {
          Req = req,
        };
        
        await tmp203.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> recv_Ping(CancellationToken cancellationToken = default)
      {
        
        var tmp204 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp204.Type == TMessageType.Exception)
        {
          var tmp205 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp205;
        }

        var tmp206 = new InternalStructs.Ping_result();
        await tmp206.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp206.__isset.success)
        {
          return tmp206.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_RegisterService(req, cancellationToken);
        return await recv_RegisterService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp207 = new InternalStructs.RegisterService_args() {
          Req = req,
        };
        
        await tmp207.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> recv_RegisterService(CancellationToken cancellationToken = default)
      {
        
        var tmp208 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp208.Type == TMessageType.Exception)
        {
          var tmp209 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp209;
        }

        var tmp210 = new InternalStructs.RegisterService_result();
        await tmp210.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp210.__isset.success)
        {
          return tmp210.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_DiscoverService(req, cancellationToken);
        return await recv_DiscoverService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp211 = new InternalStructs.DiscoverService_args() {
          Req = req,
        };
        
        await tmp211.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> recv_DiscoverService(CancellationToken cancellationToken = default)
      {
        
        var tmp212 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp212.Type == TMessageType.Exception)
        {
          var tmp213 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp213;
        }

        var tmp214 = new InternalStructs.DiscoverService_result();
        await tmp214.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp214.__isset.success)
        {
          return tmp214.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DiscoverService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblemList(req, cancellationToken);
        return await recv_GetProblemList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblemList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp215 = new InternalStructs.GetProblemList_args() {
          Req = req,
        };
        
        await tmp215.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemListResponse> recv_GetProblemList(CancellationToken cancellationToken = default)
      {
        
        var tmp216 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp216.Type == TMessageType.Exception)
        {
          var tmp217 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp217;
        }

        var tmp218 = new InternalStructs.GetProblemList_result();
        await tmp218.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp218.__isset.success)
        {
          return tmp218.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblemList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse> GetProblem(global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblem(req, cancellationToken);
        return await recv_GetProblem(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblem(global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblem", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp219 = new InternalStructs.GetProblem_args() {
          Req = req,
        };
        
        await tmp219.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse> recv_GetProblem(CancellationToken cancellationToken = default)
      {
        
        var tmp220 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp220.Type == TMessageType.Exception)
        {
          var tmp221 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp221;
        }

        var tmp222 = new InternalStructs.GetProblem_result();
        await tmp222.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp222.__isset.success)
        {
          return tmp222.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblem failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestList(req, cancellationToken);
        return await recv_GetContestList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestList(global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp223 = new InternalStructs.GetContestList_args() {
          Req = req,
        };
        
        await tmp223.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse> recv_GetContestList(CancellationToken cancellationToken = default)
      {
        
        var tmp224 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp224.Type == TMessageType.Exception)
        {
          var tmp225 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp225;
        }

        var tmp226 = new InternalStructs.GetContestList_result();
        await tmp226.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp226.__isset.success)
        {
          return tmp226.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse> GetContestDetail(global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestDetail(req, cancellationToken);
        return await recv_GetContestDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestDetail(global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp227 = new InternalStructs.GetContestDetail_args() {
          Req = req,
        };
        
        await tmp227.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse> recv_GetContestDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp228 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp228.Type == TMessageType.Exception)
        {
          var tmp229 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp229;
        }

        var tmp230 = new InternalStructs.GetContestDetail_result();
        await tmp230.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp230.__isset.success)
        {
          return tmp230.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveProblemInfo(req, cancellationToken);
        return await recv_SaveProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp231 = new InternalStructs.SaveProblemInfo_args() {
          Req = req,
        };
        
        await tmp231.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse> recv_SaveProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp232 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp232.Type == TMessageType.Exception)
        {
          var tmp233 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp233;
        }

        var tmp234 = new InternalStructs.SaveProblemInfo_result();
        await tmp234.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp234.__isset.success)
        {
          return tmp234.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveContestInfo(req, cancellationToken);
        return await recv_SaveContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp235 = new InternalStructs.SaveContestInfo_args() {
          Req = req,
        };
        
        await tmp235.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse> recv_SaveContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp236 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp236.Type == TMessageType.Exception)
        {
          var tmp237 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp237;
        }

        var tmp238 = new InternalStructs.SaveContestInfo_result();
        await tmp238.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp238.__isset.success)
        {
          return tmp238.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse> GetUserDetail(global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetUserDetail(req, cancellationToken);
        return await recv_GetUserDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetUserDetail(global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetUserDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp239 = new InternalStructs.GetUserDetail_args() {
          Req = req,
        };
        
        await tmp239.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse> recv_GetUserDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp240 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp240.Type == TMessageType.Exception)
        {
          var tmp241 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp241;
        }

        var tmp242 = new InternalStructs.GetUserDetail_result();
        await tmp242.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp242.__isset.success)
        {
          return tmp242.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse> SaveUserDetail(global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveUserDetail(req, cancellationToken);
        return await recv_SaveUserDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveUserDetail(global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveUserDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp243 = new InternalStructs.SaveUserDetail_args() {
          Req = req,
        };
        
        await tmp243.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse> recv_SaveUserDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp244 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp244.Type == TMessageType.Exception)
        {
          var tmp245 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp245;
        }

        var tmp246 = new InternalStructs.SaveUserDetail_result();
        await tmp246.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp246.__isset.success)
        {
          return tmp246.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveUserDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.BaseResp> ChangePassword(global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest req, CancellationToken cancellationToken = default)
      {
        await send_ChangePassword(req, cancellationToken);
        return await recv_ChangePassword(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ChangePassword(global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ChangePassword", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp247 = new InternalStructs.ChangePassword_args() {
          Req = req,
        };
        
        await tmp247.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.BaseResp> recv_ChangePassword(CancellationToken cancellationToken = default)
      {
        
        var tmp248 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp248.Type == TMessageType.Exception)
        {
          var tmp249 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp249;
        }

        var tmp250 = new InternalStructs.ChangePassword_result();
        await tmp250.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp250.__isset.success)
        {
          return tmp250.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangePassword failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.LogupResponse> Logup(global::CUGOJ.RPC.Gen.Services.Core.LogupRequest req, CancellationToken cancellationToken = default)
      {
        await send_Logup(req, cancellationToken);
        return await recv_Logup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Logup(global::CUGOJ.RPC.Gen.Services.Core.LogupRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Logup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp251 = new InternalStructs.Logup_args() {
          Req = req,
        };
        
        await tmp251.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.LogupResponse> recv_Logup(CancellationToken cancellationToken = default)
      {
        
        var tmp252 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp252.Type == TMessageType.Exception)
        {
          var tmp253 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp253;
        }

        var tmp254 = new InternalStructs.Logup_result();
        await tmp254.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp254.__isset.success)
        {
          return tmp254.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Logup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse> SubmitProblem(global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest req, CancellationToken cancellationToken = default)
      {
        await send_SubmitProblem(req, cancellationToken);
        return await recv_SubmitProblem(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SubmitProblem(global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SubmitProblem", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp255 = new InternalStructs.SubmitProblem_args() {
          Req = req,
        };
        
        await tmp255.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse> recv_SubmitProblem(CancellationToken cancellationToken = default)
      {
        
        var tmp256 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp256.Type == TMessageType.Exception)
        {
          var tmp257 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp257;
        }

        var tmp258 = new InternalStructs.SubmitProblem_result();
        await tmp258.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp258.__isset.success)
        {
          return tmp258.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SubmitProblem failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse> GetContestSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestSubmissionList(req, cancellationToken);
        return await recv_GetContestSubmissionList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestSubmissionList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp259 = new InternalStructs.GetContestSubmissionList_args() {
          Req = req,
        };
        
        await tmp259.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse> recv_GetContestSubmissionList(CancellationToken cancellationToken = default)
      {
        
        var tmp260 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp260.Type == TMessageType.Exception)
        {
          var tmp261 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp261;
        }

        var tmp262 = new InternalStructs.GetContestSubmissionList_result();
        await tmp262.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp262.__isset.success)
        {
          return tmp262.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestSubmissionList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse> GetProblemSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblemSubmissionList(req, cancellationToken);
        return await recv_GetProblemSubmissionList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblemSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblemSubmissionList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp263 = new InternalStructs.GetProblemSubmissionList_args() {
          Req = req,
        };
        
        await tmp263.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse> recv_GetProblemSubmissionList(CancellationToken cancellationToken = default)
      {
        
        var tmp264 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp264.Type == TMessageType.Exception)
        {
          var tmp265 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp265;
        }

        var tmp266 = new InternalStructs.GetProblemSubmissionList_result();
        await tmp266.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp266.__isset.success)
        {
          return tmp266.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblemSubmissionList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse> GetSubmissionDetail(global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetSubmissionDetail(req, cancellationToken);
        return await recv_GetSubmissionDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSubmissionDetail(global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSubmissionDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp267 = new InternalStructs.GetSubmissionDetail_args() {
          Req = req,
        };
        
        await tmp267.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse> recv_GetSubmissionDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp268 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp268.Type == TMessageType.Exception)
        {
          var tmp269 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp269;
        }

        var tmp270 = new InternalStructs.GetSubmissionDetail_result();
        await tmp270.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp270.__isset.success)
        {
          return tmp270.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSubmissionDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse> GetAllServices(global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetAllServices(req, cancellationToken);
        return await recv_GetAllServices(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetAllServices(global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetAllServices", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp271 = new InternalStructs.GetAllServices_args() {
          Req = req,
        };
        
        await tmp271.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse> recv_GetAllServices(CancellationToken cancellationToken = default)
      {
        
        var tmp272 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp272.Type == TMessageType.Exception)
        {
          var tmp273 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp273;
        }

        var tmp274 = new InternalStructs.GetAllServices_result();
        await tmp274.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp274.__isset.success)
        {
          return tmp274.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllServices failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse> SetupService(global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_SetupService(req, cancellationToken);
        return await recv_SetupService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetupService(global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetupService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp275 = new InternalStructs.SetupService_args() {
          Req = req,
        };
        
        await tmp275.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse> recv_SetupService(CancellationToken cancellationToken = default)
      {
        
        var tmp276 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp276.Type == TMessageType.Exception)
        {
          var tmp277 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp277;
        }

        var tmp278 = new InternalStructs.SetupService_result();
        await tmp278.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp278.__isset.success)
        {
          return tmp278.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetupService failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["Ping"] = Ping_ProcessAsync;
        processMap_["RegisterService"] = RegisterService_ProcessAsync;
        processMap_["DiscoverService"] = DiscoverService_ProcessAsync;
        processMap_["GetProblemList"] = GetProblemList_ProcessAsync;
        processMap_["GetProblem"] = GetProblem_ProcessAsync;
        processMap_["GetContestList"] = GetContestList_ProcessAsync;
        processMap_["GetContestDetail"] = GetContestDetail_ProcessAsync;
        processMap_["SaveProblemInfo"] = SaveProblemInfo_ProcessAsync;
        processMap_["SaveContestInfo"] = SaveContestInfo_ProcessAsync;
        processMap_["GetUserDetail"] = GetUserDetail_ProcessAsync;
        processMap_["SaveUserDetail"] = SaveUserDetail_ProcessAsync;
        processMap_["ChangePassword"] = ChangePassword_ProcessAsync;
        processMap_["Logup"] = Logup_ProcessAsync;
        processMap_["SubmitProblem"] = SubmitProblem_ProcessAsync;
        processMap_["GetContestSubmissionList"] = GetContestSubmissionList_ProcessAsync;
        processMap_["GetProblemSubmissionList"] = GetProblemSubmissionList_ProcessAsync;
        processMap_["GetSubmissionDetail"] = GetSubmissionDetail_ProcessAsync;
        processMap_["GetAllServices"] = GetAllServices_ProcessAsync;
        processMap_["SetupService"] = SetupService_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task Ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp279 = new InternalStructs.Ping_args();
        await tmp279.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp280 = new InternalStructs.Ping_result();
        try
        {
          tmp280.Success = await _iAsync.Ping(tmp279.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp280.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp281)
        {
          var tmp282 = $"Error occurred in {GetType().FullName}: {tmp281.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp281, tmp282);
          else
            Console.Error.WriteLine(tmp282);
          var tmp283 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp283.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RegisterService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp284 = new InternalStructs.RegisterService_args();
        await tmp284.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp285 = new InternalStructs.RegisterService_result();
        try
        {
          tmp285.Success = await _iAsync.RegisterService(tmp284.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp285.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp286)
        {
          var tmp287 = $"Error occurred in {GetType().FullName}: {tmp286.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp286, tmp287);
          else
            Console.Error.WriteLine(tmp287);
          var tmp288 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Exception, seqid), cancellationToken);
          await tmp288.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task DiscoverService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp289 = new InternalStructs.DiscoverService_args();
        await tmp289.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp290 = new InternalStructs.DiscoverService_result();
        try
        {
          tmp290.Success = await _iAsync.DiscoverService(tmp289.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp290.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp291)
        {
          var tmp292 = $"Error occurred in {GetType().FullName}: {tmp291.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp291, tmp292);
          else
            Console.Error.WriteLine(tmp292);
          var tmp293 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Exception, seqid), cancellationToken);
          await tmp293.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblemList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp294 = new InternalStructs.GetProblemList_args();
        await tmp294.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp295 = new InternalStructs.GetProblemList_result();
        try
        {
          tmp295.Success = await _iAsync.GetProblemList(tmp294.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp295.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp296)
        {
          var tmp297 = $"Error occurred in {GetType().FullName}: {tmp296.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp296, tmp297);
          else
            Console.Error.WriteLine(tmp297);
          var tmp298 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Exception, seqid), cancellationToken);
          await tmp298.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp299 = new InternalStructs.GetProblem_args();
        await tmp299.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp300 = new InternalStructs.GetProblem_result();
        try
        {
          tmp300.Success = await _iAsync.GetProblem(tmp299.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblem", TMessageType.Reply, seqid), cancellationToken); 
          await tmp300.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp301)
        {
          var tmp302 = $"Error occurred in {GetType().FullName}: {tmp301.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp301, tmp302);
          else
            Console.Error.WriteLine(tmp302);
          var tmp303 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblem", TMessageType.Exception, seqid), cancellationToken);
          await tmp303.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp304 = new InternalStructs.GetContestList_args();
        await tmp304.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp305 = new InternalStructs.GetContestList_result();
        try
        {
          tmp305.Success = await _iAsync.GetContestList(tmp304.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp305.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp306)
        {
          var tmp307 = $"Error occurred in {GetType().FullName}: {tmp306.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp306, tmp307);
          else
            Console.Error.WriteLine(tmp307);
          var tmp308 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Exception, seqid), cancellationToken);
          await tmp308.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp309 = new InternalStructs.GetContestDetail_args();
        await tmp309.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp310 = new InternalStructs.GetContestDetail_result();
        try
        {
          tmp310.Success = await _iAsync.GetContestDetail(tmp309.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp310.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp311)
        {
          var tmp312 = $"Error occurred in {GetType().FullName}: {tmp311.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp311, tmp312);
          else
            Console.Error.WriteLine(tmp312);
          var tmp313 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp313.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp314 = new InternalStructs.SaveProblemInfo_args();
        await tmp314.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp315 = new InternalStructs.SaveProblemInfo_result();
        try
        {
          tmp315.Success = await _iAsync.SaveProblemInfo(tmp314.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp315.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp316)
        {
          var tmp317 = $"Error occurred in {GetType().FullName}: {tmp316.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp316, tmp317);
          else
            Console.Error.WriteLine(tmp317);
          var tmp318 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp318.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp319 = new InternalStructs.SaveContestInfo_args();
        await tmp319.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp320 = new InternalStructs.SaveContestInfo_result();
        try
        {
          tmp320.Success = await _iAsync.SaveContestInfo(tmp319.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp320.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp321)
        {
          var tmp322 = $"Error occurred in {GetType().FullName}: {tmp321.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp321, tmp322);
          else
            Console.Error.WriteLine(tmp322);
          var tmp323 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp323.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetUserDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp324 = new InternalStructs.GetUserDetail_args();
        await tmp324.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp325 = new InternalStructs.GetUserDetail_result();
        try
        {
          tmp325.Success = await _iAsync.GetUserDetail(tmp324.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp325.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp326)
        {
          var tmp327 = $"Error occurred in {GetType().FullName}: {tmp326.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp326, tmp327);
          else
            Console.Error.WriteLine(tmp327);
          var tmp328 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp328.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveUserDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp329 = new InternalStructs.SaveUserDetail_args();
        await tmp329.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp330 = new InternalStructs.SaveUserDetail_result();
        try
        {
          tmp330.Success = await _iAsync.SaveUserDetail(tmp329.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp330.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp331)
        {
          var tmp332 = $"Error occurred in {GetType().FullName}: {tmp331.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp331, tmp332);
          else
            Console.Error.WriteLine(tmp332);
          var tmp333 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp333.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ChangePassword_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp334 = new InternalStructs.ChangePassword_args();
        await tmp334.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp335 = new InternalStructs.ChangePassword_result();
        try
        {
          tmp335.Success = await _iAsync.ChangePassword(tmp334.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ChangePassword", TMessageType.Reply, seqid), cancellationToken); 
          await tmp335.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp336)
        {
          var tmp337 = $"Error occurred in {GetType().FullName}: {tmp336.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp336, tmp337);
          else
            Console.Error.WriteLine(tmp337);
          var tmp338 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ChangePassword", TMessageType.Exception, seqid), cancellationToken);
          await tmp338.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Logup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp339 = new InternalStructs.Logup_args();
        await tmp339.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp340 = new InternalStructs.Logup_result();
        try
        {
          tmp340.Success = await _iAsync.Logup(tmp339.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Logup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp340.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp341)
        {
          var tmp342 = $"Error occurred in {GetType().FullName}: {tmp341.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp341, tmp342);
          else
            Console.Error.WriteLine(tmp342);
          var tmp343 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Logup", TMessageType.Exception, seqid), cancellationToken);
          await tmp343.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SubmitProblem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp344 = new InternalStructs.SubmitProblem_args();
        await tmp344.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp345 = new InternalStructs.SubmitProblem_result();
        try
        {
          tmp345.Success = await _iAsync.SubmitProblem(tmp344.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SubmitProblem", TMessageType.Reply, seqid), cancellationToken); 
          await tmp345.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp346)
        {
          var tmp347 = $"Error occurred in {GetType().FullName}: {tmp346.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp346, tmp347);
          else
            Console.Error.WriteLine(tmp347);
          var tmp348 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SubmitProblem", TMessageType.Exception, seqid), cancellationToken);
          await tmp348.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestSubmissionList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp349 = new InternalStructs.GetContestSubmissionList_args();
        await tmp349.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp350 = new InternalStructs.GetContestSubmissionList_result();
        try
        {
          tmp350.Success = await _iAsync.GetContestSubmissionList(tmp349.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestSubmissionList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp350.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp351)
        {
          var tmp352 = $"Error occurred in {GetType().FullName}: {tmp351.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp351, tmp352);
          else
            Console.Error.WriteLine(tmp352);
          var tmp353 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestSubmissionList", TMessageType.Exception, seqid), cancellationToken);
          await tmp353.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblemSubmissionList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp354 = new InternalStructs.GetProblemSubmissionList_args();
        await tmp354.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp355 = new InternalStructs.GetProblemSubmissionList_result();
        try
        {
          tmp355.Success = await _iAsync.GetProblemSubmissionList(tmp354.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemSubmissionList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp355.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp356)
        {
          var tmp357 = $"Error occurred in {GetType().FullName}: {tmp356.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp356, tmp357);
          else
            Console.Error.WriteLine(tmp357);
          var tmp358 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemSubmissionList", TMessageType.Exception, seqid), cancellationToken);
          await tmp358.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSubmissionDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp359 = new InternalStructs.GetSubmissionDetail_args();
        await tmp359.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp360 = new InternalStructs.GetSubmissionDetail_result();
        try
        {
          tmp360.Success = await _iAsync.GetSubmissionDetail(tmp359.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp360.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp361)
        {
          var tmp362 = $"Error occurred in {GetType().FullName}: {tmp361.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp361, tmp362);
          else
            Console.Error.WriteLine(tmp362);
          var tmp363 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp363.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetAllServices_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp364 = new InternalStructs.GetAllServices_args();
        await tmp364.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp365 = new InternalStructs.GetAllServices_result();
        try
        {
          tmp365.Success = await _iAsync.GetAllServices(tmp364.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetAllServices", TMessageType.Reply, seqid), cancellationToken); 
          await tmp365.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp366)
        {
          var tmp367 = $"Error occurred in {GetType().FullName}: {tmp366.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp366, tmp367);
          else
            Console.Error.WriteLine(tmp367);
          var tmp368 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetAllServices", TMessageType.Exception, seqid), cancellationToken);
          await tmp368.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetupService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp369 = new InternalStructs.SetupService_args();
        await tmp369.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp370 = new InternalStructs.SetupService_result();
        try
        {
          tmp370.Success = await _iAsync.SetupService(tmp369.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SetupService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp370.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp371)
        {
          var tmp372 = $"Error occurred in {GetType().FullName}: {tmp371.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp371, tmp372);
          else
            Console.Error.WriteLine(tmp372);
          var tmp373 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetupService", TMessageType.Exception, seqid), cancellationToken);
          await tmp373.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class Ping_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingRequest _req;

        public global::CUGOJ.RPC.Gen.Base.PingRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Ping_args()
        {
        }

        public Ping_args DeepCopy()
        {
          var tmp374 = new Ping_args();
          if((Req != null) && __isset.req)
          {
            tmp374.Req = (global::CUGOJ.RPC.Gen.Base.PingRequest)this.Req.DeepCopy();
          }
          tmp374.__isset.req = this.__isset.req;
          return tmp374;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Base.PingRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp375 = new TStruct("Ping_args");
            await oprot.WriteStructBeginAsync(tmp375, cancellationToken);
            var tmp376 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp376.Name = "req";
              tmp376.Type = TType.Struct;
              tmp376.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp376, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp377 = new StringBuilder("Ping_args(");
          int tmp378 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp378++) { tmp377.Append(", "); }
            tmp377.Append("Req: ");
            Req.ToString(tmp377);
          }
          tmp377.Append(')');
          return tmp377.ToString();
        }
      }


      public partial class Ping_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingResponse _success;

        public global::CUGOJ.RPC.Gen.Base.PingResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Ping_result()
        {
        }

        public Ping_result DeepCopy()
        {
          var tmp379 = new Ping_result();
          if((Success != null) && __isset.success)
          {
            tmp379.Success = (global::CUGOJ.RPC.Gen.Base.PingResponse)this.Success.DeepCopy();
          }
          tmp379.__isset.success = this.__isset.success;
          return tmp379;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.PingResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp380 = new TStruct("Ping_result");
            await oprot.WriteStructBeginAsync(tmp380, cancellationToken);
            var tmp381 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp381.Name = "Success";
                tmp381.Type = TType.Struct;
                tmp381.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp382 = new StringBuilder("Ping_result(");
          int tmp383 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("Success: ");
            Success.ToString(tmp382);
          }
          tmp382.Append(')');
          return tmp382.ToString();
        }
      }


      public partial class RegisterService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public RegisterService_args()
        {
        }

        public RegisterService_args DeepCopy()
        {
          var tmp384 = new RegisterService_args();
          if((Req != null) && __isset.req)
          {
            tmp384.Req = (global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest)this.Req.DeepCopy();
          }
          tmp384.__isset.req = this.__isset.req;
          return tmp384;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp385 = new TStruct("RegisterService_args");
            await oprot.WriteStructBeginAsync(tmp385, cancellationToken);
            var tmp386 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp386.Name = "req";
              tmp386.Type = TType.Struct;
              tmp386.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp386, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RegisterService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp387 = new StringBuilder("RegisterService_args(");
          int tmp388 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp388++) { tmp387.Append(", "); }
            tmp387.Append("Req: ");
            Req.ToString(tmp387);
          }
          tmp387.Append(')');
          return tmp387.ToString();
        }
      }


      public partial class RegisterService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public RegisterService_result()
        {
        }

        public RegisterService_result DeepCopy()
        {
          var tmp389 = new RegisterService_result();
          if((Success != null) && __isset.success)
          {
            tmp389.Success = (global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse)this.Success.DeepCopy();
          }
          tmp389.__isset.success = this.__isset.success;
          return tmp389;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp390 = new TStruct("RegisterService_result");
            await oprot.WriteStructBeginAsync(tmp390, cancellationToken);
            var tmp391 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp391.Name = "Success";
                tmp391.Type = TType.Struct;
                tmp391.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp391, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RegisterService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp392 = new StringBuilder("RegisterService_result(");
          int tmp393 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp393++) { tmp392.Append(", "); }
            tmp392.Append("Success: ");
            Success.ToString(tmp392);
          }
          tmp392.Append(')');
          return tmp392.ToString();
        }
      }


      public partial class DiscoverService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public DiscoverService_args()
        {
        }

        public DiscoverService_args DeepCopy()
        {
          var tmp394 = new DiscoverService_args();
          if((Req != null) && __isset.req)
          {
            tmp394.Req = (global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest)this.Req.DeepCopy();
          }
          tmp394.__isset.req = this.__isset.req;
          return tmp394;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp395 = new TStruct("DiscoverService_args");
            await oprot.WriteStructBeginAsync(tmp395, cancellationToken);
            var tmp396 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp396.Name = "req";
              tmp396.Type = TType.Struct;
              tmp396.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp396, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DiscoverService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp397 = new StringBuilder("DiscoverService_args(");
          int tmp398 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp398++) { tmp397.Append(", "); }
            tmp397.Append("Req: ");
            Req.ToString(tmp397);
          }
          tmp397.Append(')');
          return tmp397.ToString();
        }
      }


      public partial class DiscoverService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public DiscoverService_result()
        {
        }

        public DiscoverService_result DeepCopy()
        {
          var tmp399 = new DiscoverService_result();
          if((Success != null) && __isset.success)
          {
            tmp399.Success = (global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse)this.Success.DeepCopy();
          }
          tmp399.__isset.success = this.__isset.success;
          return tmp399;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp400 = new TStruct("DiscoverService_result");
            await oprot.WriteStructBeginAsync(tmp400, cancellationToken);
            var tmp401 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp401.Name = "Success";
                tmp401.Type = TType.Struct;
                tmp401.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DiscoverService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp402 = new StringBuilder("DiscoverService_result(");
          int tmp403 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp403++) { tmp402.Append(", "); }
            tmp402.Append("Success: ");
            Success.ToString(tmp402);
          }
          tmp402.Append(')');
          return tmp402.ToString();
        }
      }


      public partial class GetProblemList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblemList_args()
        {
        }

        public GetProblemList_args DeepCopy()
        {
          var tmp404 = new GetProblemList_args();
          if((Req != null) && __isset.req)
          {
            tmp404.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemListRequest)this.Req.DeepCopy();
          }
          tmp404.__isset.req = this.__isset.req;
          return tmp404;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp405 = new TStruct("GetProblemList_args");
            await oprot.WriteStructBeginAsync(tmp405, cancellationToken);
            var tmp406 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp406.Name = "req";
              tmp406.Type = TType.Struct;
              tmp406.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp406, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp407 = new StringBuilder("GetProblemList_args(");
          int tmp408 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp408++) { tmp407.Append(", "); }
            tmp407.Append("Req: ");
            Req.ToString(tmp407);
          }
          tmp407.Append(')');
          return tmp407.ToString();
        }
      }


      public partial class GetProblemList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblemList_result()
        {
        }

        public GetProblemList_result DeepCopy()
        {
          var tmp409 = new GetProblemList_result();
          if((Success != null) && __isset.success)
          {
            tmp409.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemListResponse)this.Success.DeepCopy();
          }
          tmp409.__isset.success = this.__isset.success;
          return tmp409;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp410 = new TStruct("GetProblemList_result");
            await oprot.WriteStructBeginAsync(tmp410, cancellationToken);
            var tmp411 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp411.Name = "Success";
                tmp411.Type = TType.Struct;
                tmp411.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp411, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp412 = new StringBuilder("GetProblemList_result(");
          int tmp413 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp413++) { tmp412.Append(", "); }
            tmp412.Append("Success: ");
            Success.ToString(tmp412);
          }
          tmp412.Append(')');
          return tmp412.ToString();
        }
      }


      public partial class GetProblem_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblem_args()
        {
        }

        public GetProblem_args DeepCopy()
        {
          var tmp414 = new GetProblem_args();
          if((Req != null) && __isset.req)
          {
            tmp414.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest)this.Req.DeepCopy();
          }
          tmp414.__isset.req = this.__isset.req;
          return tmp414;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp415 = new TStruct("GetProblem_args");
            await oprot.WriteStructBeginAsync(tmp415, cancellationToken);
            var tmp416 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp416.Name = "req";
              tmp416.Type = TType.Struct;
              tmp416.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp416, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblem_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp417 = new StringBuilder("GetProblem_args(");
          int tmp418 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp418++) { tmp417.Append(", "); }
            tmp417.Append("Req: ");
            Req.ToString(tmp417);
          }
          tmp417.Append(')');
          return tmp417.ToString();
        }
      }


      public partial class GetProblem_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblem_result()
        {
        }

        public GetProblem_result DeepCopy()
        {
          var tmp419 = new GetProblem_result();
          if((Success != null) && __isset.success)
          {
            tmp419.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse)this.Success.DeepCopy();
          }
          tmp419.__isset.success = this.__isset.success;
          return tmp419;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp420 = new TStruct("GetProblem_result");
            await oprot.WriteStructBeginAsync(tmp420, cancellationToken);
            var tmp421 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp421.Name = "Success";
                tmp421.Type = TType.Struct;
                tmp421.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblem_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp422 = new StringBuilder("GetProblem_result(");
          int tmp423 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp423++) { tmp422.Append(", "); }
            tmp422.Append("Success: ");
            Success.ToString(tmp422);
          }
          tmp422.Append(')');
          return tmp422.ToString();
        }
      }


      public partial class GetContestList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestList_args()
        {
        }

        public GetContestList_args DeepCopy()
        {
          var tmp424 = new GetContestList_args();
          if((Req != null) && __isset.req)
          {
            tmp424.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest)this.Req.DeepCopy();
          }
          tmp424.__isset.req = this.__isset.req;
          return tmp424;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp425 = new TStruct("GetContestList_args");
            await oprot.WriteStructBeginAsync(tmp425, cancellationToken);
            var tmp426 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp426.Name = "req";
              tmp426.Type = TType.Struct;
              tmp426.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp426, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp427 = new StringBuilder("GetContestList_args(");
          int tmp428 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp428++) { tmp427.Append(", "); }
            tmp427.Append("Req: ");
            Req.ToString(tmp427);
          }
          tmp427.Append(')');
          return tmp427.ToString();
        }
      }


      public partial class GetContestList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestList_result()
        {
        }

        public GetContestList_result DeepCopy()
        {
          var tmp429 = new GetContestList_result();
          if((Success != null) && __isset.success)
          {
            tmp429.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse)this.Success.DeepCopy();
          }
          tmp429.__isset.success = this.__isset.success;
          return tmp429;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp430 = new TStruct("GetContestList_result");
            await oprot.WriteStructBeginAsync(tmp430, cancellationToken);
            var tmp431 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp431.Name = "Success";
                tmp431.Type = TType.Struct;
                tmp431.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp431, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp432 = new StringBuilder("GetContestList_result(");
          int tmp433 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp433++) { tmp432.Append(", "); }
            tmp432.Append("Success: ");
            Success.ToString(tmp432);
          }
          tmp432.Append(')');
          return tmp432.ToString();
        }
      }


      public partial class GetContestDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestDetail_args()
        {
        }

        public GetContestDetail_args DeepCopy()
        {
          var tmp434 = new GetContestDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp434.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest)this.Req.DeepCopy();
          }
          tmp434.__isset.req = this.__isset.req;
          return tmp434;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp435 = new TStruct("GetContestDetail_args");
            await oprot.WriteStructBeginAsync(tmp435, cancellationToken);
            var tmp436 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp436.Name = "req";
              tmp436.Type = TType.Struct;
              tmp436.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp436, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp437 = new StringBuilder("GetContestDetail_args(");
          int tmp438 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp438++) { tmp437.Append(", "); }
            tmp437.Append("Req: ");
            Req.ToString(tmp437);
          }
          tmp437.Append(')');
          return tmp437.ToString();
        }
      }


      public partial class GetContestDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestDetail_result()
        {
        }

        public GetContestDetail_result DeepCopy()
        {
          var tmp439 = new GetContestDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp439.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse)this.Success.DeepCopy();
          }
          tmp439.__isset.success = this.__isset.success;
          return tmp439;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("GetContestDetail_result");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            var tmp441 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp441.Name = "Success";
                tmp441.Type = TType.Struct;
                tmp441.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("GetContestDetail_result(");
          int tmp443 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("Success: ");
            Success.ToString(tmp442);
          }
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class SaveProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveProblemInfo_args()
        {
        }

        public SaveProblemInfo_args DeepCopy()
        {
          var tmp444 = new SaveProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp444.Req = (global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp444.__isset.req = this.__isset.req;
          return tmp444;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp445 = new TStruct("SaveProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
            var tmp446 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp446.Name = "req";
              tmp446.Type = TType.Struct;
              tmp446.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp447 = new StringBuilder("SaveProblemInfo_args(");
          int tmp448 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("Req: ");
            Req.ToString(tmp447);
          }
          tmp447.Append(')');
          return tmp447.ToString();
        }
      }


      public partial class SaveProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveProblemInfo_result()
        {
        }

        public SaveProblemInfo_result DeepCopy()
        {
          var tmp449 = new SaveProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp449.Success = (global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp449.__isset.success = this.__isset.success;
          return tmp449;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp450 = new TStruct("SaveProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp450, cancellationToken);
            var tmp451 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp451.Name = "Success";
                tmp451.Type = TType.Struct;
                tmp451.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp451, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp452 = new StringBuilder("SaveProblemInfo_result(");
          int tmp453 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp453++) { tmp452.Append(", "); }
            tmp452.Append("Success: ");
            Success.ToString(tmp452);
          }
          tmp452.Append(')');
          return tmp452.ToString();
        }
      }


      public partial class SaveContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveContestInfo_args()
        {
        }

        public SaveContestInfo_args DeepCopy()
        {
          var tmp454 = new SaveContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp454.Req = (global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest)this.Req.DeepCopy();
          }
          tmp454.__isset.req = this.__isset.req;
          return tmp454;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp455 = new TStruct("SaveContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp455, cancellationToken);
            var tmp456 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp456.Name = "req";
              tmp456.Type = TType.Struct;
              tmp456.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp456, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp457 = new StringBuilder("SaveContestInfo_args(");
          int tmp458 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp458++) { tmp457.Append(", "); }
            tmp457.Append("Req: ");
            Req.ToString(tmp457);
          }
          tmp457.Append(')');
          return tmp457.ToString();
        }
      }


      public partial class SaveContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveContestInfo_result()
        {
        }

        public SaveContestInfo_result DeepCopy()
        {
          var tmp459 = new SaveContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp459.Success = (global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse)this.Success.DeepCopy();
          }
          tmp459.__isset.success = this.__isset.success;
          return tmp459;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp460 = new TStruct("SaveContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp460, cancellationToken);
            var tmp461 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp461.Name = "Success";
                tmp461.Type = TType.Struct;
                tmp461.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp461, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp462 = new StringBuilder("SaveContestInfo_result(");
          int tmp463 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp463++) { tmp462.Append(", "); }
            tmp462.Append("Success: ");
            Success.ToString(tmp462);
          }
          tmp462.Append(')');
          return tmp462.ToString();
        }
      }


      public partial class GetUserDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetUserDetail_args()
        {
        }

        public GetUserDetail_args DeepCopy()
        {
          var tmp464 = new GetUserDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp464.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest)this.Req.DeepCopy();
          }
          tmp464.__isset.req = this.__isset.req;
          return tmp464;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp465 = new TStruct("GetUserDetail_args");
            await oprot.WriteStructBeginAsync(tmp465, cancellationToken);
            var tmp466 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp466.Name = "req";
              tmp466.Type = TType.Struct;
              tmp466.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp466, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp467 = new StringBuilder("GetUserDetail_args(");
          int tmp468 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp468++) { tmp467.Append(", "); }
            tmp467.Append("Req: ");
            Req.ToString(tmp467);
          }
          tmp467.Append(')');
          return tmp467.ToString();
        }
      }


      public partial class GetUserDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetUserDetail_result()
        {
        }

        public GetUserDetail_result DeepCopy()
        {
          var tmp469 = new GetUserDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp469.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse)this.Success.DeepCopy();
          }
          tmp469.__isset.success = this.__isset.success;
          return tmp469;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp470 = new TStruct("GetUserDetail_result");
            await oprot.WriteStructBeginAsync(tmp470, cancellationToken);
            var tmp471 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp471.Name = "Success";
                tmp471.Type = TType.Struct;
                tmp471.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp471, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp472 = new StringBuilder("GetUserDetail_result(");
          int tmp473 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp473++) { tmp472.Append(", "); }
            tmp472.Append("Success: ");
            Success.ToString(tmp472);
          }
          tmp472.Append(')');
          return tmp472.ToString();
        }
      }


      public partial class SaveUserDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveUserDetail_args()
        {
        }

        public SaveUserDetail_args DeepCopy()
        {
          var tmp474 = new SaveUserDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp474.Req = (global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest)this.Req.DeepCopy();
          }
          tmp474.__isset.req = this.__isset.req;
          return tmp474;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp475 = new TStruct("SaveUserDetail_args");
            await oprot.WriteStructBeginAsync(tmp475, cancellationToken);
            var tmp476 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp476.Name = "req";
              tmp476.Type = TType.Struct;
              tmp476.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp476, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp477 = new StringBuilder("SaveUserDetail_args(");
          int tmp478 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp478++) { tmp477.Append(", "); }
            tmp477.Append("Req: ");
            Req.ToString(tmp477);
          }
          tmp477.Append(')');
          return tmp477.ToString();
        }
      }


      public partial class SaveUserDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveUserDetail_result()
        {
        }

        public SaveUserDetail_result DeepCopy()
        {
          var tmp479 = new SaveUserDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp479.Success = (global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse)this.Success.DeepCopy();
          }
          tmp479.__isset.success = this.__isset.success;
          return tmp479;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp480 = new TStruct("SaveUserDetail_result");
            await oprot.WriteStructBeginAsync(tmp480, cancellationToken);
            var tmp481 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp481.Name = "Success";
                tmp481.Type = TType.Struct;
                tmp481.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp481, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp482 = new StringBuilder("SaveUserDetail_result(");
          int tmp483 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp483++) { tmp482.Append(", "); }
            tmp482.Append("Success: ");
            Success.ToString(tmp482);
          }
          tmp482.Append(')');
          return tmp482.ToString();
        }
      }


      public partial class ChangePassword_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public ChangePassword_args()
        {
        }

        public ChangePassword_args DeepCopy()
        {
          var tmp484 = new ChangePassword_args();
          if((Req != null) && __isset.req)
          {
            tmp484.Req = (global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest)this.Req.DeepCopy();
          }
          tmp484.__isset.req = this.__isset.req;
          return tmp484;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp485 = new TStruct("ChangePassword_args");
            await oprot.WriteStructBeginAsync(tmp485, cancellationToken);
            var tmp486 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp486.Name = "req";
              tmp486.Type = TType.Struct;
              tmp486.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp486, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ChangePassword_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp487 = new StringBuilder("ChangePassword_args(");
          int tmp488 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp488++) { tmp487.Append(", "); }
            tmp487.Append("Req: ");
            Req.ToString(tmp487);
          }
          tmp487.Append(')');
          return tmp487.ToString();
        }
      }


      public partial class ChangePassword_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.BaseResp _success;

        public global::CUGOJ.RPC.Gen.Base.BaseResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ChangePassword_result()
        {
        }

        public ChangePassword_result DeepCopy()
        {
          var tmp489 = new ChangePassword_result();
          if((Success != null) && __isset.success)
          {
            tmp489.Success = (global::CUGOJ.RPC.Gen.Base.BaseResp)this.Success.DeepCopy();
          }
          tmp489.__isset.success = this.__isset.success;
          return tmp489;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.BaseResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp490 = new TStruct("ChangePassword_result");
            await oprot.WriteStructBeginAsync(tmp490, cancellationToken);
            var tmp491 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp491.Name = "Success";
                tmp491.Type = TType.Struct;
                tmp491.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp491, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ChangePassword_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp492 = new StringBuilder("ChangePassword_result(");
          int tmp493 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp493++) { tmp492.Append(", "); }
            tmp492.Append("Success: ");
            Success.ToString(tmp492);
          }
          tmp492.Append(')');
          return tmp492.ToString();
        }
      }


      public partial class Logup_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.LogupRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.LogupRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Logup_args()
        {
        }

        public Logup_args DeepCopy()
        {
          var tmp494 = new Logup_args();
          if((Req != null) && __isset.req)
          {
            tmp494.Req = (global::CUGOJ.RPC.Gen.Services.Core.LogupRequest)this.Req.DeepCopy();
          }
          tmp494.__isset.req = this.__isset.req;
          return tmp494;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.LogupRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp495 = new TStruct("Logup_args");
            await oprot.WriteStructBeginAsync(tmp495, cancellationToken);
            var tmp496 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp496.Name = "req";
              tmp496.Type = TType.Struct;
              tmp496.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp496, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Logup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp497 = new StringBuilder("Logup_args(");
          int tmp498 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp498++) { tmp497.Append(", "); }
            tmp497.Append("Req: ");
            Req.ToString(tmp497);
          }
          tmp497.Append(')');
          return tmp497.ToString();
        }
      }


      public partial class Logup_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.LogupResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.LogupResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Logup_result()
        {
        }

        public Logup_result DeepCopy()
        {
          var tmp499 = new Logup_result();
          if((Success != null) && __isset.success)
          {
            tmp499.Success = (global::CUGOJ.RPC.Gen.Services.Core.LogupResponse)this.Success.DeepCopy();
          }
          tmp499.__isset.success = this.__isset.success;
          return tmp499;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.LogupResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp500 = new TStruct("Logup_result");
            await oprot.WriteStructBeginAsync(tmp500, cancellationToken);
            var tmp501 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp501.Name = "Success";
                tmp501.Type = TType.Struct;
                tmp501.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp501, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Logup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp502 = new StringBuilder("Logup_result(");
          int tmp503 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp503++) { tmp502.Append(", "); }
            tmp502.Append("Success: ");
            Success.ToString(tmp502);
          }
          tmp502.Append(')');
          return tmp502.ToString();
        }
      }


      public partial class SubmitProblem_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SubmitProblem_args()
        {
        }

        public SubmitProblem_args DeepCopy()
        {
          var tmp504 = new SubmitProblem_args();
          if((Req != null) && __isset.req)
          {
            tmp504.Req = (global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest)this.Req.DeepCopy();
          }
          tmp504.__isset.req = this.__isset.req;
          return tmp504;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp505 = new TStruct("SubmitProblem_args");
            await oprot.WriteStructBeginAsync(tmp505, cancellationToken);
            var tmp506 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp506.Name = "req";
              tmp506.Type = TType.Struct;
              tmp506.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp506, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SubmitProblem_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp507 = new StringBuilder("SubmitProblem_args(");
          int tmp508 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp508++) { tmp507.Append(", "); }
            tmp507.Append("Req: ");
            Req.ToString(tmp507);
          }
          tmp507.Append(')');
          return tmp507.ToString();
        }
      }


      public partial class SubmitProblem_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SubmitProblem_result()
        {
        }

        public SubmitProblem_result DeepCopy()
        {
          var tmp509 = new SubmitProblem_result();
          if((Success != null) && __isset.success)
          {
            tmp509.Success = (global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse)this.Success.DeepCopy();
          }
          tmp509.__isset.success = this.__isset.success;
          return tmp509;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp510 = new TStruct("SubmitProblem_result");
            await oprot.WriteStructBeginAsync(tmp510, cancellationToken);
            var tmp511 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp511.Name = "Success";
                tmp511.Type = TType.Struct;
                tmp511.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SubmitProblem_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp512 = new StringBuilder("SubmitProblem_result(");
          int tmp513 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp513++) { tmp512.Append(", "); }
            tmp512.Append("Success: ");
            Success.ToString(tmp512);
          }
          tmp512.Append(')');
          return tmp512.ToString();
        }
      }


      public partial class GetContestSubmissionList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestSubmissionList_args()
        {
        }

        public GetContestSubmissionList_args DeepCopy()
        {
          var tmp514 = new GetContestSubmissionList_args();
          if((Req != null) && __isset.req)
          {
            tmp514.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest)this.Req.DeepCopy();
          }
          tmp514.__isset.req = this.__isset.req;
          return tmp514;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp515 = new TStruct("GetContestSubmissionList_args");
            await oprot.WriteStructBeginAsync(tmp515, cancellationToken);
            var tmp516 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp516.Name = "req";
              tmp516.Type = TType.Struct;
              tmp516.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestSubmissionList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp517 = new StringBuilder("GetContestSubmissionList_args(");
          int tmp518 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp518++) { tmp517.Append(", "); }
            tmp517.Append("Req: ");
            Req.ToString(tmp517);
          }
          tmp517.Append(')');
          return tmp517.ToString();
        }
      }


      public partial class GetContestSubmissionList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestSubmissionList_result()
        {
        }

        public GetContestSubmissionList_result DeepCopy()
        {
          var tmp519 = new GetContestSubmissionList_result();
          if((Success != null) && __isset.success)
          {
            tmp519.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse)this.Success.DeepCopy();
          }
          tmp519.__isset.success = this.__isset.success;
          return tmp519;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp520 = new TStruct("GetContestSubmissionList_result");
            await oprot.WriteStructBeginAsync(tmp520, cancellationToken);
            var tmp521 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp521.Name = "Success";
                tmp521.Type = TType.Struct;
                tmp521.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp521, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestSubmissionList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp522 = new StringBuilder("GetContestSubmissionList_result(");
          int tmp523 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp523++) { tmp522.Append(", "); }
            tmp522.Append("Success: ");
            Success.ToString(tmp522);
          }
          tmp522.Append(')');
          return tmp522.ToString();
        }
      }


      public partial class GetProblemSubmissionList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblemSubmissionList_args()
        {
        }

        public GetProblemSubmissionList_args DeepCopy()
        {
          var tmp524 = new GetProblemSubmissionList_args();
          if((Req != null) && __isset.req)
          {
            tmp524.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest)this.Req.DeepCopy();
          }
          tmp524.__isset.req = this.__isset.req;
          return tmp524;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp525 = new TStruct("GetProblemSubmissionList_args");
            await oprot.WriteStructBeginAsync(tmp525, cancellationToken);
            var tmp526 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp526.Name = "req";
              tmp526.Type = TType.Struct;
              tmp526.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp526, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemSubmissionList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp527 = new StringBuilder("GetProblemSubmissionList_args(");
          int tmp528 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp528++) { tmp527.Append(", "); }
            tmp527.Append("Req: ");
            Req.ToString(tmp527);
          }
          tmp527.Append(')');
          return tmp527.ToString();
        }
      }


      public partial class GetProblemSubmissionList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblemSubmissionList_result()
        {
        }

        public GetProblemSubmissionList_result DeepCopy()
        {
          var tmp529 = new GetProblemSubmissionList_result();
          if((Success != null) && __isset.success)
          {
            tmp529.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse)this.Success.DeepCopy();
          }
          tmp529.__isset.success = this.__isset.success;
          return tmp529;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp530 = new TStruct("GetProblemSubmissionList_result");
            await oprot.WriteStructBeginAsync(tmp530, cancellationToken);
            var tmp531 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp531.Name = "Success";
                tmp531.Type = TType.Struct;
                tmp531.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp531, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemSubmissionList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp532 = new StringBuilder("GetProblemSubmissionList_result(");
          int tmp533 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp533++) { tmp532.Append(", "); }
            tmp532.Append("Success: ");
            Success.ToString(tmp532);
          }
          tmp532.Append(')');
          return tmp532.ToString();
        }
      }


      public partial class GetSubmissionDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetSubmissionDetail_args()
        {
        }

        public GetSubmissionDetail_args DeepCopy()
        {
          var tmp534 = new GetSubmissionDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp534.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest)this.Req.DeepCopy();
          }
          tmp534.__isset.req = this.__isset.req;
          return tmp534;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp535 = new TStruct("GetSubmissionDetail_args");
            await oprot.WriteStructBeginAsync(tmp535, cancellationToken);
            var tmp536 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp536.Name = "req";
              tmp536.Type = TType.Struct;
              tmp536.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp536, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp537 = new StringBuilder("GetSubmissionDetail_args(");
          int tmp538 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp538++) { tmp537.Append(", "); }
            tmp537.Append("Req: ");
            Req.ToString(tmp537);
          }
          tmp537.Append(')');
          return tmp537.ToString();
        }
      }


      public partial class GetSubmissionDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetSubmissionDetail_result()
        {
        }

        public GetSubmissionDetail_result DeepCopy()
        {
          var tmp539 = new GetSubmissionDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp539.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse)this.Success.DeepCopy();
          }
          tmp539.__isset.success = this.__isset.success;
          return tmp539;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp540 = new TStruct("GetSubmissionDetail_result");
            await oprot.WriteStructBeginAsync(tmp540, cancellationToken);
            var tmp541 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp541.Name = "Success";
                tmp541.Type = TType.Struct;
                tmp541.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp541, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp542 = new StringBuilder("GetSubmissionDetail_result(");
          int tmp543 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp543++) { tmp542.Append(", "); }
            tmp542.Append("Success: ");
            Success.ToString(tmp542);
          }
          tmp542.Append(')');
          return tmp542.ToString();
        }
      }


      public partial class GetAllServices_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetAllServices_args()
        {
        }

        public GetAllServices_args DeepCopy()
        {
          var tmp544 = new GetAllServices_args();
          if((Req != null) && __isset.req)
          {
            tmp544.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest)this.Req.DeepCopy();
          }
          tmp544.__isset.req = this.__isset.req;
          return tmp544;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp545 = new TStruct("GetAllServices_args");
            await oprot.WriteStructBeginAsync(tmp545, cancellationToken);
            var tmp546 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp546.Name = "req";
              tmp546.Type = TType.Struct;
              tmp546.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp546, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetAllServices_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp547 = new StringBuilder("GetAllServices_args(");
          int tmp548 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp548++) { tmp547.Append(", "); }
            tmp547.Append("Req: ");
            Req.ToString(tmp547);
          }
          tmp547.Append(')');
          return tmp547.ToString();
        }
      }


      public partial class GetAllServices_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetAllServices_result()
        {
        }

        public GetAllServices_result DeepCopy()
        {
          var tmp549 = new GetAllServices_result();
          if((Success != null) && __isset.success)
          {
            tmp549.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse)this.Success.DeepCopy();
          }
          tmp549.__isset.success = this.__isset.success;
          return tmp549;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp550 = new TStruct("GetAllServices_result");
            await oprot.WriteStructBeginAsync(tmp550, cancellationToken);
            var tmp551 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp551.Name = "Success";
                tmp551.Type = TType.Struct;
                tmp551.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp551, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetAllServices_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp552 = new StringBuilder("GetAllServices_result(");
          int tmp553 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp553++) { tmp552.Append(", "); }
            tmp552.Append("Success: ");
            Success.ToString(tmp552);
          }
          tmp552.Append(')');
          return tmp552.ToString();
        }
      }


      public partial class SetupService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SetupService_args()
        {
        }

        public SetupService_args DeepCopy()
        {
          var tmp554 = new SetupService_args();
          if((Req != null) && __isset.req)
          {
            tmp554.Req = (global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest)this.Req.DeepCopy();
          }
          tmp554.__isset.req = this.__isset.req;
          return tmp554;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp555 = new TStruct("SetupService_args");
            await oprot.WriteStructBeginAsync(tmp555, cancellationToken);
            var tmp556 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp556.Name = "req";
              tmp556.Type = TType.Struct;
              tmp556.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp556, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetupService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp557 = new StringBuilder("SetupService_args(");
          int tmp558 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp558++) { tmp557.Append(", "); }
            tmp557.Append("Req: ");
            Req.ToString(tmp557);
          }
          tmp557.Append(')');
          return tmp557.ToString();
        }
      }


      public partial class SetupService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SetupService_result()
        {
        }

        public SetupService_result DeepCopy()
        {
          var tmp559 = new SetupService_result();
          if((Success != null) && __isset.success)
          {
            tmp559.Success = (global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse)this.Success.DeepCopy();
          }
          tmp559.__isset.success = this.__isset.success;
          return tmp559;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp560 = new TStruct("SetupService_result");
            await oprot.WriteStructBeginAsync(tmp560, cancellationToken);
            var tmp561 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp561.Name = "Success";
                tmp561.Type = TType.Struct;
                tmp561.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp561, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetupService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp562 = new StringBuilder("SetupService_result(");
          int tmp563 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp563++) { tmp562.Append(", "); }
            tmp562.Append("Success: ");
            Success.ToString(tmp562);
          }
          tmp562.Append(')');
          return tmp562.ToString();
        }
      }

    }

  }
}
