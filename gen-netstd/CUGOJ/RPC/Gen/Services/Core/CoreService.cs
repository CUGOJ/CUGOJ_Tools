/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Services.Core
{
  public partial class CoreService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListResponse> OJGetProblemList(global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse> GetProblem(global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse> GetContestDetail(global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse> GetUserDetail(global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse> SaveUserDetail(global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.BaseResp> ChangePassword(global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.LogupResponse> Logup(global::CUGOJ.RPC.Gen.Services.Core.LogupRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse> SubmitProblem(global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse> GetContestSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse> GetProblemSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse> GetSubmissionDetail(global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse> GetAllServices(global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse> SetupService(global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RestartResponse> Restart(global::CUGOJ.RPC.Gen.Services.Core.RestartRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.AddServiceResponse> AddService(global::CUGOJ.RPC.Gen.Services.Core.AddServiceRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesResponse> GetUnRegisteredServices(global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDResponse> GetConnectionStringByServiceID(global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListResponse> OJGetProblemList(global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await send_OJGetProblemList(req, cancellationToken);
        return await recv_OJGetProblemList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OJGetProblemList(global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OJGetProblemList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp256 = new InternalStructs.OJGetProblemList_args() {
          Req = req,
        };
        
        await tmp256.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListResponse> recv_OJGetProblemList(CancellationToken cancellationToken = default)
      {
        
        var tmp257 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp257.Type == TMessageType.Exception)
        {
          var tmp258 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp258;
        }

        var tmp259 = new InternalStructs.OJGetProblemList_result();
        await tmp259.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp259.__isset.success)
        {
          return tmp259.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OJGetProblemList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await send_Ping(req, cancellationToken);
        return await recv_Ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp260 = new InternalStructs.Ping_args() {
          Req = req,
        };
        
        await tmp260.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> recv_Ping(CancellationToken cancellationToken = default)
      {
        
        var tmp261 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp261.Type == TMessageType.Exception)
        {
          var tmp262 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp262;
        }

        var tmp263 = new InternalStructs.Ping_result();
        await tmp263.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp263.__isset.success)
        {
          return tmp263.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_RegisterService(req, cancellationToken);
        return await recv_RegisterService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RegisterService(global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp264 = new InternalStructs.RegisterService_args() {
          Req = req,
        };
        
        await tmp264.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse> recv_RegisterService(CancellationToken cancellationToken = default)
      {
        
        var tmp265 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp265.Type == TMessageType.Exception)
        {
          var tmp266 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp266;
        }

        var tmp267 = new InternalStructs.RegisterService_result();
        await tmp267.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp267.__isset.success)
        {
          return tmp267.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_DiscoverService(req, cancellationToken);
        return await recv_DiscoverService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_DiscoverService(global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp268 = new InternalStructs.DiscoverService_args() {
          Req = req,
        };
        
        await tmp268.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse> recv_DiscoverService(CancellationToken cancellationToken = default)
      {
        
        var tmp269 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp269.Type == TMessageType.Exception)
        {
          var tmp270 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp270;
        }

        var tmp271 = new InternalStructs.DiscoverService_result();
        await tmp271.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp271.__isset.success)
        {
          return tmp271.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DiscoverService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse> GetProblem(global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblem(req, cancellationToken);
        return await recv_GetProblem(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblem(global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblem", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp272 = new InternalStructs.GetProblem_args() {
          Req = req,
        };
        
        await tmp272.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse> recv_GetProblem(CancellationToken cancellationToken = default)
      {
        
        var tmp273 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp273.Type == TMessageType.Exception)
        {
          var tmp274 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp274;
        }

        var tmp275 = new InternalStructs.GetProblem_result();
        await tmp275.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp275.__isset.success)
        {
          return tmp275.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblem failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestList(req, cancellationToken);
        return await recv_GetContestList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestList(global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp276 = new InternalStructs.GetContestList_args() {
          Req = req,
        };
        
        await tmp276.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse> recv_GetContestList(CancellationToken cancellationToken = default)
      {
        
        var tmp277 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp277.Type == TMessageType.Exception)
        {
          var tmp278 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp278;
        }

        var tmp279 = new InternalStructs.GetContestList_result();
        await tmp279.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp279.__isset.success)
        {
          return tmp279.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse> GetContestDetail(global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestDetail(req, cancellationToken);
        return await recv_GetContestDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestDetail(global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp280 = new InternalStructs.GetContestDetail_args() {
          Req = req,
        };
        
        await tmp280.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse> recv_GetContestDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp281 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp281.Type == TMessageType.Exception)
        {
          var tmp282 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp282;
        }

        var tmp283 = new InternalStructs.GetContestDetail_result();
        await tmp283.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp283.__isset.success)
        {
          return tmp283.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveProblemInfo(req, cancellationToken);
        return await recv_SaveProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp284 = new InternalStructs.SaveProblemInfo_args() {
          Req = req,
        };
        
        await tmp284.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse> recv_SaveProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp285 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp285.Type == TMessageType.Exception)
        {
          var tmp286 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp286;
        }

        var tmp287 = new InternalStructs.SaveProblemInfo_result();
        await tmp287.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp287.__isset.success)
        {
          return tmp287.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveContestInfo(req, cancellationToken);
        return await recv_SaveContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp288 = new InternalStructs.SaveContestInfo_args() {
          Req = req,
        };
        
        await tmp288.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse> recv_SaveContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp289 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp289.Type == TMessageType.Exception)
        {
          var tmp290 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp290;
        }

        var tmp291 = new InternalStructs.SaveContestInfo_result();
        await tmp291.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp291.__isset.success)
        {
          return tmp291.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse> GetUserDetail(global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetUserDetail(req, cancellationToken);
        return await recv_GetUserDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetUserDetail(global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetUserDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp292 = new InternalStructs.GetUserDetail_args() {
          Req = req,
        };
        
        await tmp292.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse> recv_GetUserDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp293 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp293.Type == TMessageType.Exception)
        {
          var tmp294 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp294;
        }

        var tmp295 = new InternalStructs.GetUserDetail_result();
        await tmp295.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp295.__isset.success)
        {
          return tmp295.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUserDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse> SaveUserDetail(global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveUserDetail(req, cancellationToken);
        return await recv_SaveUserDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveUserDetail(global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveUserDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp296 = new InternalStructs.SaveUserDetail_args() {
          Req = req,
        };
        
        await tmp296.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse> recv_SaveUserDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp297 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp297.Type == TMessageType.Exception)
        {
          var tmp298 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp298;
        }

        var tmp299 = new InternalStructs.SaveUserDetail_result();
        await tmp299.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp299.__isset.success)
        {
          return tmp299.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveUserDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.BaseResp> ChangePassword(global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest req, CancellationToken cancellationToken = default)
      {
        await send_ChangePassword(req, cancellationToken);
        return await recv_ChangePassword(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ChangePassword(global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ChangePassword", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp300 = new InternalStructs.ChangePassword_args() {
          Req = req,
        };
        
        await tmp300.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.BaseResp> recv_ChangePassword(CancellationToken cancellationToken = default)
      {
        
        var tmp301 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp301.Type == TMessageType.Exception)
        {
          var tmp302 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp302;
        }

        var tmp303 = new InternalStructs.ChangePassword_result();
        await tmp303.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp303.__isset.success)
        {
          return tmp303.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ChangePassword failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.LogupResponse> Logup(global::CUGOJ.RPC.Gen.Services.Core.LogupRequest req, CancellationToken cancellationToken = default)
      {
        await send_Logup(req, cancellationToken);
        return await recv_Logup(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Logup(global::CUGOJ.RPC.Gen.Services.Core.LogupRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Logup", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp304 = new InternalStructs.Logup_args() {
          Req = req,
        };
        
        await tmp304.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.LogupResponse> recv_Logup(CancellationToken cancellationToken = default)
      {
        
        var tmp305 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp305.Type == TMessageType.Exception)
        {
          var tmp306 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp306;
        }

        var tmp307 = new InternalStructs.Logup_result();
        await tmp307.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp307.__isset.success)
        {
          return tmp307.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Logup failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse> SubmitProblem(global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest req, CancellationToken cancellationToken = default)
      {
        await send_SubmitProblem(req, cancellationToken);
        return await recv_SubmitProblem(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SubmitProblem(global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SubmitProblem", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp308 = new InternalStructs.SubmitProblem_args() {
          Req = req,
        };
        
        await tmp308.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse> recv_SubmitProblem(CancellationToken cancellationToken = default)
      {
        
        var tmp309 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp309.Type == TMessageType.Exception)
        {
          var tmp310 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp310;
        }

        var tmp311 = new InternalStructs.SubmitProblem_result();
        await tmp311.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp311.__isset.success)
        {
          return tmp311.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SubmitProblem failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse> GetContestSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestSubmissionList(req, cancellationToken);
        return await recv_GetContestSubmissionList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestSubmissionList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp312 = new InternalStructs.GetContestSubmissionList_args() {
          Req = req,
        };
        
        await tmp312.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse> recv_GetContestSubmissionList(CancellationToken cancellationToken = default)
      {
        
        var tmp313 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp313.Type == TMessageType.Exception)
        {
          var tmp314 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp314;
        }

        var tmp315 = new InternalStructs.GetContestSubmissionList_result();
        await tmp315.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp315.__isset.success)
        {
          return tmp315.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestSubmissionList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse> GetProblemSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblemSubmissionList(req, cancellationToken);
        return await recv_GetProblemSubmissionList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblemSubmissionList(global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblemSubmissionList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp316 = new InternalStructs.GetProblemSubmissionList_args() {
          Req = req,
        };
        
        await tmp316.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse> recv_GetProblemSubmissionList(CancellationToken cancellationToken = default)
      {
        
        var tmp317 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp317.Type == TMessageType.Exception)
        {
          var tmp318 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp318;
        }

        var tmp319 = new InternalStructs.GetProblemSubmissionList_result();
        await tmp319.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp319.__isset.success)
        {
          return tmp319.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblemSubmissionList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse> GetSubmissionDetail(global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetSubmissionDetail(req, cancellationToken);
        return await recv_GetSubmissionDetail(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSubmissionDetail(global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSubmissionDetail", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp320 = new InternalStructs.GetSubmissionDetail_args() {
          Req = req,
        };
        
        await tmp320.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse> recv_GetSubmissionDetail(CancellationToken cancellationToken = default)
      {
        
        var tmp321 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp321.Type == TMessageType.Exception)
        {
          var tmp322 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp322;
        }

        var tmp323 = new InternalStructs.GetSubmissionDetail_result();
        await tmp323.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp323.__isset.success)
        {
          return tmp323.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSubmissionDetail failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse> GetAllServices(global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetAllServices(req, cancellationToken);
        return await recv_GetAllServices(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetAllServices(global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetAllServices", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp324 = new InternalStructs.GetAllServices_args() {
          Req = req,
        };
        
        await tmp324.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse> recv_GetAllServices(CancellationToken cancellationToken = default)
      {
        
        var tmp325 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp325.Type == TMessageType.Exception)
        {
          var tmp326 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp326;
        }

        var tmp327 = new InternalStructs.GetAllServices_result();
        await tmp327.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp327.__isset.success)
        {
          return tmp327.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetAllServices failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse> SetupService(global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_SetupService(req, cancellationToken);
        return await recv_SetupService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetupService(global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetupService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp328 = new InternalStructs.SetupService_args() {
          Req = req,
        };
        
        await tmp328.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse> recv_SetupService(CancellationToken cancellationToken = default)
      {
        
        var tmp329 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp329.Type == TMessageType.Exception)
        {
          var tmp330 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp330;
        }

        var tmp331 = new InternalStructs.SetupService_result();
        await tmp331.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp331.__isset.success)
        {
          return tmp331.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetupService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RestartResponse> Restart(global::CUGOJ.RPC.Gen.Services.Core.RestartRequest req, CancellationToken cancellationToken = default)
      {
        await send_Restart(req, cancellationToken);
        return await recv_Restart(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Restart(global::CUGOJ.RPC.Gen.Services.Core.RestartRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Restart", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp332 = new InternalStructs.Restart_args() {
          Req = req,
        };
        
        await tmp332.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.RestartResponse> recv_Restart(CancellationToken cancellationToken = default)
      {
        
        var tmp333 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp333.Type == TMessageType.Exception)
        {
          var tmp334 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp334;
        }

        var tmp335 = new InternalStructs.Restart_result();
        await tmp335.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp335.__isset.success)
        {
          return tmp335.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Restart failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.AddServiceResponse> AddService(global::CUGOJ.RPC.Gen.Services.Core.AddServiceRequest req, CancellationToken cancellationToken = default)
      {
        await send_AddService(req, cancellationToken);
        return await recv_AddService(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_AddService(global::CUGOJ.RPC.Gen.Services.Core.AddServiceRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AddService", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp336 = new InternalStructs.AddService_args() {
          Req = req,
        };
        
        await tmp336.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.AddServiceResponse> recv_AddService(CancellationToken cancellationToken = default)
      {
        
        var tmp337 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp337.Type == TMessageType.Exception)
        {
          var tmp338 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp338;
        }

        var tmp339 = new InternalStructs.AddService_result();
        await tmp339.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp339.__isset.success)
        {
          return tmp339.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AddService failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesResponse> GetUnRegisteredServices(global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetUnRegisteredServices(req, cancellationToken);
        return await recv_GetUnRegisteredServices(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetUnRegisteredServices(global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetUnRegisteredServices", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp340 = new InternalStructs.GetUnRegisteredServices_args() {
          Req = req,
        };
        
        await tmp340.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesResponse> recv_GetUnRegisteredServices(CancellationToken cancellationToken = default)
      {
        
        var tmp341 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp341.Type == TMessageType.Exception)
        {
          var tmp342 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp342;
        }

        var tmp343 = new InternalStructs.GetUnRegisteredServices_result();
        await tmp343.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp343.__isset.success)
        {
          return tmp343.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetUnRegisteredServices failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDResponse> GetConnectionStringByServiceID(global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetConnectionStringByServiceID(req, cancellationToken);
        return await recv_GetConnectionStringByServiceID(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetConnectionStringByServiceID(global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetConnectionStringByServiceID", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp344 = new InternalStructs.GetConnectionStringByServiceID_args() {
          Req = req,
        };
        
        await tmp344.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDResponse> recv_GetConnectionStringByServiceID(CancellationToken cancellationToken = default)
      {
        
        var tmp345 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp345.Type == TMessageType.Exception)
        {
          var tmp346 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp346;
        }

        var tmp347 = new InternalStructs.GetConnectionStringByServiceID_result();
        await tmp347.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp347.__isset.success)
        {
          return tmp347.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetConnectionStringByServiceID failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["OJGetProblemList"] = OJGetProblemList_ProcessAsync;
        processMap_["Ping"] = Ping_ProcessAsync;
        processMap_["RegisterService"] = RegisterService_ProcessAsync;
        processMap_["DiscoverService"] = DiscoverService_ProcessAsync;
        processMap_["GetProblem"] = GetProblem_ProcessAsync;
        processMap_["GetContestList"] = GetContestList_ProcessAsync;
        processMap_["GetContestDetail"] = GetContestDetail_ProcessAsync;
        processMap_["SaveProblemInfo"] = SaveProblemInfo_ProcessAsync;
        processMap_["SaveContestInfo"] = SaveContestInfo_ProcessAsync;
        processMap_["GetUserDetail"] = GetUserDetail_ProcessAsync;
        processMap_["SaveUserDetail"] = SaveUserDetail_ProcessAsync;
        processMap_["ChangePassword"] = ChangePassword_ProcessAsync;
        processMap_["Logup"] = Logup_ProcessAsync;
        processMap_["SubmitProblem"] = SubmitProblem_ProcessAsync;
        processMap_["GetContestSubmissionList"] = GetContestSubmissionList_ProcessAsync;
        processMap_["GetProblemSubmissionList"] = GetProblemSubmissionList_ProcessAsync;
        processMap_["GetSubmissionDetail"] = GetSubmissionDetail_ProcessAsync;
        processMap_["GetAllServices"] = GetAllServices_ProcessAsync;
        processMap_["SetupService"] = SetupService_ProcessAsync;
        processMap_["Restart"] = Restart_ProcessAsync;
        processMap_["AddService"] = AddService_ProcessAsync;
        processMap_["GetUnRegisteredServices"] = GetUnRegisteredServices_ProcessAsync;
        processMap_["GetConnectionStringByServiceID"] = GetConnectionStringByServiceID_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task OJGetProblemList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp348 = new InternalStructs.OJGetProblemList_args();
        await tmp348.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp349 = new InternalStructs.OJGetProblemList_result();
        try
        {
          tmp349.Success = await _iAsync.OJGetProblemList(tmp348.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OJGetProblemList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp349.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp350)
        {
          var tmp351 = $"Error occurred in {GetType().FullName}: {tmp350.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp350, tmp351);
          else
            Console.Error.WriteLine(tmp351);
          var tmp352 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OJGetProblemList", TMessageType.Exception, seqid), cancellationToken);
          await tmp352.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp353 = new InternalStructs.Ping_args();
        await tmp353.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp354 = new InternalStructs.Ping_result();
        try
        {
          tmp354.Success = await _iAsync.Ping(tmp353.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp354.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp355)
        {
          var tmp356 = $"Error occurred in {GetType().FullName}: {tmp355.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp355, tmp356);
          else
            Console.Error.WriteLine(tmp356);
          var tmp357 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp357.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RegisterService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp358 = new InternalStructs.RegisterService_args();
        await tmp358.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp359 = new InternalStructs.RegisterService_result();
        try
        {
          tmp359.Success = await _iAsync.RegisterService(tmp358.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp359.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp360)
        {
          var tmp361 = $"Error occurred in {GetType().FullName}: {tmp360.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp360, tmp361);
          else
            Console.Error.WriteLine(tmp361);
          var tmp362 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterService", TMessageType.Exception, seqid), cancellationToken);
          await tmp362.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task DiscoverService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp363 = new InternalStructs.DiscoverService_args();
        await tmp363.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp364 = new InternalStructs.DiscoverService_result();
        try
        {
          tmp364.Success = await _iAsync.DiscoverService(tmp363.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp364.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp365)
        {
          var tmp366 = $"Error occurred in {GetType().FullName}: {tmp365.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp365, tmp366);
          else
            Console.Error.WriteLine(tmp366);
          var tmp367 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DiscoverService", TMessageType.Exception, seqid), cancellationToken);
          await tmp367.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp368 = new InternalStructs.GetProblem_args();
        await tmp368.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp369 = new InternalStructs.GetProblem_result();
        try
        {
          tmp369.Success = await _iAsync.GetProblem(tmp368.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblem", TMessageType.Reply, seqid), cancellationToken); 
          await tmp369.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp370)
        {
          var tmp371 = $"Error occurred in {GetType().FullName}: {tmp370.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp370, tmp371);
          else
            Console.Error.WriteLine(tmp371);
          var tmp372 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblem", TMessageType.Exception, seqid), cancellationToken);
          await tmp372.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp373 = new InternalStructs.GetContestList_args();
        await tmp373.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp374 = new InternalStructs.GetContestList_result();
        try
        {
          tmp374.Success = await _iAsync.GetContestList(tmp373.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp374.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp375)
        {
          var tmp376 = $"Error occurred in {GetType().FullName}: {tmp375.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp375, tmp376);
          else
            Console.Error.WriteLine(tmp376);
          var tmp377 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Exception, seqid), cancellationToken);
          await tmp377.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp378 = new InternalStructs.GetContestDetail_args();
        await tmp378.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp379 = new InternalStructs.GetContestDetail_result();
        try
        {
          tmp379.Success = await _iAsync.GetContestDetail(tmp378.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp379.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp380)
        {
          var tmp381 = $"Error occurred in {GetType().FullName}: {tmp380.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp380, tmp381);
          else
            Console.Error.WriteLine(tmp381);
          var tmp382 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp382.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp383 = new InternalStructs.SaveProblemInfo_args();
        await tmp383.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp384 = new InternalStructs.SaveProblemInfo_result();
        try
        {
          tmp384.Success = await _iAsync.SaveProblemInfo(tmp383.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp384.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp385)
        {
          var tmp386 = $"Error occurred in {GetType().FullName}: {tmp385.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp385, tmp386);
          else
            Console.Error.WriteLine(tmp386);
          var tmp387 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp387.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp388 = new InternalStructs.SaveContestInfo_args();
        await tmp388.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp389 = new InternalStructs.SaveContestInfo_result();
        try
        {
          tmp389.Success = await _iAsync.SaveContestInfo(tmp388.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp389.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp390)
        {
          var tmp391 = $"Error occurred in {GetType().FullName}: {tmp390.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp390, tmp391);
          else
            Console.Error.WriteLine(tmp391);
          var tmp392 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp392.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetUserDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp393 = new InternalStructs.GetUserDetail_args();
        await tmp393.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp394 = new InternalStructs.GetUserDetail_result();
        try
        {
          tmp394.Success = await _iAsync.GetUserDetail(tmp393.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp394.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp395)
        {
          var tmp396 = $"Error occurred in {GetType().FullName}: {tmp395.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp395, tmp396);
          else
            Console.Error.WriteLine(tmp396);
          var tmp397 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetUserDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp397.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveUserDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp398 = new InternalStructs.SaveUserDetail_args();
        await tmp398.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp399 = new InternalStructs.SaveUserDetail_result();
        try
        {
          tmp399.Success = await _iAsync.SaveUserDetail(tmp398.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp399.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp400)
        {
          var tmp401 = $"Error occurred in {GetType().FullName}: {tmp400.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp400, tmp401);
          else
            Console.Error.WriteLine(tmp401);
          var tmp402 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp402.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ChangePassword_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp403 = new InternalStructs.ChangePassword_args();
        await tmp403.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp404 = new InternalStructs.ChangePassword_result();
        try
        {
          tmp404.Success = await _iAsync.ChangePassword(tmp403.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ChangePassword", TMessageType.Reply, seqid), cancellationToken); 
          await tmp404.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp405)
        {
          var tmp406 = $"Error occurred in {GetType().FullName}: {tmp405.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp405, tmp406);
          else
            Console.Error.WriteLine(tmp406);
          var tmp407 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ChangePassword", TMessageType.Exception, seqid), cancellationToken);
          await tmp407.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Logup_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp408 = new InternalStructs.Logup_args();
        await tmp408.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp409 = new InternalStructs.Logup_result();
        try
        {
          tmp409.Success = await _iAsync.Logup(tmp408.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Logup", TMessageType.Reply, seqid), cancellationToken); 
          await tmp409.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp410)
        {
          var tmp411 = $"Error occurred in {GetType().FullName}: {tmp410.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp410, tmp411);
          else
            Console.Error.WriteLine(tmp411);
          var tmp412 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Logup", TMessageType.Exception, seqid), cancellationToken);
          await tmp412.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SubmitProblem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp413 = new InternalStructs.SubmitProblem_args();
        await tmp413.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp414 = new InternalStructs.SubmitProblem_result();
        try
        {
          tmp414.Success = await _iAsync.SubmitProblem(tmp413.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SubmitProblem", TMessageType.Reply, seqid), cancellationToken); 
          await tmp414.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp415)
        {
          var tmp416 = $"Error occurred in {GetType().FullName}: {tmp415.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp415, tmp416);
          else
            Console.Error.WriteLine(tmp416);
          var tmp417 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SubmitProblem", TMessageType.Exception, seqid), cancellationToken);
          await tmp417.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestSubmissionList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp418 = new InternalStructs.GetContestSubmissionList_args();
        await tmp418.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp419 = new InternalStructs.GetContestSubmissionList_result();
        try
        {
          tmp419.Success = await _iAsync.GetContestSubmissionList(tmp418.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestSubmissionList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp419.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp420)
        {
          var tmp421 = $"Error occurred in {GetType().FullName}: {tmp420.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp420, tmp421);
          else
            Console.Error.WriteLine(tmp421);
          var tmp422 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestSubmissionList", TMessageType.Exception, seqid), cancellationToken);
          await tmp422.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblemSubmissionList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp423 = new InternalStructs.GetProblemSubmissionList_args();
        await tmp423.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp424 = new InternalStructs.GetProblemSubmissionList_result();
        try
        {
          tmp424.Success = await _iAsync.GetProblemSubmissionList(tmp423.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemSubmissionList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp424.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp425)
        {
          var tmp426 = $"Error occurred in {GetType().FullName}: {tmp425.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp425, tmp426);
          else
            Console.Error.WriteLine(tmp426);
          var tmp427 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemSubmissionList", TMessageType.Exception, seqid), cancellationToken);
          await tmp427.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSubmissionDetail_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp428 = new InternalStructs.GetSubmissionDetail_args();
        await tmp428.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp429 = new InternalStructs.GetSubmissionDetail_result();
        try
        {
          tmp429.Success = await _iAsync.GetSubmissionDetail(tmp428.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionDetail", TMessageType.Reply, seqid), cancellationToken); 
          await tmp429.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp430)
        {
          var tmp431 = $"Error occurred in {GetType().FullName}: {tmp430.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp430, tmp431);
          else
            Console.Error.WriteLine(tmp431);
          var tmp432 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionDetail", TMessageType.Exception, seqid), cancellationToken);
          await tmp432.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetAllServices_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp433 = new InternalStructs.GetAllServices_args();
        await tmp433.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp434 = new InternalStructs.GetAllServices_result();
        try
        {
          tmp434.Success = await _iAsync.GetAllServices(tmp433.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetAllServices", TMessageType.Reply, seqid), cancellationToken); 
          await tmp434.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp435)
        {
          var tmp436 = $"Error occurred in {GetType().FullName}: {tmp435.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp435, tmp436);
          else
            Console.Error.WriteLine(tmp436);
          var tmp437 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetAllServices", TMessageType.Exception, seqid), cancellationToken);
          await tmp437.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetupService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp438 = new InternalStructs.SetupService_args();
        await tmp438.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp439 = new InternalStructs.SetupService_result();
        try
        {
          tmp439.Success = await _iAsync.SetupService(tmp438.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SetupService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp439.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp440)
        {
          var tmp441 = $"Error occurred in {GetType().FullName}: {tmp440.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp440, tmp441);
          else
            Console.Error.WriteLine(tmp441);
          var tmp442 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetupService", TMessageType.Exception, seqid), cancellationToken);
          await tmp442.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Restart_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp443 = new InternalStructs.Restart_args();
        await tmp443.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp444 = new InternalStructs.Restart_result();
        try
        {
          tmp444.Success = await _iAsync.Restart(tmp443.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Restart", TMessageType.Reply, seqid), cancellationToken); 
          await tmp444.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp445)
        {
          var tmp446 = $"Error occurred in {GetType().FullName}: {tmp445.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp445, tmp446);
          else
            Console.Error.WriteLine(tmp446);
          var tmp447 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Restart", TMessageType.Exception, seqid), cancellationToken);
          await tmp447.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task AddService_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp448 = new InternalStructs.AddService_args();
        await tmp448.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp449 = new InternalStructs.AddService_result();
        try
        {
          tmp449.Success = await _iAsync.AddService(tmp448.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("AddService", TMessageType.Reply, seqid), cancellationToken); 
          await tmp449.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp450)
        {
          var tmp451 = $"Error occurred in {GetType().FullName}: {tmp450.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp450, tmp451);
          else
            Console.Error.WriteLine(tmp451);
          var tmp452 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AddService", TMessageType.Exception, seqid), cancellationToken);
          await tmp452.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetUnRegisteredServices_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp453 = new InternalStructs.GetUnRegisteredServices_args();
        await tmp453.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp454 = new InternalStructs.GetUnRegisteredServices_result();
        try
        {
          tmp454.Success = await _iAsync.GetUnRegisteredServices(tmp453.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetUnRegisteredServices", TMessageType.Reply, seqid), cancellationToken); 
          await tmp454.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp455)
        {
          var tmp456 = $"Error occurred in {GetType().FullName}: {tmp455.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp455, tmp456);
          else
            Console.Error.WriteLine(tmp456);
          var tmp457 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetUnRegisteredServices", TMessageType.Exception, seqid), cancellationToken);
          await tmp457.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetConnectionStringByServiceID_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp458 = new InternalStructs.GetConnectionStringByServiceID_args();
        await tmp458.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp459 = new InternalStructs.GetConnectionStringByServiceID_result();
        try
        {
          tmp459.Success = await _iAsync.GetConnectionStringByServiceID(tmp458.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetConnectionStringByServiceID", TMessageType.Reply, seqid), cancellationToken); 
          await tmp459.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp460)
        {
          var tmp461 = $"Error occurred in {GetType().FullName}: {tmp460.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp460, tmp461);
          else
            Console.Error.WriteLine(tmp461);
          var tmp462 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetConnectionStringByServiceID", TMessageType.Exception, seqid), cancellationToken);
          await tmp462.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class OJGetProblemList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public OJGetProblemList_args()
        {
        }

        public OJGetProblemList_args DeepCopy()
        {
          var tmp463 = new OJGetProblemList_args();
          if((Req != null) && __isset.req)
          {
            tmp463.Req = (global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListRequest)this.Req.DeepCopy();
          }
          tmp463.__isset.req = this.__isset.req;
          return tmp463;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp464 = new TStruct("OJGetProblemList_args");
            await oprot.WriteStructBeginAsync(tmp464, cancellationToken);
            var tmp465 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp465.Name = "req";
              tmp465.Type = TType.Struct;
              tmp465.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp465, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OJGetProblemList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp466 = new StringBuilder("OJGetProblemList_args(");
          int tmp467 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp467++) { tmp466.Append(", "); }
            tmp466.Append("Req: ");
            Req.ToString(tmp466);
          }
          tmp466.Append(')');
          return tmp466.ToString();
        }
      }


      public partial class OJGetProblemList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public OJGetProblemList_result()
        {
        }

        public OJGetProblemList_result DeepCopy()
        {
          var tmp468 = new OJGetProblemList_result();
          if((Success != null) && __isset.success)
          {
            tmp468.Success = (global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListResponse)this.Success.DeepCopy();
          }
          tmp468.__isset.success = this.__isset.success;
          return tmp468;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.OJGetProblemListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp469 = new TStruct("OJGetProblemList_result");
            await oprot.WriteStructBeginAsync(tmp469, cancellationToken);
            var tmp470 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp470.Name = "Success";
                tmp470.Type = TType.Struct;
                tmp470.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OJGetProblemList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp471 = new StringBuilder("OJGetProblemList_result(");
          int tmp472 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp472++) { tmp471.Append(", "); }
            tmp471.Append("Success: ");
            Success.ToString(tmp471);
          }
          tmp471.Append(')');
          return tmp471.ToString();
        }
      }


      public partial class Ping_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingRequest _req;

        public global::CUGOJ.RPC.Gen.Base.PingRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Ping_args()
        {
        }

        public Ping_args DeepCopy()
        {
          var tmp473 = new Ping_args();
          if((Req != null) && __isset.req)
          {
            tmp473.Req = (global::CUGOJ.RPC.Gen.Base.PingRequest)this.Req.DeepCopy();
          }
          tmp473.__isset.req = this.__isset.req;
          return tmp473;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Base.PingRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp474 = new TStruct("Ping_args");
            await oprot.WriteStructBeginAsync(tmp474, cancellationToken);
            var tmp475 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp475.Name = "req";
              tmp475.Type = TType.Struct;
              tmp475.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp475, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp476 = new StringBuilder("Ping_args(");
          int tmp477 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp477++) { tmp476.Append(", "); }
            tmp476.Append("Req: ");
            Req.ToString(tmp476);
          }
          tmp476.Append(')');
          return tmp476.ToString();
        }
      }


      public partial class Ping_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingResponse _success;

        public global::CUGOJ.RPC.Gen.Base.PingResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Ping_result()
        {
        }

        public Ping_result DeepCopy()
        {
          var tmp478 = new Ping_result();
          if((Success != null) && __isset.success)
          {
            tmp478.Success = (global::CUGOJ.RPC.Gen.Base.PingResponse)this.Success.DeepCopy();
          }
          tmp478.__isset.success = this.__isset.success;
          return tmp478;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.PingResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp479 = new TStruct("Ping_result");
            await oprot.WriteStructBeginAsync(tmp479, cancellationToken);
            var tmp480 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp480.Name = "Success";
                tmp480.Type = TType.Struct;
                tmp480.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp481 = new StringBuilder("Ping_result(");
          int tmp482 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp482++) { tmp481.Append(", "); }
            tmp481.Append("Success: ");
            Success.ToString(tmp481);
          }
          tmp481.Append(')');
          return tmp481.ToString();
        }
      }


      public partial class RegisterService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public RegisterService_args()
        {
        }

        public RegisterService_args DeepCopy()
        {
          var tmp483 = new RegisterService_args();
          if((Req != null) && __isset.req)
          {
            tmp483.Req = (global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest)this.Req.DeepCopy();
          }
          tmp483.__isset.req = this.__isset.req;
          return tmp483;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp484 = new TStruct("RegisterService_args");
            await oprot.WriteStructBeginAsync(tmp484, cancellationToken);
            var tmp485 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp485.Name = "req";
              tmp485.Type = TType.Struct;
              tmp485.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp485, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RegisterService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp486 = new StringBuilder("RegisterService_args(");
          int tmp487 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp487++) { tmp486.Append(", "); }
            tmp486.Append("Req: ");
            Req.ToString(tmp486);
          }
          tmp486.Append(')');
          return tmp486.ToString();
        }
      }


      public partial class RegisterService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public RegisterService_result()
        {
        }

        public RegisterService_result DeepCopy()
        {
          var tmp488 = new RegisterService_result();
          if((Success != null) && __isset.success)
          {
            tmp488.Success = (global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse)this.Success.DeepCopy();
          }
          tmp488.__isset.success = this.__isset.success;
          return tmp488;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.RegisterServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp489 = new TStruct("RegisterService_result");
            await oprot.WriteStructBeginAsync(tmp489, cancellationToken);
            var tmp490 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp490.Name = "Success";
                tmp490.Type = TType.Struct;
                tmp490.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp490, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RegisterService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp491 = new StringBuilder("RegisterService_result(");
          int tmp492 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp492++) { tmp491.Append(", "); }
            tmp491.Append("Success: ");
            Success.ToString(tmp491);
          }
          tmp491.Append(')');
          return tmp491.ToString();
        }
      }


      public partial class DiscoverService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public DiscoverService_args()
        {
        }

        public DiscoverService_args DeepCopy()
        {
          var tmp493 = new DiscoverService_args();
          if((Req != null) && __isset.req)
          {
            tmp493.Req = (global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest)this.Req.DeepCopy();
          }
          tmp493.__isset.req = this.__isset.req;
          return tmp493;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp494 = new TStruct("DiscoverService_args");
            await oprot.WriteStructBeginAsync(tmp494, cancellationToken);
            var tmp495 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp495.Name = "req";
              tmp495.Type = TType.Struct;
              tmp495.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp495, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DiscoverService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp496 = new StringBuilder("DiscoverService_args(");
          int tmp497 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp497++) { tmp496.Append(", "); }
            tmp496.Append("Req: ");
            Req.ToString(tmp496);
          }
          tmp496.Append(')');
          return tmp496.ToString();
        }
      }


      public partial class DiscoverService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public DiscoverService_result()
        {
        }

        public DiscoverService_result DeepCopy()
        {
          var tmp498 = new DiscoverService_result();
          if((Success != null) && __isset.success)
          {
            tmp498.Success = (global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse)this.Success.DeepCopy();
          }
          tmp498.__isset.success = this.__isset.success;
          return tmp498;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.DiscoverServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp499 = new TStruct("DiscoverService_result");
            await oprot.WriteStructBeginAsync(tmp499, cancellationToken);
            var tmp500 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp500.Name = "Success";
                tmp500.Type = TType.Struct;
                tmp500.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp500, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DiscoverService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp501 = new StringBuilder("DiscoverService_result(");
          int tmp502 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp502++) { tmp501.Append(", "); }
            tmp501.Append("Success: ");
            Success.ToString(tmp501);
          }
          tmp501.Append(')');
          return tmp501.ToString();
        }
      }


      public partial class GetProblem_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblem_args()
        {
        }

        public GetProblem_args DeepCopy()
        {
          var tmp503 = new GetProblem_args();
          if((Req != null) && __isset.req)
          {
            tmp503.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest)this.Req.DeepCopy();
          }
          tmp503.__isset.req = this.__isset.req;
          return tmp503;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp504 = new TStruct("GetProblem_args");
            await oprot.WriteStructBeginAsync(tmp504, cancellationToken);
            var tmp505 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp505.Name = "req";
              tmp505.Type = TType.Struct;
              tmp505.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp505, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblem_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp506 = new StringBuilder("GetProblem_args(");
          int tmp507 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp507++) { tmp506.Append(", "); }
            tmp506.Append("Req: ");
            Req.ToString(tmp506);
          }
          tmp506.Append(')');
          return tmp506.ToString();
        }
      }


      public partial class GetProblem_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblem_result()
        {
        }

        public GetProblem_result DeepCopy()
        {
          var tmp508 = new GetProblem_result();
          if((Success != null) && __isset.success)
          {
            tmp508.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse)this.Success.DeepCopy();
          }
          tmp508.__isset.success = this.__isset.success;
          return tmp508;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp509 = new TStruct("GetProblem_result");
            await oprot.WriteStructBeginAsync(tmp509, cancellationToken);
            var tmp510 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp510.Name = "Success";
                tmp510.Type = TType.Struct;
                tmp510.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp510, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblem_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp511 = new StringBuilder("GetProblem_result(");
          int tmp512 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp512++) { tmp511.Append(", "); }
            tmp511.Append("Success: ");
            Success.ToString(tmp511);
          }
          tmp511.Append(')');
          return tmp511.ToString();
        }
      }


      public partial class GetContestList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestList_args()
        {
        }

        public GetContestList_args DeepCopy()
        {
          var tmp513 = new GetContestList_args();
          if((Req != null) && __isset.req)
          {
            tmp513.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest)this.Req.DeepCopy();
          }
          tmp513.__isset.req = this.__isset.req;
          return tmp513;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetContestListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp514 = new TStruct("GetContestList_args");
            await oprot.WriteStructBeginAsync(tmp514, cancellationToken);
            var tmp515 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp515.Name = "req";
              tmp515.Type = TType.Struct;
              tmp515.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp515, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp516 = new StringBuilder("GetContestList_args(");
          int tmp517 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp517++) { tmp516.Append(", "); }
            tmp516.Append("Req: ");
            Req.ToString(tmp516);
          }
          tmp516.Append(')');
          return tmp516.ToString();
        }
      }


      public partial class GetContestList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestList_result()
        {
        }

        public GetContestList_result DeepCopy()
        {
          var tmp518 = new GetContestList_result();
          if((Success != null) && __isset.success)
          {
            tmp518.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse)this.Success.DeepCopy();
          }
          tmp518.__isset.success = this.__isset.success;
          return tmp518;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetContestListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp519 = new TStruct("GetContestList_result");
            await oprot.WriteStructBeginAsync(tmp519, cancellationToken);
            var tmp520 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp520.Name = "Success";
                tmp520.Type = TType.Struct;
                tmp520.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp520, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp521 = new StringBuilder("GetContestList_result(");
          int tmp522 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp522++) { tmp521.Append(", "); }
            tmp521.Append("Success: ");
            Success.ToString(tmp521);
          }
          tmp521.Append(')');
          return tmp521.ToString();
        }
      }


      public partial class GetContestDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestDetail_args()
        {
        }

        public GetContestDetail_args DeepCopy()
        {
          var tmp523 = new GetContestDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp523.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest)this.Req.DeepCopy();
          }
          tmp523.__isset.req = this.__isset.req;
          return tmp523;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp524 = new TStruct("GetContestDetail_args");
            await oprot.WriteStructBeginAsync(tmp524, cancellationToken);
            var tmp525 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp525.Name = "req";
              tmp525.Type = TType.Struct;
              tmp525.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp525, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp526 = new StringBuilder("GetContestDetail_args(");
          int tmp527 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp527++) { tmp526.Append(", "); }
            tmp526.Append("Req: ");
            Req.ToString(tmp526);
          }
          tmp526.Append(')');
          return tmp526.ToString();
        }
      }


      public partial class GetContestDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestDetail_result()
        {
        }

        public GetContestDetail_result DeepCopy()
        {
          var tmp528 = new GetContestDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp528.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse)this.Success.DeepCopy();
          }
          tmp528.__isset.success = this.__isset.success;
          return tmp528;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetContestDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp529 = new TStruct("GetContestDetail_result");
            await oprot.WriteStructBeginAsync(tmp529, cancellationToken);
            var tmp530 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp530.Name = "Success";
                tmp530.Type = TType.Struct;
                tmp530.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp530, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp531 = new StringBuilder("GetContestDetail_result(");
          int tmp532 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp532++) { tmp531.Append(", "); }
            tmp531.Append("Success: ");
            Success.ToString(tmp531);
          }
          tmp531.Append(')');
          return tmp531.ToString();
        }
      }


      public partial class SaveProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveProblemInfo_args()
        {
        }

        public SaveProblemInfo_args DeepCopy()
        {
          var tmp533 = new SaveProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp533.Req = (global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp533.__isset.req = this.__isset.req;
          return tmp533;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp534 = new TStruct("SaveProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp534, cancellationToken);
            var tmp535 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp535.Name = "req";
              tmp535.Type = TType.Struct;
              tmp535.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp535, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp536 = new StringBuilder("SaveProblemInfo_args(");
          int tmp537 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp537++) { tmp536.Append(", "); }
            tmp536.Append("Req: ");
            Req.ToString(tmp536);
          }
          tmp536.Append(')');
          return tmp536.ToString();
        }
      }


      public partial class SaveProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveProblemInfo_result()
        {
        }

        public SaveProblemInfo_result DeepCopy()
        {
          var tmp538 = new SaveProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp538.Success = (global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp538.__isset.success = this.__isset.success;
          return tmp538;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SaveProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp539 = new TStruct("SaveProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp539, cancellationToken);
            var tmp540 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp540.Name = "Success";
                tmp540.Type = TType.Struct;
                tmp540.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp540, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp541 = new StringBuilder("SaveProblemInfo_result(");
          int tmp542 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp542++) { tmp541.Append(", "); }
            tmp541.Append("Success: ");
            Success.ToString(tmp541);
          }
          tmp541.Append(')');
          return tmp541.ToString();
        }
      }


      public partial class SaveContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveContestInfo_args()
        {
        }

        public SaveContestInfo_args DeepCopy()
        {
          var tmp543 = new SaveContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp543.Req = (global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest)this.Req.DeepCopy();
          }
          tmp543.__isset.req = this.__isset.req;
          return tmp543;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp544 = new TStruct("SaveContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp544, cancellationToken);
            var tmp545 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp545.Name = "req";
              tmp545.Type = TType.Struct;
              tmp545.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp545, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp546 = new StringBuilder("SaveContestInfo_args(");
          int tmp547 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp547++) { tmp546.Append(", "); }
            tmp546.Append("Req: ");
            Req.ToString(tmp546);
          }
          tmp546.Append(')');
          return tmp546.ToString();
        }
      }


      public partial class SaveContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveContestInfo_result()
        {
        }

        public SaveContestInfo_result DeepCopy()
        {
          var tmp548 = new SaveContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp548.Success = (global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse)this.Success.DeepCopy();
          }
          tmp548.__isset.success = this.__isset.success;
          return tmp548;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SaveContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp549 = new TStruct("SaveContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp549, cancellationToken);
            var tmp550 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp550.Name = "Success";
                tmp550.Type = TType.Struct;
                tmp550.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp550, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp551 = new StringBuilder("SaveContestInfo_result(");
          int tmp552 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp552++) { tmp551.Append(", "); }
            tmp551.Append("Success: ");
            Success.ToString(tmp551);
          }
          tmp551.Append(')');
          return tmp551.ToString();
        }
      }


      public partial class GetUserDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetUserDetail_args()
        {
        }

        public GetUserDetail_args DeepCopy()
        {
          var tmp553 = new GetUserDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp553.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest)this.Req.DeepCopy();
          }
          tmp553.__isset.req = this.__isset.req;
          return tmp553;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp554 = new TStruct("GetUserDetail_args");
            await oprot.WriteStructBeginAsync(tmp554, cancellationToken);
            var tmp555 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp555.Name = "req";
              tmp555.Type = TType.Struct;
              tmp555.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp555, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp556 = new StringBuilder("GetUserDetail_args(");
          int tmp557 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp557++) { tmp556.Append(", "); }
            tmp556.Append("Req: ");
            Req.ToString(tmp556);
          }
          tmp556.Append(')');
          return tmp556.ToString();
        }
      }


      public partial class GetUserDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetUserDetail_result()
        {
        }

        public GetUserDetail_result DeepCopy()
        {
          var tmp558 = new GetUserDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp558.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse)this.Success.DeepCopy();
          }
          tmp558.__isset.success = this.__isset.success;
          return tmp558;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetUserDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp559 = new TStruct("GetUserDetail_result");
            await oprot.WriteStructBeginAsync(tmp559, cancellationToken);
            var tmp560 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp560.Name = "Success";
                tmp560.Type = TType.Struct;
                tmp560.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp560, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUserDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp561 = new StringBuilder("GetUserDetail_result(");
          int tmp562 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp562++) { tmp561.Append(", "); }
            tmp561.Append("Success: ");
            Success.ToString(tmp561);
          }
          tmp561.Append(')');
          return tmp561.ToString();
        }
      }


      public partial class SaveUserDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveUserDetail_args()
        {
        }

        public SaveUserDetail_args DeepCopy()
        {
          var tmp563 = new SaveUserDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp563.Req = (global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest)this.Req.DeepCopy();
          }
          tmp563.__isset.req = this.__isset.req;
          return tmp563;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp564 = new TStruct("SaveUserDetail_args");
            await oprot.WriteStructBeginAsync(tmp564, cancellationToken);
            var tmp565 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp565.Name = "req";
              tmp565.Type = TType.Struct;
              tmp565.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp565, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp566 = new StringBuilder("SaveUserDetail_args(");
          int tmp567 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp567++) { tmp566.Append(", "); }
            tmp566.Append("Req: ");
            Req.ToString(tmp566);
          }
          tmp566.Append(')');
          return tmp566.ToString();
        }
      }


      public partial class SaveUserDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveUserDetail_result()
        {
        }

        public SaveUserDetail_result DeepCopy()
        {
          var tmp568 = new SaveUserDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp568.Success = (global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse)this.Success.DeepCopy();
          }
          tmp568.__isset.success = this.__isset.success;
          return tmp568;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SaveUserDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp569 = new TStruct("SaveUserDetail_result");
            await oprot.WriteStructBeginAsync(tmp569, cancellationToken);
            var tmp570 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp570.Name = "Success";
                tmp570.Type = TType.Struct;
                tmp570.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp570, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp571 = new StringBuilder("SaveUserDetail_result(");
          int tmp572 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp572++) { tmp571.Append(", "); }
            tmp571.Append("Success: ");
            Success.ToString(tmp571);
          }
          tmp571.Append(')');
          return tmp571.ToString();
        }
      }


      public partial class ChangePassword_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public ChangePassword_args()
        {
        }

        public ChangePassword_args DeepCopy()
        {
          var tmp573 = new ChangePassword_args();
          if((Req != null) && __isset.req)
          {
            tmp573.Req = (global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest)this.Req.DeepCopy();
          }
          tmp573.__isset.req = this.__isset.req;
          return tmp573;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.ChangePasswordRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp574 = new TStruct("ChangePassword_args");
            await oprot.WriteStructBeginAsync(tmp574, cancellationToken);
            var tmp575 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp575.Name = "req";
              tmp575.Type = TType.Struct;
              tmp575.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp575, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ChangePassword_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp576 = new StringBuilder("ChangePassword_args(");
          int tmp577 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp577++) { tmp576.Append(", "); }
            tmp576.Append("Req: ");
            Req.ToString(tmp576);
          }
          tmp576.Append(')');
          return tmp576.ToString();
        }
      }


      public partial class ChangePassword_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.BaseResp _success;

        public global::CUGOJ.RPC.Gen.Base.BaseResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ChangePassword_result()
        {
        }

        public ChangePassword_result DeepCopy()
        {
          var tmp578 = new ChangePassword_result();
          if((Success != null) && __isset.success)
          {
            tmp578.Success = (global::CUGOJ.RPC.Gen.Base.BaseResp)this.Success.DeepCopy();
          }
          tmp578.__isset.success = this.__isset.success;
          return tmp578;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.BaseResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp579 = new TStruct("ChangePassword_result");
            await oprot.WriteStructBeginAsync(tmp579, cancellationToken);
            var tmp580 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp580.Name = "Success";
                tmp580.Type = TType.Struct;
                tmp580.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp580, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ChangePassword_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp581 = new StringBuilder("ChangePassword_result(");
          int tmp582 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp582++) { tmp581.Append(", "); }
            tmp581.Append("Success: ");
            Success.ToString(tmp581);
          }
          tmp581.Append(')');
          return tmp581.ToString();
        }
      }


      public partial class Logup_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.LogupRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.LogupRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Logup_args()
        {
        }

        public Logup_args DeepCopy()
        {
          var tmp583 = new Logup_args();
          if((Req != null) && __isset.req)
          {
            tmp583.Req = (global::CUGOJ.RPC.Gen.Services.Core.LogupRequest)this.Req.DeepCopy();
          }
          tmp583.__isset.req = this.__isset.req;
          return tmp583;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.LogupRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp584 = new TStruct("Logup_args");
            await oprot.WriteStructBeginAsync(tmp584, cancellationToken);
            var tmp585 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp585.Name = "req";
              tmp585.Type = TType.Struct;
              tmp585.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Logup_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp586 = new StringBuilder("Logup_args(");
          int tmp587 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp587++) { tmp586.Append(", "); }
            tmp586.Append("Req: ");
            Req.ToString(tmp586);
          }
          tmp586.Append(')');
          return tmp586.ToString();
        }
      }


      public partial class Logup_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.LogupResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.LogupResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Logup_result()
        {
        }

        public Logup_result DeepCopy()
        {
          var tmp588 = new Logup_result();
          if((Success != null) && __isset.success)
          {
            tmp588.Success = (global::CUGOJ.RPC.Gen.Services.Core.LogupResponse)this.Success.DeepCopy();
          }
          tmp588.__isset.success = this.__isset.success;
          return tmp588;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.LogupResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp589 = new TStruct("Logup_result");
            await oprot.WriteStructBeginAsync(tmp589, cancellationToken);
            var tmp590 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp590.Name = "Success";
                tmp590.Type = TType.Struct;
                tmp590.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp590, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Logup_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp591 = new StringBuilder("Logup_result(");
          int tmp592 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp592++) { tmp591.Append(", "); }
            tmp591.Append("Success: ");
            Success.ToString(tmp591);
          }
          tmp591.Append(')');
          return tmp591.ToString();
        }
      }


      public partial class SubmitProblem_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SubmitProblem_args()
        {
        }

        public SubmitProblem_args DeepCopy()
        {
          var tmp593 = new SubmitProblem_args();
          if((Req != null) && __isset.req)
          {
            tmp593.Req = (global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest)this.Req.DeepCopy();
          }
          tmp593.__isset.req = this.__isset.req;
          return tmp593;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp594 = new TStruct("SubmitProblem_args");
            await oprot.WriteStructBeginAsync(tmp594, cancellationToken);
            var tmp595 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp595.Name = "req";
              tmp595.Type = TType.Struct;
              tmp595.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp595, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SubmitProblem_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp596 = new StringBuilder("SubmitProblem_args(");
          int tmp597 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp597++) { tmp596.Append(", "); }
            tmp596.Append("Req: ");
            Req.ToString(tmp596);
          }
          tmp596.Append(')');
          return tmp596.ToString();
        }
      }


      public partial class SubmitProblem_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SubmitProblem_result()
        {
        }

        public SubmitProblem_result DeepCopy()
        {
          var tmp598 = new SubmitProblem_result();
          if((Success != null) && __isset.success)
          {
            tmp598.Success = (global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse)this.Success.DeepCopy();
          }
          tmp598.__isset.success = this.__isset.success;
          return tmp598;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SubmitProblemResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp599 = new TStruct("SubmitProblem_result");
            await oprot.WriteStructBeginAsync(tmp599, cancellationToken);
            var tmp600 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp600.Name = "Success";
                tmp600.Type = TType.Struct;
                tmp600.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp600, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SubmitProblem_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp601 = new StringBuilder("SubmitProblem_result(");
          int tmp602 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp602++) { tmp601.Append(", "); }
            tmp601.Append("Success: ");
            Success.ToString(tmp601);
          }
          tmp601.Append(')');
          return tmp601.ToString();
        }
      }


      public partial class GetContestSubmissionList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestSubmissionList_args()
        {
        }

        public GetContestSubmissionList_args DeepCopy()
        {
          var tmp603 = new GetContestSubmissionList_args();
          if((Req != null) && __isset.req)
          {
            tmp603.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest)this.Req.DeepCopy();
          }
          tmp603.__isset.req = this.__isset.req;
          return tmp603;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp604 = new TStruct("GetContestSubmissionList_args");
            await oprot.WriteStructBeginAsync(tmp604, cancellationToken);
            var tmp605 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp605.Name = "req";
              tmp605.Type = TType.Struct;
              tmp605.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp605, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestSubmissionList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp606 = new StringBuilder("GetContestSubmissionList_args(");
          int tmp607 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp607++) { tmp606.Append(", "); }
            tmp606.Append("Req: ");
            Req.ToString(tmp606);
          }
          tmp606.Append(')');
          return tmp606.ToString();
        }
      }


      public partial class GetContestSubmissionList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestSubmissionList_result()
        {
        }

        public GetContestSubmissionList_result DeepCopy()
        {
          var tmp608 = new GetContestSubmissionList_result();
          if((Success != null) && __isset.success)
          {
            tmp608.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse)this.Success.DeepCopy();
          }
          tmp608.__isset.success = this.__isset.success;
          return tmp608;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetContestSubmissionListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp609 = new TStruct("GetContestSubmissionList_result");
            await oprot.WriteStructBeginAsync(tmp609, cancellationToken);
            var tmp610 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp610.Name = "Success";
                tmp610.Type = TType.Struct;
                tmp610.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp610, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestSubmissionList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp611 = new StringBuilder("GetContestSubmissionList_result(");
          int tmp612 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp612++) { tmp611.Append(", "); }
            tmp611.Append("Success: ");
            Success.ToString(tmp611);
          }
          tmp611.Append(')');
          return tmp611.ToString();
        }
      }


      public partial class GetProblemSubmissionList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblemSubmissionList_args()
        {
        }

        public GetProblemSubmissionList_args DeepCopy()
        {
          var tmp613 = new GetProblemSubmissionList_args();
          if((Req != null) && __isset.req)
          {
            tmp613.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest)this.Req.DeepCopy();
          }
          tmp613.__isset.req = this.__isset.req;
          return tmp613;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp614 = new TStruct("GetProblemSubmissionList_args");
            await oprot.WriteStructBeginAsync(tmp614, cancellationToken);
            var tmp615 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp615.Name = "req";
              tmp615.Type = TType.Struct;
              tmp615.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp615, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemSubmissionList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp616 = new StringBuilder("GetProblemSubmissionList_args(");
          int tmp617 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp617++) { tmp616.Append(", "); }
            tmp616.Append("Req: ");
            Req.ToString(tmp616);
          }
          tmp616.Append(')');
          return tmp616.ToString();
        }
      }


      public partial class GetProblemSubmissionList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblemSubmissionList_result()
        {
        }

        public GetProblemSubmissionList_result DeepCopy()
        {
          var tmp618 = new GetProblemSubmissionList_result();
          if((Success != null) && __isset.success)
          {
            tmp618.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse)this.Success.DeepCopy();
          }
          tmp618.__isset.success = this.__isset.success;
          return tmp618;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetProblemSubmissionListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp619 = new TStruct("GetProblemSubmissionList_result");
            await oprot.WriteStructBeginAsync(tmp619, cancellationToken);
            var tmp620 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp620.Name = "Success";
                tmp620.Type = TType.Struct;
                tmp620.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp620, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemSubmissionList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp621 = new StringBuilder("GetProblemSubmissionList_result(");
          int tmp622 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp622++) { tmp621.Append(", "); }
            tmp621.Append("Success: ");
            Success.ToString(tmp621);
          }
          tmp621.Append(')');
          return tmp621.ToString();
        }
      }


      public partial class GetSubmissionDetail_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetSubmissionDetail_args()
        {
        }

        public GetSubmissionDetail_args DeepCopy()
        {
          var tmp623 = new GetSubmissionDetail_args();
          if((Req != null) && __isset.req)
          {
            tmp623.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest)this.Req.DeepCopy();
          }
          tmp623.__isset.req = this.__isset.req;
          return tmp623;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp624 = new TStruct("GetSubmissionDetail_args");
            await oprot.WriteStructBeginAsync(tmp624, cancellationToken);
            var tmp625 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp625.Name = "req";
              tmp625.Type = TType.Struct;
              tmp625.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp625, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionDetail_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp626 = new StringBuilder("GetSubmissionDetail_args(");
          int tmp627 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp627++) { tmp626.Append(", "); }
            tmp626.Append("Req: ");
            Req.ToString(tmp626);
          }
          tmp626.Append(')');
          return tmp626.ToString();
        }
      }


      public partial class GetSubmissionDetail_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetSubmissionDetail_result()
        {
        }

        public GetSubmissionDetail_result DeepCopy()
        {
          var tmp628 = new GetSubmissionDetail_result();
          if((Success != null) && __isset.success)
          {
            tmp628.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse)this.Success.DeepCopy();
          }
          tmp628.__isset.success = this.__isset.success;
          return tmp628;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetSubmissionDetailResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp629 = new TStruct("GetSubmissionDetail_result");
            await oprot.WriteStructBeginAsync(tmp629, cancellationToken);
            var tmp630 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp630.Name = "Success";
                tmp630.Type = TType.Struct;
                tmp630.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp630, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionDetail_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp631 = new StringBuilder("GetSubmissionDetail_result(");
          int tmp632 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp632++) { tmp631.Append(", "); }
            tmp631.Append("Success: ");
            Success.ToString(tmp631);
          }
          tmp631.Append(')');
          return tmp631.ToString();
        }
      }


      public partial class GetAllServices_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetAllServices_args()
        {
        }

        public GetAllServices_args DeepCopy()
        {
          var tmp633 = new GetAllServices_args();
          if((Req != null) && __isset.req)
          {
            tmp633.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest)this.Req.DeepCopy();
          }
          tmp633.__isset.req = this.__isset.req;
          return tmp633;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp634 = new TStruct("GetAllServices_args");
            await oprot.WriteStructBeginAsync(tmp634, cancellationToken);
            var tmp635 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp635.Name = "req";
              tmp635.Type = TType.Struct;
              tmp635.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp635, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetAllServices_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp636 = new StringBuilder("GetAllServices_args(");
          int tmp637 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp637++) { tmp636.Append(", "); }
            tmp636.Append("Req: ");
            Req.ToString(tmp636);
          }
          tmp636.Append(')');
          return tmp636.ToString();
        }
      }


      public partial class GetAllServices_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetAllServices_result()
        {
        }

        public GetAllServices_result DeepCopy()
        {
          var tmp638 = new GetAllServices_result();
          if((Success != null) && __isset.success)
          {
            tmp638.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse)this.Success.DeepCopy();
          }
          tmp638.__isset.success = this.__isset.success;
          return tmp638;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetAllServicesResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp639 = new TStruct("GetAllServices_result");
            await oprot.WriteStructBeginAsync(tmp639, cancellationToken);
            var tmp640 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp640.Name = "Success";
                tmp640.Type = TType.Struct;
                tmp640.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp640, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetAllServices_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp641 = new StringBuilder("GetAllServices_result(");
          int tmp642 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp642++) { tmp641.Append(", "); }
            tmp641.Append("Success: ");
            Success.ToString(tmp641);
          }
          tmp641.Append(')');
          return tmp641.ToString();
        }
      }


      public partial class SetupService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SetupService_args()
        {
        }

        public SetupService_args DeepCopy()
        {
          var tmp643 = new SetupService_args();
          if((Req != null) && __isset.req)
          {
            tmp643.Req = (global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest)this.Req.DeepCopy();
          }
          tmp643.__isset.req = this.__isset.req;
          return tmp643;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.SetupServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp644 = new TStruct("SetupService_args");
            await oprot.WriteStructBeginAsync(tmp644, cancellationToken);
            var tmp645 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp645.Name = "req";
              tmp645.Type = TType.Struct;
              tmp645.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp645, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetupService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp646 = new StringBuilder("SetupService_args(");
          int tmp647 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp647++) { tmp646.Append(", "); }
            tmp646.Append("Req: ");
            Req.ToString(tmp646);
          }
          tmp646.Append(')');
          return tmp646.ToString();
        }
      }


      public partial class SetupService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SetupService_result()
        {
        }

        public SetupService_result DeepCopy()
        {
          var tmp648 = new SetupService_result();
          if((Success != null) && __isset.success)
          {
            tmp648.Success = (global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse)this.Success.DeepCopy();
          }
          tmp648.__isset.success = this.__isset.success;
          return tmp648;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.SetupServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp649 = new TStruct("SetupService_result");
            await oprot.WriteStructBeginAsync(tmp649, cancellationToken);
            var tmp650 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp650.Name = "Success";
                tmp650.Type = TType.Struct;
                tmp650.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp650, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetupService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp651 = new StringBuilder("SetupService_result(");
          int tmp652 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp652++) { tmp651.Append(", "); }
            tmp651.Append("Success: ");
            Success.ToString(tmp651);
          }
          tmp651.Append(')');
          return tmp651.ToString();
        }
      }


      public partial class Restart_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RestartRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.RestartRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Restart_args()
        {
        }

        public Restart_args DeepCopy()
        {
          var tmp653 = new Restart_args();
          if((Req != null) && __isset.req)
          {
            tmp653.Req = (global::CUGOJ.RPC.Gen.Services.Core.RestartRequest)this.Req.DeepCopy();
          }
          tmp653.__isset.req = this.__isset.req;
          return tmp653;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.RestartRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp654 = new TStruct("Restart_args");
            await oprot.WriteStructBeginAsync(tmp654, cancellationToken);
            var tmp655 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp655.Name = "req";
              tmp655.Type = TType.Struct;
              tmp655.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp655, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Restart_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp656 = new StringBuilder("Restart_args(");
          int tmp657 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp657++) { tmp656.Append(", "); }
            tmp656.Append("Req: ");
            Req.ToString(tmp656);
          }
          tmp656.Append(')');
          return tmp656.ToString();
        }
      }


      public partial class Restart_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.RestartResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.RestartResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Restart_result()
        {
        }

        public Restart_result DeepCopy()
        {
          var tmp658 = new Restart_result();
          if((Success != null) && __isset.success)
          {
            tmp658.Success = (global::CUGOJ.RPC.Gen.Services.Core.RestartResponse)this.Success.DeepCopy();
          }
          tmp658.__isset.success = this.__isset.success;
          return tmp658;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.RestartResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp659 = new TStruct("Restart_result");
            await oprot.WriteStructBeginAsync(tmp659, cancellationToken);
            var tmp660 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp660.Name = "Success";
                tmp660.Type = TType.Struct;
                tmp660.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp660, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Restart_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp661 = new StringBuilder("Restart_result(");
          int tmp662 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp662++) { tmp661.Append(", "); }
            tmp661.Append("Success: ");
            Success.ToString(tmp661);
          }
          tmp661.Append(')');
          return tmp661.ToString();
        }
      }


      public partial class AddService_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.AddServiceRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.AddServiceRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public AddService_args()
        {
        }

        public AddService_args DeepCopy()
        {
          var tmp663 = new AddService_args();
          if((Req != null) && __isset.req)
          {
            tmp663.Req = (global::CUGOJ.RPC.Gen.Services.Core.AddServiceRequest)this.Req.DeepCopy();
          }
          tmp663.__isset.req = this.__isset.req;
          return tmp663;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.AddServiceRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp664 = new TStruct("AddService_args");
            await oprot.WriteStructBeginAsync(tmp664, cancellationToken);
            var tmp665 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp665.Name = "req";
              tmp665.Type = TType.Struct;
              tmp665.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp665, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddService_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp666 = new StringBuilder("AddService_args(");
          int tmp667 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp667++) { tmp666.Append(", "); }
            tmp666.Append("Req: ");
            Req.ToString(tmp666);
          }
          tmp666.Append(')');
          return tmp666.ToString();
        }
      }


      public partial class AddService_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.AddServiceResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.AddServiceResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public AddService_result()
        {
        }

        public AddService_result DeepCopy()
        {
          var tmp668 = new AddService_result();
          if((Success != null) && __isset.success)
          {
            tmp668.Success = (global::CUGOJ.RPC.Gen.Services.Core.AddServiceResponse)this.Success.DeepCopy();
          }
          tmp668.__isset.success = this.__isset.success;
          return tmp668;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.AddServiceResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp669 = new TStruct("AddService_result");
            await oprot.WriteStructBeginAsync(tmp669, cancellationToken);
            var tmp670 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp670.Name = "Success";
                tmp670.Type = TType.Struct;
                tmp670.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp670, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is AddService_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp671 = new StringBuilder("AddService_result(");
          int tmp672 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp672++) { tmp671.Append(", "); }
            tmp671.Append("Success: ");
            Success.ToString(tmp671);
          }
          tmp671.Append(')');
          return tmp671.ToString();
        }
      }


      public partial class GetUnRegisteredServices_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetUnRegisteredServices_args()
        {
        }

        public GetUnRegisteredServices_args DeepCopy()
        {
          var tmp673 = new GetUnRegisteredServices_args();
          if((Req != null) && __isset.req)
          {
            tmp673.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesRequest)this.Req.DeepCopy();
          }
          tmp673.__isset.req = this.__isset.req;
          return tmp673;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp674 = new TStruct("GetUnRegisteredServices_args");
            await oprot.WriteStructBeginAsync(tmp674, cancellationToken);
            var tmp675 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp675.Name = "req";
              tmp675.Type = TType.Struct;
              tmp675.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp675, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUnRegisteredServices_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp676 = new StringBuilder("GetUnRegisteredServices_args(");
          int tmp677 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp677++) { tmp676.Append(", "); }
            tmp676.Append("Req: ");
            Req.ToString(tmp676);
          }
          tmp676.Append(')');
          return tmp676.ToString();
        }
      }


      public partial class GetUnRegisteredServices_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetUnRegisteredServices_result()
        {
        }

        public GetUnRegisteredServices_result DeepCopy()
        {
          var tmp678 = new GetUnRegisteredServices_result();
          if((Success != null) && __isset.success)
          {
            tmp678.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesResponse)this.Success.DeepCopy();
          }
          tmp678.__isset.success = this.__isset.success;
          return tmp678;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetUnRegisteredServicesResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp679 = new TStruct("GetUnRegisteredServices_result");
            await oprot.WriteStructBeginAsync(tmp679, cancellationToken);
            var tmp680 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp680.Name = "Success";
                tmp680.Type = TType.Struct;
                tmp680.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp680, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetUnRegisteredServices_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp681 = new StringBuilder("GetUnRegisteredServices_result(");
          int tmp682 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp682++) { tmp681.Append(", "); }
            tmp681.Append("Success: ");
            Success.ToString(tmp681);
          }
          tmp681.Append(')');
          return tmp681.ToString();
        }
      }


      public partial class GetConnectionStringByServiceID_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetConnectionStringByServiceID_args()
        {
        }

        public GetConnectionStringByServiceID_args DeepCopy()
        {
          var tmp683 = new GetConnectionStringByServiceID_args();
          if((Req != null) && __isset.req)
          {
            tmp683.Req = (global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDRequest)this.Req.DeepCopy();
          }
          tmp683.__isset.req = this.__isset.req;
          return tmp683;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp684 = new TStruct("GetConnectionStringByServiceID_args");
            await oprot.WriteStructBeginAsync(tmp684, cancellationToken);
            var tmp685 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp685.Name = "req";
              tmp685.Type = TType.Struct;
              tmp685.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp685, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetConnectionStringByServiceID_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp686 = new StringBuilder("GetConnectionStringByServiceID_args(");
          int tmp687 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp687++) { tmp686.Append(", "); }
            tmp686.Append("Req: ");
            Req.ToString(tmp686);
          }
          tmp686.Append(')');
          return tmp686.ToString();
        }
      }


      public partial class GetConnectionStringByServiceID_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetConnectionStringByServiceID_result()
        {
        }

        public GetConnectionStringByServiceID_result DeepCopy()
        {
          var tmp688 = new GetConnectionStringByServiceID_result();
          if((Success != null) && __isset.success)
          {
            tmp688.Success = (global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDResponse)this.Success.DeepCopy();
          }
          tmp688.__isset.success = this.__isset.success;
          return tmp688;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Core.GetConnectionStringByServiceIDResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp689 = new TStruct("GetConnectionStringByServiceID_result");
            await oprot.WriteStructBeginAsync(tmp689, cancellationToken);
            var tmp690 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp690.Name = "Success";
                tmp690.Type = TType.Struct;
                tmp690.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp690, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetConnectionStringByServiceID_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp691 = new StringBuilder("GetConnectionStringByServiceID_result(");
          int tmp692 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp692++) { tmp691.Append(", "); }
            tmp691.Append("Success: ");
            Success.ToString(tmp691);
          }
          tmp691.Append(')');
          return tmp691.ToString();
        }
      }

    }

  }
}
