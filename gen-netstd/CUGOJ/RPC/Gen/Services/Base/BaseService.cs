/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Services.Base
{
  public partial class BaseService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemResponse> GetContestProblem(global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await send_Ping(req, cancellationToken);
        return await recv_Ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp136 = new InternalStructs.Ping_args() {
          Req = req,
        };
        
        await tmp136.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> recv_Ping(CancellationToken cancellationToken = default)
      {
        
        var tmp137 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp137.Type == TMessageType.Exception)
        {
          var tmp138 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp138;
        }

        var tmp139 = new InternalStructs.Ping_result();
        await tmp139.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp139.__isset.success)
        {
          return tmp139.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveUserInfo(req, cancellationToken);
        return await recv_SaveUserInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp140 = new InternalStructs.SaveUserInfo_args() {
          Req = req,
        };
        
        await tmp140.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> recv_SaveUserInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp141 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp141.Type == TMessageType.Exception)
        {
          var tmp142 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp142;
        }

        var tmp143 = new InternalStructs.SaveUserInfo_result();
        await tmp143.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp143.__isset.success)
        {
          return tmp143.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveUserInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetUserInfo(req, cancellationToken);
        return await recv_MulGetUserInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp144 = new InternalStructs.MulGetUserInfo_args() {
          Req = req,
        };
        
        await tmp144.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> recv_MulGetUserInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp145 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp145.Type == TMessageType.Exception)
        {
          var tmp146 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp146;
        }

        var tmp147 = new InternalStructs.MulGetUserInfo_result();
        await tmp147.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp147.__isset.success)
        {
          return tmp147.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetUserInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default)
      {
        await send_Login(req, cancellationToken);
        return await recv_Login(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp148 = new InternalStructs.Login_args() {
          Req = req,
        };
        
        await tmp148.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> recv_Login(CancellationToken cancellationToken = default)
      {
        
        var tmp149 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp149.Type == TMessageType.Exception)
        {
          var tmp150 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp150;
        }

        var tmp151 = new InternalStructs.Login_result();
        await tmp151.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp151.__isset.success)
        {
          return tmp151.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveProblemInfo(req, cancellationToken);
        return await recv_SaveProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp152 = new InternalStructs.SaveProblemInfo_args() {
          Req = req,
        };
        
        await tmp152.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> recv_SaveProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp153 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp153.Type == TMessageType.Exception)
        {
          var tmp154 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp154;
        }

        var tmp155 = new InternalStructs.SaveProblemInfo_result();
        await tmp155.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp155.__isset.success)
        {
          return tmp155.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetProblemInfo(req, cancellationToken);
        return await recv_MulGetProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp156 = new InternalStructs.MulGetProblemInfo_args() {
          Req = req,
        };
        
        await tmp156.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> recv_MulGetProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp157 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp157.Type == TMessageType.Exception)
        {
          var tmp158 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp158;
        }

        var tmp159 = new InternalStructs.MulGetProblemInfo_result();
        await tmp159.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp159.__isset.success)
        {
          return tmp159.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblemList(req, cancellationToken);
        return await recv_GetProblemList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp160 = new InternalStructs.GetProblemList_args() {
          Req = req,
        };
        
        await tmp160.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> recv_GetProblemList(CancellationToken cancellationToken = default)
      {
        
        var tmp161 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp161.Type == TMessageType.Exception)
        {
          var tmp162 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp162;
        }

        var tmp163 = new InternalStructs.GetProblemList_result();
        await tmp163.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp163.__isset.success)
        {
          return tmp163.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblemList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemResponse> GetContestProblem(global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestProblem(req, cancellationToken);
        return await recv_GetContestProblem(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestProblem(global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestProblem", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp164 = new InternalStructs.GetContestProblem_args() {
          Req = req,
        };
        
        await tmp164.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemResponse> recv_GetContestProblem(CancellationToken cancellationToken = default)
      {
        
        var tmp165 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp165.Type == TMessageType.Exception)
        {
          var tmp166 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp166;
        }

        var tmp167 = new InternalStructs.GetContestProblem_result();
        await tmp167.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp167.__isset.success)
        {
          return tmp167.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestProblem failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveContestInfo(req, cancellationToken);
        return await recv_SaveContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp168 = new InternalStructs.SaveContestInfo_args() {
          Req = req,
        };
        
        await tmp168.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> recv_SaveContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp169 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp169.Type == TMessageType.Exception)
        {
          var tmp170 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp170;
        }

        var tmp171 = new InternalStructs.SaveContestInfo_result();
        await tmp171.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp171.__isset.success)
        {
          return tmp171.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetContestInfo(req, cancellationToken);
        return await recv_MulGetContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp172 = new InternalStructs.MulGetContestInfo_args() {
          Req = req,
        };
        
        await tmp172.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> recv_MulGetContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp173 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp173.Type == TMessageType.Exception)
        {
          var tmp174 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp174;
        }

        var tmp175 = new InternalStructs.MulGetContestInfo_result();
        await tmp175.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp175.__isset.success)
        {
          return tmp175.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestList(req, cancellationToken);
        return await recv_GetContestList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp176 = new InternalStructs.GetContestList_args() {
          Req = req,
        };
        
        await tmp176.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> recv_GetContestList(CancellationToken cancellationToken = default)
      {
        
        var tmp177 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp177.Type == TMessageType.Exception)
        {
          var tmp178 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp178;
        }

        var tmp179 = new InternalStructs.GetContestList_result();
        await tmp179.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp179.__isset.success)
        {
          return tmp179.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestList failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["Ping"] = Ping_ProcessAsync;
        processMap_["SaveUserInfo"] = SaveUserInfo_ProcessAsync;
        processMap_["MulGetUserInfo"] = MulGetUserInfo_ProcessAsync;
        processMap_["Login"] = Login_ProcessAsync;
        processMap_["SaveProblemInfo"] = SaveProblemInfo_ProcessAsync;
        processMap_["MulGetProblemInfo"] = MulGetProblemInfo_ProcessAsync;
        processMap_["GetProblemList"] = GetProblemList_ProcessAsync;
        processMap_["GetContestProblem"] = GetContestProblem_ProcessAsync;
        processMap_["SaveContestInfo"] = SaveContestInfo_ProcessAsync;
        processMap_["MulGetContestInfo"] = MulGetContestInfo_ProcessAsync;
        processMap_["GetContestList"] = GetContestList_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task Ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp180 = new InternalStructs.Ping_args();
        await tmp180.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp181 = new InternalStructs.Ping_result();
        try
        {
          tmp181.Success = await _iAsync.Ping(tmp180.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp181.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp182)
        {
          var tmp183 = $"Error occurred in {GetType().FullName}: {tmp182.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp182, tmp183);
          else
            Console.Error.WriteLine(tmp183);
          var tmp184 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp184.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveUserInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp185 = new InternalStructs.SaveUserInfo_args();
        await tmp185.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp186 = new InternalStructs.SaveUserInfo_result();
        try
        {
          tmp186.Success = await _iAsync.SaveUserInfo(tmp185.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp186.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp187)
        {
          var tmp188 = $"Error occurred in {GetType().FullName}: {tmp187.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp187, tmp188);
          else
            Console.Error.WriteLine(tmp188);
          var tmp189 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp189.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetUserInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp190 = new InternalStructs.MulGetUserInfo_args();
        await tmp190.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp191 = new InternalStructs.MulGetUserInfo_result();
        try
        {
          tmp191.Success = await _iAsync.MulGetUserInfo(tmp190.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp191.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp192)
        {
          var tmp193 = $"Error occurred in {GetType().FullName}: {tmp192.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp192, tmp193);
          else
            Console.Error.WriteLine(tmp193);
          var tmp194 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp194.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Login_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp195 = new InternalStructs.Login_args();
        await tmp195.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp196 = new InternalStructs.Login_result();
        try
        {
          tmp196.Success = await _iAsync.Login(tmp195.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Reply, seqid), cancellationToken); 
          await tmp196.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp197)
        {
          var tmp198 = $"Error occurred in {GetType().FullName}: {tmp197.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp197, tmp198);
          else
            Console.Error.WriteLine(tmp198);
          var tmp199 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Exception, seqid), cancellationToken);
          await tmp199.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp200 = new InternalStructs.SaveProblemInfo_args();
        await tmp200.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp201 = new InternalStructs.SaveProblemInfo_result();
        try
        {
          tmp201.Success = await _iAsync.SaveProblemInfo(tmp200.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp201.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp202)
        {
          var tmp203 = $"Error occurred in {GetType().FullName}: {tmp202.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp202, tmp203);
          else
            Console.Error.WriteLine(tmp203);
          var tmp204 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp204.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp205 = new InternalStructs.MulGetProblemInfo_args();
        await tmp205.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp206 = new InternalStructs.MulGetProblemInfo_result();
        try
        {
          tmp206.Success = await _iAsync.MulGetProblemInfo(tmp205.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp206.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp207)
        {
          var tmp208 = $"Error occurred in {GetType().FullName}: {tmp207.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp207, tmp208);
          else
            Console.Error.WriteLine(tmp208);
          var tmp209 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp209.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblemList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp210 = new InternalStructs.GetProblemList_args();
        await tmp210.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp211 = new InternalStructs.GetProblemList_result();
        try
        {
          tmp211.Success = await _iAsync.GetProblemList(tmp210.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp211.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp212)
        {
          var tmp213 = $"Error occurred in {GetType().FullName}: {tmp212.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp212, tmp213);
          else
            Console.Error.WriteLine(tmp213);
          var tmp214 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Exception, seqid), cancellationToken);
          await tmp214.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestProblem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp215 = new InternalStructs.GetContestProblem_args();
        await tmp215.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp216 = new InternalStructs.GetContestProblem_result();
        try
        {
          tmp216.Success = await _iAsync.GetContestProblem(tmp215.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestProblem", TMessageType.Reply, seqid), cancellationToken); 
          await tmp216.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp217)
        {
          var tmp218 = $"Error occurred in {GetType().FullName}: {tmp217.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp217, tmp218);
          else
            Console.Error.WriteLine(tmp218);
          var tmp219 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestProblem", TMessageType.Exception, seqid), cancellationToken);
          await tmp219.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp220 = new InternalStructs.SaveContestInfo_args();
        await tmp220.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp221 = new InternalStructs.SaveContestInfo_result();
        try
        {
          tmp221.Success = await _iAsync.SaveContestInfo(tmp220.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp221.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp222)
        {
          var tmp223 = $"Error occurred in {GetType().FullName}: {tmp222.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp222, tmp223);
          else
            Console.Error.WriteLine(tmp223);
          var tmp224 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp224.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp225 = new InternalStructs.MulGetContestInfo_args();
        await tmp225.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp226 = new InternalStructs.MulGetContestInfo_result();
        try
        {
          tmp226.Success = await _iAsync.MulGetContestInfo(tmp225.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp226.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp227)
        {
          var tmp228 = $"Error occurred in {GetType().FullName}: {tmp227.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp227, tmp228);
          else
            Console.Error.WriteLine(tmp228);
          var tmp229 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp229.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp230 = new InternalStructs.GetContestList_args();
        await tmp230.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp231 = new InternalStructs.GetContestList_result();
        try
        {
          tmp231.Success = await _iAsync.GetContestList(tmp230.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp231.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp232)
        {
          var tmp233 = $"Error occurred in {GetType().FullName}: {tmp232.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp232, tmp233);
          else
            Console.Error.WriteLine(tmp233);
          var tmp234 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Exception, seqid), cancellationToken);
          await tmp234.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class Ping_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingRequest _req;

        public global::CUGOJ.RPC.Gen.Base.PingRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Ping_args()
        {
        }

        public Ping_args DeepCopy()
        {
          var tmp235 = new Ping_args();
          if((Req != null) && __isset.req)
          {
            tmp235.Req = (global::CUGOJ.RPC.Gen.Base.PingRequest)this.Req.DeepCopy();
          }
          tmp235.__isset.req = this.__isset.req;
          return tmp235;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Base.PingRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp236 = new TStruct("Ping_args");
            await oprot.WriteStructBeginAsync(tmp236, cancellationToken);
            var tmp237 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp237.Name = "req";
              tmp237.Type = TType.Struct;
              tmp237.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp238 = new StringBuilder("Ping_args(");
          int tmp239 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp239++) { tmp238.Append(", "); }
            tmp238.Append("Req: ");
            Req.ToString(tmp238);
          }
          tmp238.Append(')');
          return tmp238.ToString();
        }
      }


      public partial class Ping_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingResponse _success;

        public global::CUGOJ.RPC.Gen.Base.PingResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Ping_result()
        {
        }

        public Ping_result DeepCopy()
        {
          var tmp240 = new Ping_result();
          if((Success != null) && __isset.success)
          {
            tmp240.Success = (global::CUGOJ.RPC.Gen.Base.PingResponse)this.Success.DeepCopy();
          }
          tmp240.__isset.success = this.__isset.success;
          return tmp240;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.PingResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp241 = new TStruct("Ping_result");
            await oprot.WriteStructBeginAsync(tmp241, cancellationToken);
            var tmp242 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp242.Name = "Success";
                tmp242.Type = TType.Struct;
                tmp242.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp242, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp243 = new StringBuilder("Ping_result(");
          int tmp244 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp244++) { tmp243.Append(", "); }
            tmp243.Append("Success: ");
            Success.ToString(tmp243);
          }
          tmp243.Append(')');
          return tmp243.ToString();
        }
      }


      public partial class SaveUserInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveUserInfo_args()
        {
        }

        public SaveUserInfo_args DeepCopy()
        {
          var tmp245 = new SaveUserInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp245.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest)this.Req.DeepCopy();
          }
          tmp245.__isset.req = this.__isset.req;
          return tmp245;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp246 = new TStruct("SaveUserInfo_args");
            await oprot.WriteStructBeginAsync(tmp246, cancellationToken);
            var tmp247 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp247.Name = "req";
              tmp247.Type = TType.Struct;
              tmp247.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp247, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp248 = new StringBuilder("SaveUserInfo_args(");
          int tmp249 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp249++) { tmp248.Append(", "); }
            tmp248.Append("Req: ");
            Req.ToString(tmp248);
          }
          tmp248.Append(')');
          return tmp248.ToString();
        }
      }


      public partial class SaveUserInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveUserInfo_result()
        {
        }

        public SaveUserInfo_result DeepCopy()
        {
          var tmp250 = new SaveUserInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp250.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse)this.Success.DeepCopy();
          }
          tmp250.__isset.success = this.__isset.success;
          return tmp250;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp251 = new TStruct("SaveUserInfo_result");
            await oprot.WriteStructBeginAsync(tmp251, cancellationToken);
            var tmp252 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp252.Name = "Success";
                tmp252.Type = TType.Struct;
                tmp252.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp252, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp253 = new StringBuilder("SaveUserInfo_result(");
          int tmp254 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp254++) { tmp253.Append(", "); }
            tmp253.Append("Success: ");
            Success.ToString(tmp253);
          }
          tmp253.Append(')');
          return tmp253.ToString();
        }
      }


      public partial class MulGetUserInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetUserInfo_args()
        {
        }

        public MulGetUserInfo_args DeepCopy()
        {
          var tmp255 = new MulGetUserInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp255.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest)this.Req.DeepCopy();
          }
          tmp255.__isset.req = this.__isset.req;
          return tmp255;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp256 = new TStruct("MulGetUserInfo_args");
            await oprot.WriteStructBeginAsync(tmp256, cancellationToken);
            var tmp257 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp257.Name = "req";
              tmp257.Type = TType.Struct;
              tmp257.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp257, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetUserInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp258 = new StringBuilder("MulGetUserInfo_args(");
          int tmp259 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp259++) { tmp258.Append(", "); }
            tmp258.Append("Req: ");
            Req.ToString(tmp258);
          }
          tmp258.Append(')');
          return tmp258.ToString();
        }
      }


      public partial class MulGetUserInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetUserInfo_result()
        {
        }

        public MulGetUserInfo_result DeepCopy()
        {
          var tmp260 = new MulGetUserInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp260.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse)this.Success.DeepCopy();
          }
          tmp260.__isset.success = this.__isset.success;
          return tmp260;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp261 = new TStruct("MulGetUserInfo_result");
            await oprot.WriteStructBeginAsync(tmp261, cancellationToken);
            var tmp262 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp262.Name = "Success";
                tmp262.Type = TType.Struct;
                tmp262.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp262, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetUserInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp263 = new StringBuilder("MulGetUserInfo_result(");
          int tmp264 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp264++) { tmp263.Append(", "); }
            tmp263.Append("Success: ");
            Success.ToString(tmp263);
          }
          tmp263.Append(')');
          return tmp263.ToString();
        }
      }


      public partial class Login_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.LoginRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.LoginRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Login_args()
        {
        }

        public Login_args DeepCopy()
        {
          var tmp265 = new Login_args();
          if((Req != null) && __isset.req)
          {
            tmp265.Req = (global::CUGOJ.RPC.Gen.Services.Base.LoginRequest)this.Req.DeepCopy();
          }
          tmp265.__isset.req = this.__isset.req;
          return tmp265;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.LoginRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp266 = new TStruct("Login_args");
            await oprot.WriteStructBeginAsync(tmp266, cancellationToken);
            var tmp267 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp267.Name = "req";
              tmp267.Type = TType.Struct;
              tmp267.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp267, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp268 = new StringBuilder("Login_args(");
          int tmp269 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp269++) { tmp268.Append(", "); }
            tmp268.Append("Req: ");
            Req.ToString(tmp268);
          }
          tmp268.Append(')');
          return tmp268.ToString();
        }
      }


      public partial class Login_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.LoginResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.LoginResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Login_result()
        {
        }

        public Login_result DeepCopy()
        {
          var tmp270 = new Login_result();
          if((Success != null) && __isset.success)
          {
            tmp270.Success = (global::CUGOJ.RPC.Gen.Services.Base.LoginResponse)this.Success.DeepCopy();
          }
          tmp270.__isset.success = this.__isset.success;
          return tmp270;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.LoginResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp271 = new TStruct("Login_result");
            await oprot.WriteStructBeginAsync(tmp271, cancellationToken);
            var tmp272 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp272.Name = "Success";
                tmp272.Type = TType.Struct;
                tmp272.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp272, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp273 = new StringBuilder("Login_result(");
          int tmp274 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp274++) { tmp273.Append(", "); }
            tmp273.Append("Success: ");
            Success.ToString(tmp273);
          }
          tmp273.Append(')');
          return tmp273.ToString();
        }
      }


      public partial class SaveProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveProblemInfo_args()
        {
        }

        public SaveProblemInfo_args DeepCopy()
        {
          var tmp275 = new SaveProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp275.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp275.__isset.req = this.__isset.req;
          return tmp275;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp276 = new TStruct("SaveProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp276, cancellationToken);
            var tmp277 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp277.Name = "req";
              tmp277.Type = TType.Struct;
              tmp277.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp277, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp278 = new StringBuilder("SaveProblemInfo_args(");
          int tmp279 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp279++) { tmp278.Append(", "); }
            tmp278.Append("Req: ");
            Req.ToString(tmp278);
          }
          tmp278.Append(')');
          return tmp278.ToString();
        }
      }


      public partial class SaveProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveProblemInfo_result()
        {
        }

        public SaveProblemInfo_result DeepCopy()
        {
          var tmp280 = new SaveProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp280.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp280.__isset.success = this.__isset.success;
          return tmp280;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp281 = new TStruct("SaveProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp281, cancellationToken);
            var tmp282 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp282.Name = "Success";
                tmp282.Type = TType.Struct;
                tmp282.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp282, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp283 = new StringBuilder("SaveProblemInfo_result(");
          int tmp284 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp284++) { tmp283.Append(", "); }
            tmp283.Append("Success: ");
            Success.ToString(tmp283);
          }
          tmp283.Append(')');
          return tmp283.ToString();
        }
      }


      public partial class MulGetProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetProblemInfo_args()
        {
        }

        public MulGetProblemInfo_args DeepCopy()
        {
          var tmp285 = new MulGetProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp285.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp285.__isset.req = this.__isset.req;
          return tmp285;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp286 = new TStruct("MulGetProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp286, cancellationToken);
            var tmp287 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp287.Name = "req";
              tmp287.Type = TType.Struct;
              tmp287.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp287, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp288 = new StringBuilder("MulGetProblemInfo_args(");
          int tmp289 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp289++) { tmp288.Append(", "); }
            tmp288.Append("Req: ");
            Req.ToString(tmp288);
          }
          tmp288.Append(')');
          return tmp288.ToString();
        }
      }


      public partial class MulGetProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetProblemInfo_result()
        {
        }

        public MulGetProblemInfo_result DeepCopy()
        {
          var tmp290 = new MulGetProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp290.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp290.__isset.success = this.__isset.success;
          return tmp290;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp291 = new TStruct("MulGetProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp291, cancellationToken);
            var tmp292 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp292.Name = "Success";
                tmp292.Type = TType.Struct;
                tmp292.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp293 = new StringBuilder("MulGetProblemInfo_result(");
          int tmp294 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp294++) { tmp293.Append(", "); }
            tmp293.Append("Success: ");
            Success.ToString(tmp293);
          }
          tmp293.Append(')');
          return tmp293.ToString();
        }
      }


      public partial class GetProblemList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblemList_args()
        {
        }

        public GetProblemList_args DeepCopy()
        {
          var tmp295 = new GetProblemList_args();
          if((Req != null) && __isset.req)
          {
            tmp295.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest)this.Req.DeepCopy();
          }
          tmp295.__isset.req = this.__isset.req;
          return tmp295;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp296 = new TStruct("GetProblemList_args");
            await oprot.WriteStructBeginAsync(tmp296, cancellationToken);
            var tmp297 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp297.Name = "req";
              tmp297.Type = TType.Struct;
              tmp297.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp297, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp298 = new StringBuilder("GetProblemList_args(");
          int tmp299 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp299++) { tmp298.Append(", "); }
            tmp298.Append("Req: ");
            Req.ToString(tmp298);
          }
          tmp298.Append(')');
          return tmp298.ToString();
        }
      }


      public partial class GetProblemList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblemList_result()
        {
        }

        public GetProblemList_result DeepCopy()
        {
          var tmp300 = new GetProblemList_result();
          if((Success != null) && __isset.success)
          {
            tmp300.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse)this.Success.DeepCopy();
          }
          tmp300.__isset.success = this.__isset.success;
          return tmp300;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp301 = new TStruct("GetProblemList_result");
            await oprot.WriteStructBeginAsync(tmp301, cancellationToken);
            var tmp302 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp302.Name = "Success";
                tmp302.Type = TType.Struct;
                tmp302.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp302, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp303 = new StringBuilder("GetProblemList_result(");
          int tmp304 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp304++) { tmp303.Append(", "); }
            tmp303.Append("Success: ");
            Success.ToString(tmp303);
          }
          tmp303.Append(')');
          return tmp303.ToString();
        }
      }


      public partial class GetContestProblem_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestProblem_args()
        {
        }

        public GetContestProblem_args DeepCopy()
        {
          var tmp305 = new GetContestProblem_args();
          if((Req != null) && __isset.req)
          {
            tmp305.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemRequest)this.Req.DeepCopy();
          }
          tmp305.__isset.req = this.__isset.req;
          return tmp305;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp306 = new TStruct("GetContestProblem_args");
            await oprot.WriteStructBeginAsync(tmp306, cancellationToken);
            var tmp307 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp307.Name = "req";
              tmp307.Type = TType.Struct;
              tmp307.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp307, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestProblem_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp308 = new StringBuilder("GetContestProblem_args(");
          int tmp309 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp309++) { tmp308.Append(", "); }
            tmp308.Append("Req: ");
            Req.ToString(tmp308);
          }
          tmp308.Append(')');
          return tmp308.ToString();
        }
      }


      public partial class GetContestProblem_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestProblem_result()
        {
        }

        public GetContestProblem_result DeepCopy()
        {
          var tmp310 = new GetContestProblem_result();
          if((Success != null) && __isset.success)
          {
            tmp310.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemResponse)this.Success.DeepCopy();
          }
          tmp310.__isset.success = this.__isset.success;
          return tmp310;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetContestProblemResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp311 = new TStruct("GetContestProblem_result");
            await oprot.WriteStructBeginAsync(tmp311, cancellationToken);
            var tmp312 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp312.Name = "Success";
                tmp312.Type = TType.Struct;
                tmp312.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestProblem_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp313 = new StringBuilder("GetContestProblem_result(");
          int tmp314 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp314++) { tmp313.Append(", "); }
            tmp313.Append("Success: ");
            Success.ToString(tmp313);
          }
          tmp313.Append(')');
          return tmp313.ToString();
        }
      }


      public partial class SaveContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveContestInfo_args()
        {
        }

        public SaveContestInfo_args DeepCopy()
        {
          var tmp315 = new SaveContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp315.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest)this.Req.DeepCopy();
          }
          tmp315.__isset.req = this.__isset.req;
          return tmp315;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp316 = new TStruct("SaveContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp316, cancellationToken);
            var tmp317 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp317.Name = "req";
              tmp317.Type = TType.Struct;
              tmp317.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp318 = new StringBuilder("SaveContestInfo_args(");
          int tmp319 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp319++) { tmp318.Append(", "); }
            tmp318.Append("Req: ");
            Req.ToString(tmp318);
          }
          tmp318.Append(')');
          return tmp318.ToString();
        }
      }


      public partial class SaveContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveContestInfo_result()
        {
        }

        public SaveContestInfo_result DeepCopy()
        {
          var tmp320 = new SaveContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp320.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse)this.Success.DeepCopy();
          }
          tmp320.__isset.success = this.__isset.success;
          return tmp320;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp321 = new TStruct("SaveContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp321, cancellationToken);
            var tmp322 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp322.Name = "Success";
                tmp322.Type = TType.Struct;
                tmp322.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp322, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp323 = new StringBuilder("SaveContestInfo_result(");
          int tmp324 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp324++) { tmp323.Append(", "); }
            tmp323.Append("Success: ");
            Success.ToString(tmp323);
          }
          tmp323.Append(')');
          return tmp323.ToString();
        }
      }


      public partial class MulGetContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetContestInfo_args()
        {
        }

        public MulGetContestInfo_args DeepCopy()
        {
          var tmp325 = new MulGetContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp325.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest)this.Req.DeepCopy();
          }
          tmp325.__isset.req = this.__isset.req;
          return tmp325;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp326 = new TStruct("MulGetContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp326, cancellationToken);
            var tmp327 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp327.Name = "req";
              tmp327.Type = TType.Struct;
              tmp327.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp327, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp328 = new StringBuilder("MulGetContestInfo_args(");
          int tmp329 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp329++) { tmp328.Append(", "); }
            tmp328.Append("Req: ");
            Req.ToString(tmp328);
          }
          tmp328.Append(')');
          return tmp328.ToString();
        }
      }


      public partial class MulGetContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetContestInfo_result()
        {
        }

        public MulGetContestInfo_result DeepCopy()
        {
          var tmp330 = new MulGetContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp330.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse)this.Success.DeepCopy();
          }
          tmp330.__isset.success = this.__isset.success;
          return tmp330;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp331 = new TStruct("MulGetContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp331, cancellationToken);
            var tmp332 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp332.Name = "Success";
                tmp332.Type = TType.Struct;
                tmp332.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp332, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp333 = new StringBuilder("MulGetContestInfo_result(");
          int tmp334 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp334++) { tmp333.Append(", "); }
            tmp333.Append("Success: ");
            Success.ToString(tmp333);
          }
          tmp333.Append(')');
          return tmp333.ToString();
        }
      }


      public partial class GetContestList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestList_args()
        {
        }

        public GetContestList_args DeepCopy()
        {
          var tmp335 = new GetContestList_args();
          if((Req != null) && __isset.req)
          {
            tmp335.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest)this.Req.DeepCopy();
          }
          tmp335.__isset.req = this.__isset.req;
          return tmp335;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp336 = new TStruct("GetContestList_args");
            await oprot.WriteStructBeginAsync(tmp336, cancellationToken);
            var tmp337 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp337.Name = "req";
              tmp337.Type = TType.Struct;
              tmp337.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp337, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp338 = new StringBuilder("GetContestList_args(");
          int tmp339 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp339++) { tmp338.Append(", "); }
            tmp338.Append("Req: ");
            Req.ToString(tmp338);
          }
          tmp338.Append(')');
          return tmp338.ToString();
        }
      }


      public partial class GetContestList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestList_result()
        {
        }

        public GetContestList_result DeepCopy()
        {
          var tmp340 = new GetContestList_result();
          if((Success != null) && __isset.success)
          {
            tmp340.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse)this.Success.DeepCopy();
          }
          tmp340.__isset.success = this.__isset.success;
          return tmp340;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp341 = new TStruct("GetContestList_result");
            await oprot.WriteStructBeginAsync(tmp341, cancellationToken);
            var tmp342 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp342.Name = "Success";
                tmp342.Type = TType.Struct;
                tmp342.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp342, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp343 = new StringBuilder("GetContestList_result(");
          int tmp344 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp344++) { tmp343.Append(", "); }
            tmp343.Append("Success: ");
            Success.ToString(tmp343);
          }
          tmp343.Append(')');
          return tmp343.ToString();
        }
      }

    }

  }
}
