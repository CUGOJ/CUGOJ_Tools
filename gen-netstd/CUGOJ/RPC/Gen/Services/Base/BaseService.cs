/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Services.Base
{
  public partial class BaseService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse> SaveSubmissionInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse> GetSubmissionList(global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await send_Ping(req, cancellationToken);
        return await recv_Ping(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Ping(global::CUGOJ.RPC.Gen.Base.PingRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp188 = new InternalStructs.Ping_args() {
          Req = req,
        };
        
        await tmp188.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Base.PingResponse> recv_Ping(CancellationToken cancellationToken = default)
      {
        
        var tmp189 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp189.Type == TMessageType.Exception)
        {
          var tmp190 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp190;
        }

        var tmp191 = new InternalStructs.Ping_result();
        await tmp191.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp191.__isset.success)
        {
          return tmp191.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Ping failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveUserInfo(req, cancellationToken);
        return await recv_SaveUserInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveUserInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp192 = new InternalStructs.SaveUserInfo_args() {
          Req = req,
        };
        
        await tmp192.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse> recv_SaveUserInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp193 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp193.Type == TMessageType.Exception)
        {
          var tmp194 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp194;
        }

        var tmp195 = new InternalStructs.SaveUserInfo_result();
        await tmp195.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp195.__isset.success)
        {
          return tmp195.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveUserInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetUserInfo(req, cancellationToken);
        return await recv_MulGetUserInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetUserInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp196 = new InternalStructs.MulGetUserInfo_args() {
          Req = req,
        };
        
        await tmp196.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse> recv_MulGetUserInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp197 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp197.Type == TMessageType.Exception)
        {
          var tmp198 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp198;
        }

        var tmp199 = new InternalStructs.MulGetUserInfo_result();
        await tmp199.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp199.__isset.success)
        {
          return tmp199.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetUserInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default)
      {
        await send_Login(req, cancellationToken);
        return await recv_Login(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Login(global::CUGOJ.RPC.Gen.Services.Base.LoginRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp200 = new InternalStructs.Login_args() {
          Req = req,
        };
        
        await tmp200.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.LoginResponse> recv_Login(CancellationToken cancellationToken = default)
      {
        
        var tmp201 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp201.Type == TMessageType.Exception)
        {
          var tmp202 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp202;
        }

        var tmp203 = new InternalStructs.Login_result();
        await tmp203.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp203.__isset.success)
        {
          return tmp203.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Login failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveProblemInfo(req, cancellationToken);
        return await recv_SaveProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp204 = new InternalStructs.SaveProblemInfo_args() {
          Req = req,
        };
        
        await tmp204.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse> recv_SaveProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp205 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp205.Type == TMessageType.Exception)
        {
          var tmp206 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp206;
        }

        var tmp207 = new InternalStructs.SaveProblemInfo_result();
        await tmp207.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp207.__isset.success)
        {
          return tmp207.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetProblemInfo(req, cancellationToken);
        return await recv_MulGetProblemInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetProblemInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp208 = new InternalStructs.MulGetProblemInfo_args() {
          Req = req,
        };
        
        await tmp208.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse> recv_MulGetProblemInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp209 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp209.Type == TMessageType.Exception)
        {
          var tmp210 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp210;
        }

        var tmp211 = new InternalStructs.MulGetProblemInfo_result();
        await tmp211.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp211.__isset.success)
        {
          return tmp211.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetProblemInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetProblemList(req, cancellationToken);
        return await recv_GetProblemList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetProblemList(global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp212 = new InternalStructs.GetProblemList_args() {
          Req = req,
        };
        
        await tmp212.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse> recv_GetProblemList(CancellationToken cancellationToken = default)
      {
        
        var tmp213 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp213.Type == TMessageType.Exception)
        {
          var tmp214 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp214;
        }

        var tmp215 = new InternalStructs.GetProblemList_result();
        await tmp215.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp215.__isset.success)
        {
          return tmp215.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetProblemList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveContestInfo(req, cancellationToken);
        return await recv_SaveContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveContestInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp216 = new InternalStructs.SaveContestInfo_args() {
          Req = req,
        };
        
        await tmp216.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse> recv_SaveContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp217 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp217.Type == TMessageType.Exception)
        {
          var tmp218 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp218;
        }

        var tmp219 = new InternalStructs.SaveContestInfo_result();
        await tmp219.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp219.__isset.success)
        {
          return tmp219.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_MulGetContestInfo(req, cancellationToken);
        return await recv_MulGetContestInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_MulGetContestInfo(global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp220 = new InternalStructs.MulGetContestInfo_args() {
          Req = req,
        };
        
        await tmp220.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse> recv_MulGetContestInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp221 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp221.Type == TMessageType.Exception)
        {
          var tmp222 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp222;
        }

        var tmp223 = new InternalStructs.MulGetContestInfo_result();
        await tmp223.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp223.__isset.success)
        {
          return tmp223.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MulGetContestInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetContestList(req, cancellationToken);
        return await recv_GetContestList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetContestList(global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp224 = new InternalStructs.GetContestList_args() {
          Req = req,
        };
        
        await tmp224.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse> recv_GetContestList(CancellationToken cancellationToken = default)
      {
        
        var tmp225 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp225.Type == TMessageType.Exception)
        {
          var tmp226 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp226;
        }

        var tmp227 = new InternalStructs.GetContestList_result();
        await tmp227.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp227.__isset.success)
        {
          return tmp227.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetContestList failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse> SaveSubmissionInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest req, CancellationToken cancellationToken = default)
      {
        await send_SaveSubmissionInfo(req, cancellationToken);
        return await recv_SaveSubmissionInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SaveSubmissionInfo(global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SaveSubmissionInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp228 = new InternalStructs.SaveSubmissionInfo_args() {
          Req = req,
        };
        
        await tmp228.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse> recv_SaveSubmissionInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp229 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp229.Type == TMessageType.Exception)
        {
          var tmp230 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp230;
        }

        var tmp231 = new InternalStructs.SaveSubmissionInfo_result();
        await tmp231.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp231.__isset.success)
        {
          return tmp231.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SaveSubmissionInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse> GetSubmissionList(global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await send_GetSubmissionList(req, cancellationToken);
        return await recv_GetSubmissionList(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSubmissionList(global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSubmissionList", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp232 = new InternalStructs.GetSubmissionList_args() {
          Req = req,
        };
        
        await tmp232.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse> recv_GetSubmissionList(CancellationToken cancellationToken = default)
      {
        
        var tmp233 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp233.Type == TMessageType.Exception)
        {
          var tmp234 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp234;
        }

        var tmp235 = new InternalStructs.GetSubmissionList_result();
        await tmp235.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp235.__isset.success)
        {
          return tmp235.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSubmissionList failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["Ping"] = Ping_ProcessAsync;
        processMap_["SaveUserInfo"] = SaveUserInfo_ProcessAsync;
        processMap_["MulGetUserInfo"] = MulGetUserInfo_ProcessAsync;
        processMap_["Login"] = Login_ProcessAsync;
        processMap_["SaveProblemInfo"] = SaveProblemInfo_ProcessAsync;
        processMap_["MulGetProblemInfo"] = MulGetProblemInfo_ProcessAsync;
        processMap_["GetProblemList"] = GetProblemList_ProcessAsync;
        processMap_["SaveContestInfo"] = SaveContestInfo_ProcessAsync;
        processMap_["MulGetContestInfo"] = MulGetContestInfo_ProcessAsync;
        processMap_["GetContestList"] = GetContestList_ProcessAsync;
        processMap_["SaveSubmissionInfo"] = SaveSubmissionInfo_ProcessAsync;
        processMap_["GetSubmissionList"] = GetSubmissionList_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task Ping_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp236 = new InternalStructs.Ping_args();
        await tmp236.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp237 = new InternalStructs.Ping_result();
        try
        {
          tmp237.Success = await _iAsync.Ping(tmp236.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Reply, seqid), cancellationToken); 
          await tmp237.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp238)
        {
          var tmp239 = $"Error occurred in {GetType().FullName}: {tmp238.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp238, tmp239);
          else
            Console.Error.WriteLine(tmp239);
          var tmp240 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Ping", TMessageType.Exception, seqid), cancellationToken);
          await tmp240.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveUserInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp241 = new InternalStructs.SaveUserInfo_args();
        await tmp241.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp242 = new InternalStructs.SaveUserInfo_result();
        try
        {
          tmp242.Success = await _iAsync.SaveUserInfo(tmp241.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp242.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp243)
        {
          var tmp244 = $"Error occurred in {GetType().FullName}: {tmp243.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp243, tmp244);
          else
            Console.Error.WriteLine(tmp244);
          var tmp245 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveUserInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp245.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetUserInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp246 = new InternalStructs.MulGetUserInfo_args();
        await tmp246.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp247 = new InternalStructs.MulGetUserInfo_result();
        try
        {
          tmp247.Success = await _iAsync.MulGetUserInfo(tmp246.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp247.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp248)
        {
          var tmp249 = $"Error occurred in {GetType().FullName}: {tmp248.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp248, tmp249);
          else
            Console.Error.WriteLine(tmp249);
          var tmp250 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetUserInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp250.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Login_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp251 = new InternalStructs.Login_args();
        await tmp251.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp252 = new InternalStructs.Login_result();
        try
        {
          tmp252.Success = await _iAsync.Login(tmp251.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Reply, seqid), cancellationToken); 
          await tmp252.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp253)
        {
          var tmp254 = $"Error occurred in {GetType().FullName}: {tmp253.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp253, tmp254);
          else
            Console.Error.WriteLine(tmp254);
          var tmp255 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Login", TMessageType.Exception, seqid), cancellationToken);
          await tmp255.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp256 = new InternalStructs.SaveProblemInfo_args();
        await tmp256.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp257 = new InternalStructs.SaveProblemInfo_result();
        try
        {
          tmp257.Success = await _iAsync.SaveProblemInfo(tmp256.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp257.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp258)
        {
          var tmp259 = $"Error occurred in {GetType().FullName}: {tmp258.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp258, tmp259);
          else
            Console.Error.WriteLine(tmp259);
          var tmp260 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp260.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetProblemInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp261 = new InternalStructs.MulGetProblemInfo_args();
        await tmp261.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp262 = new InternalStructs.MulGetProblemInfo_result();
        try
        {
          tmp262.Success = await _iAsync.MulGetProblemInfo(tmp261.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp262.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp263)
        {
          var tmp264 = $"Error occurred in {GetType().FullName}: {tmp263.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp263, tmp264);
          else
            Console.Error.WriteLine(tmp264);
          var tmp265 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetProblemInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp265.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetProblemList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp266 = new InternalStructs.GetProblemList_args();
        await tmp266.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp267 = new InternalStructs.GetProblemList_result();
        try
        {
          tmp267.Success = await _iAsync.GetProblemList(tmp266.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp267.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp268)
        {
          var tmp269 = $"Error occurred in {GetType().FullName}: {tmp268.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp268, tmp269);
          else
            Console.Error.WriteLine(tmp269);
          var tmp270 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetProblemList", TMessageType.Exception, seqid), cancellationToken);
          await tmp270.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp271 = new InternalStructs.SaveContestInfo_args();
        await tmp271.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp272 = new InternalStructs.SaveContestInfo_result();
        try
        {
          tmp272.Success = await _iAsync.SaveContestInfo(tmp271.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp272.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp273)
        {
          var tmp274 = $"Error occurred in {GetType().FullName}: {tmp273.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp273, tmp274);
          else
            Console.Error.WriteLine(tmp274);
          var tmp275 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp275.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task MulGetContestInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp276 = new InternalStructs.MulGetContestInfo_args();
        await tmp276.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp277 = new InternalStructs.MulGetContestInfo_result();
        try
        {
          tmp277.Success = await _iAsync.MulGetContestInfo(tmp276.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp277.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp278)
        {
          var tmp279 = $"Error occurred in {GetType().FullName}: {tmp278.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp278, tmp279);
          else
            Console.Error.WriteLine(tmp279);
          var tmp280 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("MulGetContestInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp280.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetContestList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp281 = new InternalStructs.GetContestList_args();
        await tmp281.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp282 = new InternalStructs.GetContestList_result();
        try
        {
          tmp282.Success = await _iAsync.GetContestList(tmp281.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp282.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp283)
        {
          var tmp284 = $"Error occurred in {GetType().FullName}: {tmp283.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp283, tmp284);
          else
            Console.Error.WriteLine(tmp284);
          var tmp285 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetContestList", TMessageType.Exception, seqid), cancellationToken);
          await tmp285.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SaveSubmissionInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp286 = new InternalStructs.SaveSubmissionInfo_args();
        await tmp286.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp287 = new InternalStructs.SaveSubmissionInfo_result();
        try
        {
          tmp287.Success = await _iAsync.SaveSubmissionInfo(tmp286.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SaveSubmissionInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp287.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp288)
        {
          var tmp289 = $"Error occurred in {GetType().FullName}: {tmp288.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp288, tmp289);
          else
            Console.Error.WriteLine(tmp289);
          var tmp290 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SaveSubmissionInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp290.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSubmissionList_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp291 = new InternalStructs.GetSubmissionList_args();
        await tmp291.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp292 = new InternalStructs.GetSubmissionList_result();
        try
        {
          tmp292.Success = await _iAsync.GetSubmissionList(tmp291.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionList", TMessageType.Reply, seqid), cancellationToken); 
          await tmp292.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp293)
        {
          var tmp294 = $"Error occurred in {GetType().FullName}: {tmp293.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp293, tmp294);
          else
            Console.Error.WriteLine(tmp294);
          var tmp295 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSubmissionList", TMessageType.Exception, seqid), cancellationToken);
          await tmp295.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class Ping_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingRequest _req;

        public global::CUGOJ.RPC.Gen.Base.PingRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Ping_args()
        {
        }

        public Ping_args DeepCopy()
        {
          var tmp296 = new Ping_args();
          if((Req != null) && __isset.req)
          {
            tmp296.Req = (global::CUGOJ.RPC.Gen.Base.PingRequest)this.Req.DeepCopy();
          }
          tmp296.__isset.req = this.__isset.req;
          return tmp296;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Base.PingRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp297 = new TStruct("Ping_args");
            await oprot.WriteStructBeginAsync(tmp297, cancellationToken);
            var tmp298 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp298.Name = "req";
              tmp298.Type = TType.Struct;
              tmp298.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp298, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp299 = new StringBuilder("Ping_args(");
          int tmp300 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp300++) { tmp299.Append(", "); }
            tmp299.Append("Req: ");
            Req.ToString(tmp299);
          }
          tmp299.Append(')');
          return tmp299.ToString();
        }
      }


      public partial class Ping_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Base.PingResponse _success;

        public global::CUGOJ.RPC.Gen.Base.PingResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Ping_result()
        {
        }

        public Ping_result DeepCopy()
        {
          var tmp301 = new Ping_result();
          if((Success != null) && __isset.success)
          {
            tmp301.Success = (global::CUGOJ.RPC.Gen.Base.PingResponse)this.Success.DeepCopy();
          }
          tmp301.__isset.success = this.__isset.success;
          return tmp301;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Base.PingResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp302 = new TStruct("Ping_result");
            await oprot.WriteStructBeginAsync(tmp302, cancellationToken);
            var tmp303 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp303.Name = "Success";
                tmp303.Type = TType.Struct;
                tmp303.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp303, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Ping_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp304 = new StringBuilder("Ping_result(");
          int tmp305 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp305++) { tmp304.Append(", "); }
            tmp304.Append("Success: ");
            Success.ToString(tmp304);
          }
          tmp304.Append(')');
          return tmp304.ToString();
        }
      }


      public partial class SaveUserInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveUserInfo_args()
        {
        }

        public SaveUserInfo_args DeepCopy()
        {
          var tmp306 = new SaveUserInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp306.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest)this.Req.DeepCopy();
          }
          tmp306.__isset.req = this.__isset.req;
          return tmp306;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp307 = new TStruct("SaveUserInfo_args");
            await oprot.WriteStructBeginAsync(tmp307, cancellationToken);
            var tmp308 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp308.Name = "req";
              tmp308.Type = TType.Struct;
              tmp308.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp308, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp309 = new StringBuilder("SaveUserInfo_args(");
          int tmp310 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp310++) { tmp309.Append(", "); }
            tmp309.Append("Req: ");
            Req.ToString(tmp309);
          }
          tmp309.Append(')');
          return tmp309.ToString();
        }
      }


      public partial class SaveUserInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveUserInfo_result()
        {
        }

        public SaveUserInfo_result DeepCopy()
        {
          var tmp311 = new SaveUserInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp311.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse)this.Success.DeepCopy();
          }
          tmp311.__isset.success = this.__isset.success;
          return tmp311;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveUserInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp312 = new TStruct("SaveUserInfo_result");
            await oprot.WriteStructBeginAsync(tmp312, cancellationToken);
            var tmp313 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp313.Name = "Success";
                tmp313.Type = TType.Struct;
                tmp313.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp313, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveUserInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp314 = new StringBuilder("SaveUserInfo_result(");
          int tmp315 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp315++) { tmp314.Append(", "); }
            tmp314.Append("Success: ");
            Success.ToString(tmp314);
          }
          tmp314.Append(')');
          return tmp314.ToString();
        }
      }


      public partial class MulGetUserInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetUserInfo_args()
        {
        }

        public MulGetUserInfo_args DeepCopy()
        {
          var tmp316 = new MulGetUserInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp316.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest)this.Req.DeepCopy();
          }
          tmp316.__isset.req = this.__isset.req;
          return tmp316;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp317 = new TStruct("MulGetUserInfo_args");
            await oprot.WriteStructBeginAsync(tmp317, cancellationToken);
            var tmp318 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp318.Name = "req";
              tmp318.Type = TType.Struct;
              tmp318.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp318, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetUserInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp319 = new StringBuilder("MulGetUserInfo_args(");
          int tmp320 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp320++) { tmp319.Append(", "); }
            tmp319.Append("Req: ");
            Req.ToString(tmp319);
          }
          tmp319.Append(')');
          return tmp319.ToString();
        }
      }


      public partial class MulGetUserInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetUserInfo_result()
        {
        }

        public MulGetUserInfo_result DeepCopy()
        {
          var tmp321 = new MulGetUserInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp321.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse)this.Success.DeepCopy();
          }
          tmp321.__isset.success = this.__isset.success;
          return tmp321;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetUserInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp322 = new TStruct("MulGetUserInfo_result");
            await oprot.WriteStructBeginAsync(tmp322, cancellationToken);
            var tmp323 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp323.Name = "Success";
                tmp323.Type = TType.Struct;
                tmp323.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp323, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetUserInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp324 = new StringBuilder("MulGetUserInfo_result(");
          int tmp325 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp325++) { tmp324.Append(", "); }
            tmp324.Append("Success: ");
            Success.ToString(tmp324);
          }
          tmp324.Append(')');
          return tmp324.ToString();
        }
      }


      public partial class Login_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.LoginRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.LoginRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public Login_args()
        {
        }

        public Login_args DeepCopy()
        {
          var tmp326 = new Login_args();
          if((Req != null) && __isset.req)
          {
            tmp326.Req = (global::CUGOJ.RPC.Gen.Services.Base.LoginRequest)this.Req.DeepCopy();
          }
          tmp326.__isset.req = this.__isset.req;
          return tmp326;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.LoginRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp327 = new TStruct("Login_args");
            await oprot.WriteStructBeginAsync(tmp327, cancellationToken);
            var tmp328 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp328.Name = "req";
              tmp328.Type = TType.Struct;
              tmp328.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp328, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp329 = new StringBuilder("Login_args(");
          int tmp330 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp330++) { tmp329.Append(", "); }
            tmp329.Append("Req: ");
            Req.ToString(tmp329);
          }
          tmp329.Append(')');
          return tmp329.ToString();
        }
      }


      public partial class Login_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.LoginResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.LoginResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public Login_result()
        {
        }

        public Login_result DeepCopy()
        {
          var tmp331 = new Login_result();
          if((Success != null) && __isset.success)
          {
            tmp331.Success = (global::CUGOJ.RPC.Gen.Services.Base.LoginResponse)this.Success.DeepCopy();
          }
          tmp331.__isset.success = this.__isset.success;
          return tmp331;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.LoginResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp332 = new TStruct("Login_result");
            await oprot.WriteStructBeginAsync(tmp332, cancellationToken);
            var tmp333 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp333.Name = "Success";
                tmp333.Type = TType.Struct;
                tmp333.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is Login_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp334 = new StringBuilder("Login_result(");
          int tmp335 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp335++) { tmp334.Append(", "); }
            tmp334.Append("Success: ");
            Success.ToString(tmp334);
          }
          tmp334.Append(')');
          return tmp334.ToString();
        }
      }


      public partial class SaveProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveProblemInfo_args()
        {
        }

        public SaveProblemInfo_args DeepCopy()
        {
          var tmp336 = new SaveProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp336.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp336.__isset.req = this.__isset.req;
          return tmp336;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp337 = new TStruct("SaveProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp337, cancellationToken);
            var tmp338 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp338.Name = "req";
              tmp338.Type = TType.Struct;
              tmp338.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp338, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp339 = new StringBuilder("SaveProblemInfo_args(");
          int tmp340 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp340++) { tmp339.Append(", "); }
            tmp339.Append("Req: ");
            Req.ToString(tmp339);
          }
          tmp339.Append(')');
          return tmp339.ToString();
        }
      }


      public partial class SaveProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveProblemInfo_result()
        {
        }

        public SaveProblemInfo_result DeepCopy()
        {
          var tmp341 = new SaveProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp341.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp341.__isset.success = this.__isset.success;
          return tmp341;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp342 = new TStruct("SaveProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp342, cancellationToken);
            var tmp343 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp343.Name = "Success";
                tmp343.Type = TType.Struct;
                tmp343.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp343, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp344 = new StringBuilder("SaveProblemInfo_result(");
          int tmp345 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp345++) { tmp344.Append(", "); }
            tmp344.Append("Success: ");
            Success.ToString(tmp344);
          }
          tmp344.Append(')');
          return tmp344.ToString();
        }
      }


      public partial class MulGetProblemInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetProblemInfo_args()
        {
        }

        public MulGetProblemInfo_args DeepCopy()
        {
          var tmp346 = new MulGetProblemInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp346.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest)this.Req.DeepCopy();
          }
          tmp346.__isset.req = this.__isset.req;
          return tmp346;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp347 = new TStruct("MulGetProblemInfo_args");
            await oprot.WriteStructBeginAsync(tmp347, cancellationToken);
            var tmp348 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp348.Name = "req";
              tmp348.Type = TType.Struct;
              tmp348.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp348, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetProblemInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp349 = new StringBuilder("MulGetProblemInfo_args(");
          int tmp350 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp350++) { tmp349.Append(", "); }
            tmp349.Append("Req: ");
            Req.ToString(tmp349);
          }
          tmp349.Append(')');
          return tmp349.ToString();
        }
      }


      public partial class MulGetProblemInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetProblemInfo_result()
        {
        }

        public MulGetProblemInfo_result DeepCopy()
        {
          var tmp351 = new MulGetProblemInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp351.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse)this.Success.DeepCopy();
          }
          tmp351.__isset.success = this.__isset.success;
          return tmp351;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetProblemInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp352 = new TStruct("MulGetProblemInfo_result");
            await oprot.WriteStructBeginAsync(tmp352, cancellationToken);
            var tmp353 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp353.Name = "Success";
                tmp353.Type = TType.Struct;
                tmp353.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp353, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetProblemInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp354 = new StringBuilder("MulGetProblemInfo_result(");
          int tmp355 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp355++) { tmp354.Append(", "); }
            tmp354.Append("Success: ");
            Success.ToString(tmp354);
          }
          tmp354.Append(')');
          return tmp354.ToString();
        }
      }


      public partial class GetProblemList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetProblemList_args()
        {
        }

        public GetProblemList_args DeepCopy()
        {
          var tmp356 = new GetProblemList_args();
          if((Req != null) && __isset.req)
          {
            tmp356.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest)this.Req.DeepCopy();
          }
          tmp356.__isset.req = this.__isset.req;
          return tmp356;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetProblemListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp357 = new TStruct("GetProblemList_args");
            await oprot.WriteStructBeginAsync(tmp357, cancellationToken);
            var tmp358 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp358.Name = "req";
              tmp358.Type = TType.Struct;
              tmp358.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp358, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp359 = new StringBuilder("GetProblemList_args(");
          int tmp360 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp360++) { tmp359.Append(", "); }
            tmp359.Append("Req: ");
            Req.ToString(tmp359);
          }
          tmp359.Append(')');
          return tmp359.ToString();
        }
      }


      public partial class GetProblemList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetProblemList_result()
        {
        }

        public GetProblemList_result DeepCopy()
        {
          var tmp361 = new GetProblemList_result();
          if((Success != null) && __isset.success)
          {
            tmp361.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse)this.Success.DeepCopy();
          }
          tmp361.__isset.success = this.__isset.success;
          return tmp361;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetProblemListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp362 = new TStruct("GetProblemList_result");
            await oprot.WriteStructBeginAsync(tmp362, cancellationToken);
            var tmp363 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp363.Name = "Success";
                tmp363.Type = TType.Struct;
                tmp363.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp363, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetProblemList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp364 = new StringBuilder("GetProblemList_result(");
          int tmp365 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp365++) { tmp364.Append(", "); }
            tmp364.Append("Success: ");
            Success.ToString(tmp364);
          }
          tmp364.Append(')');
          return tmp364.ToString();
        }
      }


      public partial class SaveContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveContestInfo_args()
        {
        }

        public SaveContestInfo_args DeepCopy()
        {
          var tmp366 = new SaveContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp366.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest)this.Req.DeepCopy();
          }
          tmp366.__isset.req = this.__isset.req;
          return tmp366;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp367 = new TStruct("SaveContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp367, cancellationToken);
            var tmp368 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp368.Name = "req";
              tmp368.Type = TType.Struct;
              tmp368.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp368, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp369 = new StringBuilder("SaveContestInfo_args(");
          int tmp370 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp370++) { tmp369.Append(", "); }
            tmp369.Append("Req: ");
            Req.ToString(tmp369);
          }
          tmp369.Append(')');
          return tmp369.ToString();
        }
      }


      public partial class SaveContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveContestInfo_result()
        {
        }

        public SaveContestInfo_result DeepCopy()
        {
          var tmp371 = new SaveContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp371.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse)this.Success.DeepCopy();
          }
          tmp371.__isset.success = this.__isset.success;
          return tmp371;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp372 = new TStruct("SaveContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp372, cancellationToken);
            var tmp373 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp373.Name = "Success";
                tmp373.Type = TType.Struct;
                tmp373.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp373, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp374 = new StringBuilder("SaveContestInfo_result(");
          int tmp375 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp375++) { tmp374.Append(", "); }
            tmp374.Append("Success: ");
            Success.ToString(tmp374);
          }
          tmp374.Append(')');
          return tmp374.ToString();
        }
      }


      public partial class MulGetContestInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public MulGetContestInfo_args()
        {
        }

        public MulGetContestInfo_args DeepCopy()
        {
          var tmp376 = new MulGetContestInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp376.Req = (global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest)this.Req.DeepCopy();
          }
          tmp376.__isset.req = this.__isset.req;
          return tmp376;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp377 = new TStruct("MulGetContestInfo_args");
            await oprot.WriteStructBeginAsync(tmp377, cancellationToken);
            var tmp378 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp378.Name = "req";
              tmp378.Type = TType.Struct;
              tmp378.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp378, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetContestInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp379 = new StringBuilder("MulGetContestInfo_args(");
          int tmp380 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp380++) { tmp379.Append(", "); }
            tmp379.Append("Req: ");
            Req.ToString(tmp379);
          }
          tmp379.Append(')');
          return tmp379.ToString();
        }
      }


      public partial class MulGetContestInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public MulGetContestInfo_result()
        {
        }

        public MulGetContestInfo_result DeepCopy()
        {
          var tmp381 = new MulGetContestInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp381.Success = (global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse)this.Success.DeepCopy();
          }
          tmp381.__isset.success = this.__isset.success;
          return tmp381;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.MulGetContestInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp382 = new TStruct("MulGetContestInfo_result");
            await oprot.WriteStructBeginAsync(tmp382, cancellationToken);
            var tmp383 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp383.Name = "Success";
                tmp383.Type = TType.Struct;
                tmp383.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp383, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is MulGetContestInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp384 = new StringBuilder("MulGetContestInfo_result(");
          int tmp385 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp385++) { tmp384.Append(", "); }
            tmp384.Append("Success: ");
            Success.ToString(tmp384);
          }
          tmp384.Append(')');
          return tmp384.ToString();
        }
      }


      public partial class GetContestList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetContestList_args()
        {
        }

        public GetContestList_args DeepCopy()
        {
          var tmp386 = new GetContestList_args();
          if((Req != null) && __isset.req)
          {
            tmp386.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest)this.Req.DeepCopy();
          }
          tmp386.__isset.req = this.__isset.req;
          return tmp386;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetContestListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp387 = new TStruct("GetContestList_args");
            await oprot.WriteStructBeginAsync(tmp387, cancellationToken);
            var tmp388 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp388.Name = "req";
              tmp388.Type = TType.Struct;
              tmp388.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp388, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp389 = new StringBuilder("GetContestList_args(");
          int tmp390 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp390++) { tmp389.Append(", "); }
            tmp389.Append("Req: ");
            Req.ToString(tmp389);
          }
          tmp389.Append(')');
          return tmp389.ToString();
        }
      }


      public partial class GetContestList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetContestList_result()
        {
        }

        public GetContestList_result DeepCopy()
        {
          var tmp391 = new GetContestList_result();
          if((Success != null) && __isset.success)
          {
            tmp391.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse)this.Success.DeepCopy();
          }
          tmp391.__isset.success = this.__isset.success;
          return tmp391;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetContestListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp392 = new TStruct("GetContestList_result");
            await oprot.WriteStructBeginAsync(tmp392, cancellationToken);
            var tmp393 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp393.Name = "Success";
                tmp393.Type = TType.Struct;
                tmp393.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp393, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetContestList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp394 = new StringBuilder("GetContestList_result(");
          int tmp395 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp395++) { tmp394.Append(", "); }
            tmp394.Append("Success: ");
            Success.ToString(tmp394);
          }
          tmp394.Append(')');
          return tmp394.ToString();
        }
      }


      public partial class SaveSubmissionInfo_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SaveSubmissionInfo_args()
        {
        }

        public SaveSubmissionInfo_args DeepCopy()
        {
          var tmp396 = new SaveSubmissionInfo_args();
          if((Req != null) && __isset.req)
          {
            tmp396.Req = (global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest)this.Req.DeepCopy();
          }
          tmp396.__isset.req = this.__isset.req;
          return tmp396;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp397 = new TStruct("SaveSubmissionInfo_args");
            await oprot.WriteStructBeginAsync(tmp397, cancellationToken);
            var tmp398 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp398.Name = "req";
              tmp398.Type = TType.Struct;
              tmp398.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp398, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveSubmissionInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp399 = new StringBuilder("SaveSubmissionInfo_args(");
          int tmp400 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp400++) { tmp399.Append(", "); }
            tmp399.Append("Req: ");
            Req.ToString(tmp399);
          }
          tmp399.Append(')');
          return tmp399.ToString();
        }
      }


      public partial class SaveSubmissionInfo_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SaveSubmissionInfo_result()
        {
        }

        public SaveSubmissionInfo_result DeepCopy()
        {
          var tmp401 = new SaveSubmissionInfo_result();
          if((Success != null) && __isset.success)
          {
            tmp401.Success = (global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse)this.Success.DeepCopy();
          }
          tmp401.__isset.success = this.__isset.success;
          return tmp401;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.SaveSubmissionInfoResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp402 = new TStruct("SaveSubmissionInfo_result");
            await oprot.WriteStructBeginAsync(tmp402, cancellationToken);
            var tmp403 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp403.Name = "Success";
                tmp403.Type = TType.Struct;
                tmp403.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp403, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SaveSubmissionInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp404 = new StringBuilder("SaveSubmissionInfo_result(");
          int tmp405 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp405++) { tmp404.Append(", "); }
            tmp404.Append("Success: ");
            Success.ToString(tmp404);
          }
          tmp404.Append(')');
          return tmp404.ToString();
        }
      }


      public partial class GetSubmissionList_args : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest _req;

        public global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetSubmissionList_args()
        {
        }

        public GetSubmissionList_args DeepCopy()
        {
          var tmp406 = new GetSubmissionList_args();
          if((Req != null) && __isset.req)
          {
            tmp406.Req = (global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest)this.Req.DeepCopy();
          }
          tmp406.__isset.req = this.__isset.req;
          return tmp406;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListRequest();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp407 = new TStruct("GetSubmissionList_args");
            await oprot.WriteStructBeginAsync(tmp407, cancellationToken);
            var tmp408 = new TField();
            if((Req != null) && __isset.req)
            {
              tmp408.Name = "req";
              tmp408.Type = TType.Struct;
              tmp408.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp408, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionList_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp409 = new StringBuilder("GetSubmissionList_args(");
          int tmp410 = 0;
          if((Req != null) && __isset.req)
          {
            if(0 < tmp410++) { tmp409.Append(", "); }
            tmp409.Append("Req: ");
            Req.ToString(tmp409);
          }
          tmp409.Append(')');
          return tmp409.ToString();
        }
      }


      public partial class GetSubmissionList_result : TBase
      {
        private global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse _success;

        public global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetSubmissionList_result()
        {
        }

        public GetSubmissionList_result DeepCopy()
        {
          var tmp411 = new GetSubmissionList_result();
          if((Success != null) && __isset.success)
          {
            tmp411.Success = (global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse)this.Success.DeepCopy();
          }
          tmp411.__isset.success = this.__isset.success;
          return tmp411;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::CUGOJ.RPC.Gen.Services.Base.GetSubmissionListResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp412 = new TStruct("GetSubmissionList_result");
            await oprot.WriteStructBeginAsync(tmp412, cancellationToken);
            var tmp413 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp413.Name = "Success";
                tmp413.Type = TType.Struct;
                tmp413.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSubmissionList_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp414 = new StringBuilder("GetSubmissionList_result(");
          int tmp415 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp415++) { tmp414.Append(", "); }
            tmp414.Append("Success: ");
            Success.ToString(tmp414);
          }
          tmp414.Append(')');
          return tmp414.ToString();
        }
      }

    }

  }
}
