/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace CUGOJ.RPC.Gen.Services.Base
{

  public partial class GetContestProblemResponse : TBase
  {
    private global::CUGOJ.RPC.Gen.Base.BaseResp _BaseResp;

    public List<global::CUGOJ.RPC.Gen.Common.ContestProblemStruct> ProblemList { get; set; }

    public global::CUGOJ.RPC.Gen.Base.BaseResp BaseResp
    {
      get
      {
        return _BaseResp;
      }
      set
      {
        __isset.BaseResp = true;
        this._BaseResp = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool BaseResp;
    }

    public GetContestProblemResponse()
    {
    }

    public GetContestProblemResponse(List<global::CUGOJ.RPC.Gen.Common.ContestProblemStruct> ProblemList) : this()
    {
      this.ProblemList = ProblemList;
    }

    public GetContestProblemResponse DeepCopy()
    {
      var tmp85 = new GetContestProblemResponse();
      if((ProblemList != null))
      {
        tmp85.ProblemList = this.ProblemList.DeepCopy();
      }
      if((BaseResp != null) && __isset.BaseResp)
      {
        tmp85.BaseResp = (global::CUGOJ.RPC.Gen.Base.BaseResp)this.BaseResp.DeepCopy();
      }
      tmp85.__isset.BaseResp = this.__isset.BaseResp;
      return tmp85;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ProblemList = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list86 = await iprot.ReadListBeginAsync(cancellationToken);
                  ProblemList = new List<global::CUGOJ.RPC.Gen.Common.ContestProblemStruct>(_list86.Count);
                  for(int _i87 = 0; _i87 < _list86.Count; ++_i87)
                  {
                    global::CUGOJ.RPC.Gen.Common.ContestProblemStruct _elem88;
                    _elem88 = new global::CUGOJ.RPC.Gen.Common.ContestProblemStruct();
                    await _elem88.ReadAsync(iprot, cancellationToken);
                    ProblemList.Add(_elem88);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_ProblemList = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 255:
              if (field.Type == TType.Struct)
              {
                BaseResp = new global::CUGOJ.RPC.Gen.Base.BaseResp();
                await BaseResp.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_ProblemList)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp89 = new TStruct("GetContestProblemResponse");
        await oprot.WriteStructBeginAsync(tmp89, cancellationToken);
        var tmp90 = new TField();
        if((ProblemList != null))
        {
          tmp90.Name = "ProblemList";
          tmp90.Type = TType.List;
          tmp90.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp90, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, ProblemList.Count), cancellationToken);
            foreach (global::CUGOJ.RPC.Gen.Common.ContestProblemStruct _iter91 in ProblemList)
            {
              await _iter91.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BaseResp != null) && __isset.BaseResp)
        {
          tmp90.Name = "BaseResp";
          tmp90.Type = TType.Struct;
          tmp90.ID = 255;
          await oprot.WriteFieldBeginAsync(tmp90, cancellationToken);
          await BaseResp.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is GetContestProblemResponse other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(ProblemList, other.ProblemList)
        && ((__isset.BaseResp == other.__isset.BaseResp) && ((!__isset.BaseResp) || (global::System.Object.Equals(BaseResp, other.BaseResp))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((ProblemList != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ProblemList);
        }
        if((BaseResp != null) && __isset.BaseResp)
        {
          hashcode = (hashcode * 397) + BaseResp.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp92 = new StringBuilder("GetContestProblemResponse(");
      if((ProblemList != null))
      {
        tmp92.Append(", ProblemList: ");
        ProblemList.ToString(tmp92);
      }
      if((BaseResp != null) && __isset.BaseResp)
      {
        tmp92.Append(", BaseResp: ");
        BaseResp.ToString(tmp92);
      }
      tmp92.Append(')');
      return tmp92.ToString();
    }
  }

}
